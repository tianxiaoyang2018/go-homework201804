// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat/chat_moderation.service.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// for find conversation
type FindConversationForAdminRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *FindConversationForAdminRequest) Reset()                    { *m = FindConversationForAdminRequest{} }
func (m *FindConversationForAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*FindConversationForAdminRequest) ProtoMessage()               {}
func (*FindConversationForAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FindConversationForAdminRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindConversationForAdminRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FindConversationForAdminRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type FindConversationForAdminReply struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *FindConversationForAdminReply) Reset()                    { *m = FindConversationForAdminReply{} }
func (m *FindConversationForAdminReply) String() string            { return proto.CompactTextString(m) }
func (*FindConversationForAdminReply) ProtoMessage()               {}
func (*FindConversationForAdminReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *FindConversationForAdminReply) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

// find conversations having message
type FindConversationWithMessageRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *FindConversationWithMessageRequest) Reset()         { *m = FindConversationWithMessageRequest{} }
func (m *FindConversationWithMessageRequest) String() string { return proto.CompactTextString(m) }
func (*FindConversationWithMessageRequest) ProtoMessage()    {}
func (*FindConversationWithMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2}
}

func (m *FindConversationWithMessageRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindConversationWithMessageRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FindConversationWithMessageRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type FindConversationWithMessageReply struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *FindConversationWithMessageReply) Reset()         { *m = FindConversationWithMessageReply{} }
func (m *FindConversationWithMessageReply) String() string { return proto.CompactTextString(m) }
func (*FindConversationWithMessageReply) ProtoMessage()    {}
func (*FindConversationWithMessageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3}
}

func (m *FindConversationWithMessageReply) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

// for update conversation
type UpdateConversationRequest struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *UpdateConversationRequest) Reset()                    { *m = UpdateConversationRequest{} }
func (m *UpdateConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConversationRequest) ProtoMessage()               {}
func (*UpdateConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *UpdateConversationRequest) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type UpdateConversationReply struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *UpdateConversationReply) Reset()                    { *m = UpdateConversationReply{} }
func (m *UpdateConversationReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateConversationReply) ProtoMessage()               {}
func (*UpdateConversationReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *UpdateConversationReply) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type SelectMessageForModerationRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *SelectMessageForModerationRequest) Reset()         { *m = SelectMessageForModerationRequest{} }
func (m *SelectMessageForModerationRequest) String() string { return proto.CompactTextString(m) }
func (*SelectMessageForModerationRequest) ProtoMessage()    {}
func (*SelectMessageForModerationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{6}
}

func (m *SelectMessageForModerationRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SelectMessageForModerationRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SelectMessageForModerationReply struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *SelectMessageForModerationReply) Reset()                    { *m = SelectMessageForModerationReply{} }
func (m *SelectMessageForModerationReply) String() string            { return proto.CompactTextString(m) }
func (*SelectMessageForModerationReply) ProtoMessage()               {}
func (*SelectMessageForModerationReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *SelectMessageForModerationReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type InsertMessageWithoutSendingEventRequest struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *InsertMessageWithoutSendingEventRequest) Reset() {
	*m = InsertMessageWithoutSendingEventRequest{}
}
func (m *InsertMessageWithoutSendingEventRequest) String() string { return proto.CompactTextString(m) }
func (*InsertMessageWithoutSendingEventRequest) ProtoMessage()    {}
func (*InsertMessageWithoutSendingEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{8}
}

func (m *InsertMessageWithoutSendingEventRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type InsertMessageWithoutSendingEventReply struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *InsertMessageWithoutSendingEventReply) Reset()         { *m = InsertMessageWithoutSendingEventReply{} }
func (m *InsertMessageWithoutSendingEventReply) String() string { return proto.CompactTextString(m) }
func (*InsertMessageWithoutSendingEventReply) ProtoMessage()    {}
func (*InsertMessageWithoutSendingEventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{9}
}

func (m *InsertMessageWithoutSendingEventReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// message MessageRecalledRequest {
//    string id = 1;
//    bool recalled = 2;
// }
type UpdateMessageRecalledRequest struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *UpdateMessageRecalledRequest) Reset()                    { *m = UpdateMessageRecalledRequest{} }
func (m *UpdateMessageRecalledRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMessageRecalledRequest) ProtoMessage()               {}
func (*UpdateMessageRecalledRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *UpdateMessageRecalledRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type UpdateMessageRecalledReply struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *UpdateMessageRecalledReply) Reset()                    { *m = UpdateMessageRecalledReply{} }
func (m *UpdateMessageRecalledReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateMessageRecalledReply) ProtoMessage()               {}
func (*UpdateMessageRecalledReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *UpdateMessageRecalledReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// sticker
type FindStickerByIdsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *FindStickerByIdsRequest) Reset()                    { *m = FindStickerByIdsRequest{} }
func (m *FindStickerByIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindStickerByIdsRequest) ProtoMessage()               {}
func (*FindStickerByIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *FindStickerByIdsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type FindStickerByIdsReply struct {
	Stickers []*Sticker `protobuf:"bytes,1,rep,name=stickers" json:"stickers,omitempty"`
}

func (m *FindStickerByIdsReply) Reset()                    { *m = FindStickerByIdsReply{} }
func (m *FindStickerByIdsReply) String() string            { return proto.CompactTextString(m) }
func (*FindStickerByIdsReply) ProtoMessage()               {}
func (*FindStickerByIdsReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *FindStickerByIdsReply) GetStickers() []*Sticker {
	if m != nil {
		return m.Stickers
	}
	return nil
}

type GetStickerMediaRequest struct {
	Sticker *Sticker `protobuf:"bytes,1,opt,name=sticker" json:"sticker,omitempty"`
}

func (m *GetStickerMediaRequest) Reset()                    { *m = GetStickerMediaRequest{} }
func (m *GetStickerMediaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStickerMediaRequest) ProtoMessage()               {}
func (*GetStickerMediaRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *GetStickerMediaRequest) GetSticker() *Sticker {
	if m != nil {
		return m.Sticker
	}
	return nil
}

type GetStickerMediaReply struct {
	Media *Media `protobuf:"bytes,1,opt,name=media" json:"media,omitempty"`
}

func (m *GetStickerMediaReply) Reset()                    { *m = GetStickerMediaReply{} }
func (m *GetStickerMediaReply) String() string            { return proto.CompactTextString(m) }
func (*GetStickerMediaReply) ProtoMessage()               {}
func (*GetStickerMediaReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *GetStickerMediaReply) GetMedia() *Media {
	if m != nil {
		return m.Media
	}
	return nil
}

type FindQuestionByIdsForModerationRequest struct {
	QuestionIds []string `protobuf:"bytes,1,rep,name=questionIds" json:"questionIds,omitempty"`
	Language    string   `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *FindQuestionByIdsForModerationRequest) Reset()         { *m = FindQuestionByIdsForModerationRequest{} }
func (m *FindQuestionByIdsForModerationRequest) String() string { return proto.CompactTextString(m) }
func (*FindQuestionByIdsForModerationRequest) ProtoMessage()    {}
func (*FindQuestionByIdsForModerationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{16}
}

func (m *FindQuestionByIdsForModerationRequest) GetQuestionIds() []string {
	if m != nil {
		return m.QuestionIds
	}
	return nil
}

func (m *FindQuestionByIdsForModerationRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type FindQuestionByIdsForModerationReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *FindQuestionByIdsForModerationReply) Reset()         { *m = FindQuestionByIdsForModerationReply{} }
func (m *FindQuestionByIdsForModerationReply) String() string { return proto.CompactTextString(m) }
func (*FindQuestionByIdsForModerationReply) ProtoMessage()    {}
func (*FindQuestionByIdsForModerationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{17}
}

func (m *FindQuestionByIdsForModerationReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type FindQuestionForModerationRequest struct {
	Filter   string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Usage    string `protobuf:"bytes,2,opt,name=usage" json:"usage,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Language string `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Limit    int32  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
}

func (m *FindQuestionForModerationRequest) Reset()         { *m = FindQuestionForModerationRequest{} }
func (m *FindQuestionForModerationRequest) String() string { return proto.CompactTextString(m) }
func (*FindQuestionForModerationRequest) ProtoMessage()    {}
func (*FindQuestionForModerationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{18}
}

func (m *FindQuestionForModerationRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *FindQuestionForModerationRequest) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *FindQuestionForModerationRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FindQuestionForModerationRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *FindQuestionForModerationRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FindQuestionForModerationRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type FindQuestionForModerationReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *FindQuestionForModerationReply) Reset()                    { *m = FindQuestionForModerationReply{} }
func (m *FindQuestionForModerationReply) String() string            { return proto.CompactTextString(m) }
func (*FindQuestionForModerationReply) ProtoMessage()               {}
func (*FindQuestionForModerationReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *FindQuestionForModerationReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type FindQuestionByKeywordRequest struct {
	Keyword  string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Language string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Limit    int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
}

func (m *FindQuestionByKeywordRequest) Reset()                    { *m = FindQuestionByKeywordRequest{} }
func (m *FindQuestionByKeywordRequest) String() string            { return proto.CompactTextString(m) }
func (*FindQuestionByKeywordRequest) ProtoMessage()               {}
func (*FindQuestionByKeywordRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *FindQuestionByKeywordRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *FindQuestionByKeywordRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FindQuestionByKeywordRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *FindQuestionByKeywordRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FindQuestionByKeywordRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type FindQuestionByKeywordReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *FindQuestionByKeywordReply) Reset()                    { *m = FindQuestionByKeywordReply{} }
func (m *FindQuestionByKeywordReply) String() string            { return proto.CompactTextString(m) }
func (*FindQuestionByKeywordReply) ProtoMessage()               {}
func (*FindQuestionByKeywordReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *FindQuestionByKeywordReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type InsertQuestionsRequest struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *InsertQuestionsRequest) Reset()                    { *m = InsertQuestionsRequest{} }
func (m *InsertQuestionsRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertQuestionsRequest) ProtoMessage()               {}
func (*InsertQuestionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *InsertQuestionsRequest) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type InsertQuestionsReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *InsertQuestionsReply) Reset()                    { *m = InsertQuestionsReply{} }
func (m *InsertQuestionsReply) String() string            { return proto.CompactTextString(m) }
func (*InsertQuestionsReply) ProtoMessage()               {}
func (*InsertQuestionsReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *InsertQuestionsReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type UpdateQuestionsRequest struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *UpdateQuestionsRequest) Reset()                    { *m = UpdateQuestionsRequest{} }
func (m *UpdateQuestionsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateQuestionsRequest) ProtoMessage()               {}
func (*UpdateQuestionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *UpdateQuestionsRequest) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type UpdateQuestionsReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *UpdateQuestionsReply) Reset()                    { *m = UpdateQuestionsReply{} }
func (m *UpdateQuestionsReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateQuestionsReply) ProtoMessage()               {}
func (*UpdateQuestionsReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *UpdateQuestionsReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type InsertQuestionTranslationRequest struct {
	QuestionId string `protobuf:"bytes,1,opt,name=questionId" json:"questionId,omitempty"`
	Text       string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Language   string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
}

func (m *InsertQuestionTranslationRequest) Reset()         { *m = InsertQuestionTranslationRequest{} }
func (m *InsertQuestionTranslationRequest) String() string { return proto.CompactTextString(m) }
func (*InsertQuestionTranslationRequest) ProtoMessage()    {}
func (*InsertQuestionTranslationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{26}
}

func (m *InsertQuestionTranslationRequest) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

func (m *InsertQuestionTranslationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *InsertQuestionTranslationRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type InsertQuestionTranslationReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *InsertQuestionTranslationReply) Reset()                    { *m = InsertQuestionTranslationReply{} }
func (m *InsertQuestionTranslationReply) String() string            { return proto.CompactTextString(m) }
func (*InsertQuestionTranslationReply) ProtoMessage()               {}
func (*InsertQuestionTranslationReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *InsertQuestionTranslationReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type UpdateQuestionTranslationRequest struct {
	QuestionId string `protobuf:"bytes,1,opt,name=questionId" json:"questionId,omitempty"`
	Text       string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Language   string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
}

func (m *UpdateQuestionTranslationRequest) Reset()         { *m = UpdateQuestionTranslationRequest{} }
func (m *UpdateQuestionTranslationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateQuestionTranslationRequest) ProtoMessage()    {}
func (*UpdateQuestionTranslationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{28}
}

func (m *UpdateQuestionTranslationRequest) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

func (m *UpdateQuestionTranslationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *UpdateQuestionTranslationRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type UpdateQuestionTranslationReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *UpdateQuestionTranslationReply) Reset()                    { *m = UpdateQuestionTranslationReply{} }
func (m *UpdateQuestionTranslationReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateQuestionTranslationReply) ProtoMessage()               {}
func (*UpdateQuestionTranslationReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *UpdateQuestionTranslationReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type InsertAnswersRequest struct {
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers" json:"answers,omitempty"`
}

func (m *InsertAnswersRequest) Reset()                    { *m = InsertAnswersRequest{} }
func (m *InsertAnswersRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertAnswersRequest) ProtoMessage()               {}
func (*InsertAnswersRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *InsertAnswersRequest) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type InsertAnswersReply struct {
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers" json:"answers,omitempty"`
}

func (m *InsertAnswersReply) Reset()                    { *m = InsertAnswersReply{} }
func (m *InsertAnswersReply) String() string            { return proto.CompactTextString(m) }
func (*InsertAnswersReply) ProtoMessage()               {}
func (*InsertAnswersReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *InsertAnswersReply) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type UpdateAnswersRequest struct {
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers" json:"answers,omitempty"`
}

func (m *UpdateAnswersRequest) Reset()                    { *m = UpdateAnswersRequest{} }
func (m *UpdateAnswersRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAnswersRequest) ProtoMessage()               {}
func (*UpdateAnswersRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *UpdateAnswersRequest) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type UpdateAnswersReply struct {
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers" json:"answers,omitempty"`
}

func (m *UpdateAnswersReply) Reset()                    { *m = UpdateAnswersReply{} }
func (m *UpdateAnswersReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateAnswersReply) ProtoMessage()               {}
func (*UpdateAnswersReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *UpdateAnswersReply) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type DeleteAnswerRequest struct {
	AnswerId string `protobuf:"bytes,1,opt,name=answerId" json:"answerId,omitempty"`
}

func (m *DeleteAnswerRequest) Reset()                    { *m = DeleteAnswerRequest{} }
func (m *DeleteAnswerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAnswerRequest) ProtoMessage()               {}
func (*DeleteAnswerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *DeleteAnswerRequest) GetAnswerId() string {
	if m != nil {
		return m.AnswerId
	}
	return ""
}

type DeleteAnswerReply struct {
}

func (m *DeleteAnswerReply) Reset()                    { *m = DeleteAnswerReply{} }
func (m *DeleteAnswerReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteAnswerReply) ProtoMessage()               {}
func (*DeleteAnswerReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

type InsertAnswerTranslationRequest struct {
	AnswerId string `protobuf:"bytes,1,opt,name=answerId" json:"answerId,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Language string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
}

func (m *InsertAnswerTranslationRequest) Reset()                    { *m = InsertAnswerTranslationRequest{} }
func (m *InsertAnswerTranslationRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertAnswerTranslationRequest) ProtoMessage()               {}
func (*InsertAnswerTranslationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *InsertAnswerTranslationRequest) GetAnswerId() string {
	if m != nil {
		return m.AnswerId
	}
	return ""
}

func (m *InsertAnswerTranslationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *InsertAnswerTranslationRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type InsertAnswerTranslationReply struct {
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers" json:"answers,omitempty"`
}

func (m *InsertAnswerTranslationReply) Reset()                    { *m = InsertAnswerTranslationReply{} }
func (m *InsertAnswerTranslationReply) String() string            { return proto.CompactTextString(m) }
func (*InsertAnswerTranslationReply) ProtoMessage()               {}
func (*InsertAnswerTranslationReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *InsertAnswerTranslationReply) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type UpdateAnswerTranslationRequest struct {
	AnswerId string `protobuf:"bytes,1,opt,name=answerId" json:"answerId,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Language string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
}

func (m *UpdateAnswerTranslationRequest) Reset()                    { *m = UpdateAnswerTranslationRequest{} }
func (m *UpdateAnswerTranslationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAnswerTranslationRequest) ProtoMessage()               {}
func (*UpdateAnswerTranslationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *UpdateAnswerTranslationRequest) GetAnswerId() string {
	if m != nil {
		return m.AnswerId
	}
	return ""
}

func (m *UpdateAnswerTranslationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *UpdateAnswerTranslationRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type UpdateAnswerTranslationReply struct {
	Answers []*Answer `protobuf:"bytes,1,rep,name=answers" json:"answers,omitempty"`
}

func (m *UpdateAnswerTranslationReply) Reset()                    { *m = UpdateAnswerTranslationReply{} }
func (m *UpdateAnswerTranslationReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateAnswerTranslationReply) ProtoMessage()               {}
func (*UpdateAnswerTranslationReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *UpdateAnswerTranslationReply) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

func init() {
	proto.RegisterType((*FindConversationForAdminRequest)(nil), "chat.FindConversationForAdminRequest")
	proto.RegisterType((*FindConversationForAdminReply)(nil), "chat.FindConversationForAdminReply")
	proto.RegisterType((*FindConversationWithMessageRequest)(nil), "chat.FindConversationWithMessageRequest")
	proto.RegisterType((*FindConversationWithMessageReply)(nil), "chat.FindConversationWithMessageReply")
	proto.RegisterType((*UpdateConversationRequest)(nil), "chat.UpdateConversationRequest")
	proto.RegisterType((*UpdateConversationReply)(nil), "chat.UpdateConversationReply")
	proto.RegisterType((*SelectMessageForModerationRequest)(nil), "chat.SelectMessageForModerationRequest")
	proto.RegisterType((*SelectMessageForModerationReply)(nil), "chat.SelectMessageForModerationReply")
	proto.RegisterType((*InsertMessageWithoutSendingEventRequest)(nil), "chat.InsertMessageWithoutSendingEventRequest")
	proto.RegisterType((*InsertMessageWithoutSendingEventReply)(nil), "chat.InsertMessageWithoutSendingEventReply")
	proto.RegisterType((*UpdateMessageRecalledRequest)(nil), "chat.UpdateMessageRecalledRequest")
	proto.RegisterType((*UpdateMessageRecalledReply)(nil), "chat.UpdateMessageRecalledReply")
	proto.RegisterType((*FindStickerByIdsRequest)(nil), "chat.FindStickerByIdsRequest")
	proto.RegisterType((*FindStickerByIdsReply)(nil), "chat.FindStickerByIdsReply")
	proto.RegisterType((*GetStickerMediaRequest)(nil), "chat.GetStickerMediaRequest")
	proto.RegisterType((*GetStickerMediaReply)(nil), "chat.GetStickerMediaReply")
	proto.RegisterType((*FindQuestionByIdsForModerationRequest)(nil), "chat.FindQuestionByIdsForModerationRequest")
	proto.RegisterType((*FindQuestionByIdsForModerationReply)(nil), "chat.FindQuestionByIdsForModerationReply")
	proto.RegisterType((*FindQuestionForModerationRequest)(nil), "chat.FindQuestionForModerationRequest")
	proto.RegisterType((*FindQuestionForModerationReply)(nil), "chat.FindQuestionForModerationReply")
	proto.RegisterType((*FindQuestionByKeywordRequest)(nil), "chat.FindQuestionByKeywordRequest")
	proto.RegisterType((*FindQuestionByKeywordReply)(nil), "chat.FindQuestionByKeywordReply")
	proto.RegisterType((*InsertQuestionsRequest)(nil), "chat.InsertQuestionsRequest")
	proto.RegisterType((*InsertQuestionsReply)(nil), "chat.InsertQuestionsReply")
	proto.RegisterType((*UpdateQuestionsRequest)(nil), "chat.UpdateQuestionsRequest")
	proto.RegisterType((*UpdateQuestionsReply)(nil), "chat.UpdateQuestionsReply")
	proto.RegisterType((*InsertQuestionTranslationRequest)(nil), "chat.InsertQuestionTranslationRequest")
	proto.RegisterType((*InsertQuestionTranslationReply)(nil), "chat.InsertQuestionTranslationReply")
	proto.RegisterType((*UpdateQuestionTranslationRequest)(nil), "chat.UpdateQuestionTranslationRequest")
	proto.RegisterType((*UpdateQuestionTranslationReply)(nil), "chat.UpdateQuestionTranslationReply")
	proto.RegisterType((*InsertAnswersRequest)(nil), "chat.InsertAnswersRequest")
	proto.RegisterType((*InsertAnswersReply)(nil), "chat.InsertAnswersReply")
	proto.RegisterType((*UpdateAnswersRequest)(nil), "chat.UpdateAnswersRequest")
	proto.RegisterType((*UpdateAnswersReply)(nil), "chat.UpdateAnswersReply")
	proto.RegisterType((*DeleteAnswerRequest)(nil), "chat.DeleteAnswerRequest")
	proto.RegisterType((*DeleteAnswerReply)(nil), "chat.DeleteAnswerReply")
	proto.RegisterType((*InsertAnswerTranslationRequest)(nil), "chat.InsertAnswerTranslationRequest")
	proto.RegisterType((*InsertAnswerTranslationReply)(nil), "chat.InsertAnswerTranslationReply")
	proto.RegisterType((*UpdateAnswerTranslationRequest)(nil), "chat.UpdateAnswerTranslationRequest")
	proto.RegisterType((*UpdateAnswerTranslationReply)(nil), "chat.UpdateAnswerTranslationReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatModerationService service

type ChatModerationServiceClient interface {
	// chat counters
	FindChatCountersByUserId(ctx context.Context, in *FindChatCountersByUserIdRequest, opts ...grpc.CallOption) (*ChatCountersReply, error)
	// conversations
	FindConversationsByOtherIds(ctx context.Context, in *FindConversationsByOtherIdsRequest, opts ...grpc.CallOption) (*ConversationsReply, error)
	FindConversationOtherUserIds(ctx context.Context, in *FindConversationOtherUserIdsRequest, opts ...grpc.CallOption) (*FindConversationOtherUserIdsReply, error)
	FindConversation(ctx context.Context, in *FindConversationRequest, opts ...grpc.CallOption) (*FindConversationReply, error)
	InsertConversation(ctx context.Context, in *InsertConversationRequest, opts ...grpc.CallOption) (*InsertConversationReply, error)
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error)
	// used for message
	// for insert message
	InsertMessage(ctx context.Context, in *InsertMessageRequest, opts ...grpc.CallOption) (*InsertMessageReply, error)
	FindMessageByIds(ctx context.Context, in *FindMessageByIdsRequest, opts ...grpc.CallOption) (*FindMessageByIdsReply, error)
	FindMessage(ctx context.Context, in *FindMessageRequest, opts ...grpc.CallOption) (*FindMessageReply, error)
	// question
	FindQuestionByIds(ctx context.Context, in *FindQuestionByIdsRequest, opts ...grpc.CallOption) (*FindQuestionByIdsReply, error)
	// conversation
	FindConversationForAdmin(ctx context.Context, in *FindConversationForAdminRequest, opts ...grpc.CallOption) (*FindConversationForAdminReply, error)
	FindConversationWithMessage(ctx context.Context, in *FindConversationWithMessageRequest, opts ...grpc.CallOption) (*FindConversationWithMessageReply, error)
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationReply, error)
	// messages
	SelectMessageForModeration(ctx context.Context, in *SelectMessageForModerationRequest, opts ...grpc.CallOption) (*SelectMessageForModerationReply, error)
	InsertMessageWithoutSendingEvent(ctx context.Context, in *InsertMessageWithoutSendingEventRequest, opts ...grpc.CallOption) (*InsertMessageWithoutSendingEventReply, error)
	UpdateMessageRecalled(ctx context.Context, in *UpdateMessageRecalledRequest, opts ...grpc.CallOption) (*UpdateMessageRecalledReply, error)
	// sticker
	FindStickerByIds(ctx context.Context, in *FindStickerByIdsRequest, opts ...grpc.CallOption) (*FindStickerByIdsReply, error)
	GetStickerMedia(ctx context.Context, in *GetStickerMediaRequest, opts ...grpc.CallOption) (*GetStickerMediaReply, error)
	// question
	FindQuestionByIdsForModeration(ctx context.Context, in *FindQuestionByIdsForModerationRequest, opts ...grpc.CallOption) (*FindQuestionByIdsForModerationReply, error)
	FindQuestionForModeration(ctx context.Context, in *FindQuestionForModerationRequest, opts ...grpc.CallOption) (*FindQuestionForModerationReply, error)
	FindQuestionByKeyword(ctx context.Context, in *FindQuestionByKeywordRequest, opts ...grpc.CallOption) (*FindQuestionByKeywordReply, error)
	InsertQuestions(ctx context.Context, in *InsertQuestionsRequest, opts ...grpc.CallOption) (*InsertQuestionsReply, error)
	UpdateQuestions(ctx context.Context, in *UpdateQuestionsRequest, opts ...grpc.CallOption) (*UpdateQuestionsReply, error)
	InsertQuestionTranslation(ctx context.Context, in *InsertQuestionTranslationRequest, opts ...grpc.CallOption) (*InsertQuestionTranslationReply, error)
	UpdateQuestionTranslation(ctx context.Context, in *UpdateQuestionTranslationRequest, opts ...grpc.CallOption) (*UpdateQuestionTranslationReply, error)
	InsertAnswers(ctx context.Context, in *InsertAnswersRequest, opts ...grpc.CallOption) (*InsertAnswersReply, error)
	UpdateAnswers(ctx context.Context, in *UpdateAnswersRequest, opts ...grpc.CallOption) (*UpdateAnswersReply, error)
	DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerReply, error)
	InsertAnswerTranslation(ctx context.Context, in *InsertAnswerTranslationRequest, opts ...grpc.CallOption) (*InsertAnswerTranslationReply, error)
	UpdateAnswerTranslation(ctx context.Context, in *UpdateAnswerTranslationRequest, opts ...grpc.CallOption) (*UpdateAnswerTranslationReply, error)
}

type chatModerationServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatModerationServiceClient(cc *grpc.ClientConn) ChatModerationServiceClient {
	return &chatModerationServiceClient{cc}
}

func (c *chatModerationServiceClient) FindChatCountersByUserId(ctx context.Context, in *FindChatCountersByUserIdRequest, opts ...grpc.CallOption) (*ChatCountersReply, error) {
	out := new(ChatCountersReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindChatCountersByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindConversationsByOtherIds(ctx context.Context, in *FindConversationsByOtherIdsRequest, opts ...grpc.CallOption) (*ConversationsReply, error) {
	out := new(ConversationsReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindConversationsByOtherIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindConversationOtherUserIds(ctx context.Context, in *FindConversationOtherUserIdsRequest, opts ...grpc.CallOption) (*FindConversationOtherUserIdsReply, error) {
	out := new(FindConversationOtherUserIdsReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindConversationOtherUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindConversation(ctx context.Context, in *FindConversationRequest, opts ...grpc.CallOption) (*FindConversationReply, error) {
	out := new(FindConversationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) InsertConversation(ctx context.Context, in *InsertConversationRequest, opts ...grpc.CallOption) (*InsertConversationReply, error) {
	out := new(InsertConversationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/InsertConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error) {
	out := new(DeleteConversationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/DeleteConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) InsertMessage(ctx context.Context, in *InsertMessageRequest, opts ...grpc.CallOption) (*InsertMessageReply, error) {
	out := new(InsertMessageReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/InsertMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindMessageByIds(ctx context.Context, in *FindMessageByIdsRequest, opts ...grpc.CallOption) (*FindMessageByIdsReply, error) {
	out := new(FindMessageByIdsReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindMessageByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindMessage(ctx context.Context, in *FindMessageRequest, opts ...grpc.CallOption) (*FindMessageReply, error) {
	out := new(FindMessageReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindQuestionByIds(ctx context.Context, in *FindQuestionByIdsRequest, opts ...grpc.CallOption) (*FindQuestionByIdsReply, error) {
	out := new(FindQuestionByIdsReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindQuestionByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindConversationForAdmin(ctx context.Context, in *FindConversationForAdminRequest, opts ...grpc.CallOption) (*FindConversationForAdminReply, error) {
	out := new(FindConversationForAdminReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindConversationForAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindConversationWithMessage(ctx context.Context, in *FindConversationWithMessageRequest, opts ...grpc.CallOption) (*FindConversationWithMessageReply, error) {
	out := new(FindConversationWithMessageReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindConversationWithMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationReply, error) {
	out := new(UpdateConversationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/UpdateConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) SelectMessageForModeration(ctx context.Context, in *SelectMessageForModerationRequest, opts ...grpc.CallOption) (*SelectMessageForModerationReply, error) {
	out := new(SelectMessageForModerationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/SelectMessageForModeration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) InsertMessageWithoutSendingEvent(ctx context.Context, in *InsertMessageWithoutSendingEventRequest, opts ...grpc.CallOption) (*InsertMessageWithoutSendingEventReply, error) {
	out := new(InsertMessageWithoutSendingEventReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/InsertMessageWithoutSendingEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) UpdateMessageRecalled(ctx context.Context, in *UpdateMessageRecalledRequest, opts ...grpc.CallOption) (*UpdateMessageRecalledReply, error) {
	out := new(UpdateMessageRecalledReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/UpdateMessageRecalled", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindStickerByIds(ctx context.Context, in *FindStickerByIdsRequest, opts ...grpc.CallOption) (*FindStickerByIdsReply, error) {
	out := new(FindStickerByIdsReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindStickerByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) GetStickerMedia(ctx context.Context, in *GetStickerMediaRequest, opts ...grpc.CallOption) (*GetStickerMediaReply, error) {
	out := new(GetStickerMediaReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/GetStickerMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindQuestionByIdsForModeration(ctx context.Context, in *FindQuestionByIdsForModerationRequest, opts ...grpc.CallOption) (*FindQuestionByIdsForModerationReply, error) {
	out := new(FindQuestionByIdsForModerationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindQuestionByIdsForModeration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindQuestionForModeration(ctx context.Context, in *FindQuestionForModerationRequest, opts ...grpc.CallOption) (*FindQuestionForModerationReply, error) {
	out := new(FindQuestionForModerationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindQuestionForModeration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) FindQuestionByKeyword(ctx context.Context, in *FindQuestionByKeywordRequest, opts ...grpc.CallOption) (*FindQuestionByKeywordReply, error) {
	out := new(FindQuestionByKeywordReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/FindQuestionByKeyword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) InsertQuestions(ctx context.Context, in *InsertQuestionsRequest, opts ...grpc.CallOption) (*InsertQuestionsReply, error) {
	out := new(InsertQuestionsReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/InsertQuestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) UpdateQuestions(ctx context.Context, in *UpdateQuestionsRequest, opts ...grpc.CallOption) (*UpdateQuestionsReply, error) {
	out := new(UpdateQuestionsReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/UpdateQuestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) InsertQuestionTranslation(ctx context.Context, in *InsertQuestionTranslationRequest, opts ...grpc.CallOption) (*InsertQuestionTranslationReply, error) {
	out := new(InsertQuestionTranslationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/InsertQuestionTranslation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) UpdateQuestionTranslation(ctx context.Context, in *UpdateQuestionTranslationRequest, opts ...grpc.CallOption) (*UpdateQuestionTranslationReply, error) {
	out := new(UpdateQuestionTranslationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/UpdateQuestionTranslation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) InsertAnswers(ctx context.Context, in *InsertAnswersRequest, opts ...grpc.CallOption) (*InsertAnswersReply, error) {
	out := new(InsertAnswersReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/InsertAnswers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) UpdateAnswers(ctx context.Context, in *UpdateAnswersRequest, opts ...grpc.CallOption) (*UpdateAnswersReply, error) {
	out := new(UpdateAnswersReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/UpdateAnswers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerReply, error) {
	out := new(DeleteAnswerReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/DeleteAnswer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) InsertAnswerTranslation(ctx context.Context, in *InsertAnswerTranslationRequest, opts ...grpc.CallOption) (*InsertAnswerTranslationReply, error) {
	out := new(InsertAnswerTranslationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/InsertAnswerTranslation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModerationServiceClient) UpdateAnswerTranslation(ctx context.Context, in *UpdateAnswerTranslationRequest, opts ...grpc.CallOption) (*UpdateAnswerTranslationReply, error) {
	out := new(UpdateAnswerTranslationReply)
	err := grpc.Invoke(ctx, "/chat.ChatModerationService/UpdateAnswerTranslation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatModerationService service

type ChatModerationServiceServer interface {
	// chat counters
	FindChatCountersByUserId(context.Context, *FindChatCountersByUserIdRequest) (*ChatCountersReply, error)
	// conversations
	FindConversationsByOtherIds(context.Context, *FindConversationsByOtherIdsRequest) (*ConversationsReply, error)
	FindConversationOtherUserIds(context.Context, *FindConversationOtherUserIdsRequest) (*FindConversationOtherUserIdsReply, error)
	FindConversation(context.Context, *FindConversationRequest) (*FindConversationReply, error)
	InsertConversation(context.Context, *InsertConversationRequest) (*InsertConversationReply, error)
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationReply, error)
	// used for message
	// for insert message
	InsertMessage(context.Context, *InsertMessageRequest) (*InsertMessageReply, error)
	FindMessageByIds(context.Context, *FindMessageByIdsRequest) (*FindMessageByIdsReply, error)
	FindMessage(context.Context, *FindMessageRequest) (*FindMessageReply, error)
	// question
	FindQuestionByIds(context.Context, *FindQuestionByIdsRequest) (*FindQuestionByIdsReply, error)
	// conversation
	FindConversationForAdmin(context.Context, *FindConversationForAdminRequest) (*FindConversationForAdminReply, error)
	FindConversationWithMessage(context.Context, *FindConversationWithMessageRequest) (*FindConversationWithMessageReply, error)
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationReply, error)
	// messages
	SelectMessageForModeration(context.Context, *SelectMessageForModerationRequest) (*SelectMessageForModerationReply, error)
	InsertMessageWithoutSendingEvent(context.Context, *InsertMessageWithoutSendingEventRequest) (*InsertMessageWithoutSendingEventReply, error)
	UpdateMessageRecalled(context.Context, *UpdateMessageRecalledRequest) (*UpdateMessageRecalledReply, error)
	// sticker
	FindStickerByIds(context.Context, *FindStickerByIdsRequest) (*FindStickerByIdsReply, error)
	GetStickerMedia(context.Context, *GetStickerMediaRequest) (*GetStickerMediaReply, error)
	// question
	FindQuestionByIdsForModeration(context.Context, *FindQuestionByIdsForModerationRequest) (*FindQuestionByIdsForModerationReply, error)
	FindQuestionForModeration(context.Context, *FindQuestionForModerationRequest) (*FindQuestionForModerationReply, error)
	FindQuestionByKeyword(context.Context, *FindQuestionByKeywordRequest) (*FindQuestionByKeywordReply, error)
	InsertQuestions(context.Context, *InsertQuestionsRequest) (*InsertQuestionsReply, error)
	UpdateQuestions(context.Context, *UpdateQuestionsRequest) (*UpdateQuestionsReply, error)
	InsertQuestionTranslation(context.Context, *InsertQuestionTranslationRequest) (*InsertQuestionTranslationReply, error)
	UpdateQuestionTranslation(context.Context, *UpdateQuestionTranslationRequest) (*UpdateQuestionTranslationReply, error)
	InsertAnswers(context.Context, *InsertAnswersRequest) (*InsertAnswersReply, error)
	UpdateAnswers(context.Context, *UpdateAnswersRequest) (*UpdateAnswersReply, error)
	DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerReply, error)
	InsertAnswerTranslation(context.Context, *InsertAnswerTranslationRequest) (*InsertAnswerTranslationReply, error)
	UpdateAnswerTranslation(context.Context, *UpdateAnswerTranslationRequest) (*UpdateAnswerTranslationReply, error)
}

func RegisterChatModerationServiceServer(s *grpc.Server, srv ChatModerationServiceServer) {
	s.RegisterService(&_ChatModerationService_serviceDesc, srv)
}

func _ChatModerationService_FindChatCountersByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindChatCountersByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindChatCountersByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindChatCountersByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindChatCountersByUserId(ctx, req.(*FindChatCountersByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindConversationsByOtherIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationsByOtherIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindConversationsByOtherIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindConversationsByOtherIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindConversationsByOtherIds(ctx, req.(*FindConversationsByOtherIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindConversationOtherUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationOtherUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindConversationOtherUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindConversationOtherUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindConversationOtherUserIds(ctx, req.(*FindConversationOtherUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindConversation(ctx, req.(*FindConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_InsertConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).InsertConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/InsertConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).InsertConversation(ctx, req.(*InsertConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_InsertMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).InsertMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/InsertMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).InsertMessage(ctx, req.(*InsertMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindMessageByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMessageByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindMessageByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindMessageByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindMessageByIds(ctx, req.(*FindMessageByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindMessage(ctx, req.(*FindMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindQuestionByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQuestionByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindQuestionByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindQuestionByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindQuestionByIds(ctx, req.(*FindQuestionByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindConversationForAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationForAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindConversationForAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindConversationForAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindConversationForAdmin(ctx, req.(*FindConversationForAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindConversationWithMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationWithMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindConversationWithMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindConversationWithMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindConversationWithMessage(ctx, req.(*FindConversationWithMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/UpdateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_SelectMessageForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectMessageForModerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).SelectMessageForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/SelectMessageForModeration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).SelectMessageForModeration(ctx, req.(*SelectMessageForModerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_InsertMessageWithoutSendingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertMessageWithoutSendingEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).InsertMessageWithoutSendingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/InsertMessageWithoutSendingEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).InsertMessageWithoutSendingEvent(ctx, req.(*InsertMessageWithoutSendingEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_UpdateMessageRecalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRecalledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).UpdateMessageRecalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/UpdateMessageRecalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).UpdateMessageRecalled(ctx, req.(*UpdateMessageRecalledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindStickerByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStickerByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindStickerByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindStickerByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindStickerByIds(ctx, req.(*FindStickerByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_GetStickerMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).GetStickerMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/GetStickerMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).GetStickerMedia(ctx, req.(*GetStickerMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindQuestionByIdsForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQuestionByIdsForModerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindQuestionByIdsForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindQuestionByIdsForModeration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindQuestionByIdsForModeration(ctx, req.(*FindQuestionByIdsForModerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindQuestionForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQuestionForModerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindQuestionForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindQuestionForModeration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindQuestionForModeration(ctx, req.(*FindQuestionForModerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_FindQuestionByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQuestionByKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).FindQuestionByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/FindQuestionByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).FindQuestionByKeyword(ctx, req.(*FindQuestionByKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_InsertQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).InsertQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/InsertQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).InsertQuestions(ctx, req.(*InsertQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_UpdateQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).UpdateQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/UpdateQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).UpdateQuestions(ctx, req.(*UpdateQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_InsertQuestionTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertQuestionTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).InsertQuestionTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/InsertQuestionTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).InsertQuestionTranslation(ctx, req.(*InsertQuestionTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_UpdateQuestionTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).UpdateQuestionTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/UpdateQuestionTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).UpdateQuestionTranslation(ctx, req.(*UpdateQuestionTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_InsertAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).InsertAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/InsertAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).InsertAnswers(ctx, req.(*InsertAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_UpdateAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).UpdateAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/UpdateAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).UpdateAnswers(ctx, req.(*UpdateAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/DeleteAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).DeleteAnswer(ctx, req.(*DeleteAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_InsertAnswerTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAnswerTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).InsertAnswerTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/InsertAnswerTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).InsertAnswerTranslation(ctx, req.(*InsertAnswerTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModerationService_UpdateAnswerTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnswerTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModerationServiceServer).UpdateAnswerTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatModerationService/UpdateAnswerTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModerationServiceServer).UpdateAnswerTranslation(ctx, req.(*UpdateAnswerTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatModerationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatModerationService",
	HandlerType: (*ChatModerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindChatCountersByUserId",
			Handler:    _ChatModerationService_FindChatCountersByUserId_Handler,
		},
		{
			MethodName: "FindConversationsByOtherIds",
			Handler:    _ChatModerationService_FindConversationsByOtherIds_Handler,
		},
		{
			MethodName: "FindConversationOtherUserIds",
			Handler:    _ChatModerationService_FindConversationOtherUserIds_Handler,
		},
		{
			MethodName: "FindConversation",
			Handler:    _ChatModerationService_FindConversation_Handler,
		},
		{
			MethodName: "InsertConversation",
			Handler:    _ChatModerationService_InsertConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _ChatModerationService_DeleteConversation_Handler,
		},
		{
			MethodName: "InsertMessage",
			Handler:    _ChatModerationService_InsertMessage_Handler,
		},
		{
			MethodName: "FindMessageByIds",
			Handler:    _ChatModerationService_FindMessageByIds_Handler,
		},
		{
			MethodName: "FindMessage",
			Handler:    _ChatModerationService_FindMessage_Handler,
		},
		{
			MethodName: "FindQuestionByIds",
			Handler:    _ChatModerationService_FindQuestionByIds_Handler,
		},
		{
			MethodName: "FindConversationForAdmin",
			Handler:    _ChatModerationService_FindConversationForAdmin_Handler,
		},
		{
			MethodName: "FindConversationWithMessage",
			Handler:    _ChatModerationService_FindConversationWithMessage_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _ChatModerationService_UpdateConversation_Handler,
		},
		{
			MethodName: "SelectMessageForModeration",
			Handler:    _ChatModerationService_SelectMessageForModeration_Handler,
		},
		{
			MethodName: "InsertMessageWithoutSendingEvent",
			Handler:    _ChatModerationService_InsertMessageWithoutSendingEvent_Handler,
		},
		{
			MethodName: "UpdateMessageRecalled",
			Handler:    _ChatModerationService_UpdateMessageRecalled_Handler,
		},
		{
			MethodName: "FindStickerByIds",
			Handler:    _ChatModerationService_FindStickerByIds_Handler,
		},
		{
			MethodName: "GetStickerMedia",
			Handler:    _ChatModerationService_GetStickerMedia_Handler,
		},
		{
			MethodName: "FindQuestionByIdsForModeration",
			Handler:    _ChatModerationService_FindQuestionByIdsForModeration_Handler,
		},
		{
			MethodName: "FindQuestionForModeration",
			Handler:    _ChatModerationService_FindQuestionForModeration_Handler,
		},
		{
			MethodName: "FindQuestionByKeyword",
			Handler:    _ChatModerationService_FindQuestionByKeyword_Handler,
		},
		{
			MethodName: "InsertQuestions",
			Handler:    _ChatModerationService_InsertQuestions_Handler,
		},
		{
			MethodName: "UpdateQuestions",
			Handler:    _ChatModerationService_UpdateQuestions_Handler,
		},
		{
			MethodName: "InsertQuestionTranslation",
			Handler:    _ChatModerationService_InsertQuestionTranslation_Handler,
		},
		{
			MethodName: "UpdateQuestionTranslation",
			Handler:    _ChatModerationService_UpdateQuestionTranslation_Handler,
		},
		{
			MethodName: "InsertAnswers",
			Handler:    _ChatModerationService_InsertAnswers_Handler,
		},
		{
			MethodName: "UpdateAnswers",
			Handler:    _ChatModerationService_UpdateAnswers_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _ChatModerationService_DeleteAnswer_Handler,
		},
		{
			MethodName: "InsertAnswerTranslation",
			Handler:    _ChatModerationService_InsertAnswerTranslation_Handler,
		},
		{
			MethodName: "UpdateAnswerTranslation",
			Handler:    _ChatModerationService_UpdateAnswerTranslation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat_moderation.service.proto",
}

func init() { proto.RegisterFile("chat/chat_moderation.service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xeb, 0x6e, 0xdb, 0x36,
	0x14, 0xb6, 0x9b, 0xa4, 0x8d, 0x4f, 0x9a, 0x2d, 0x65, 0x6e, 0x8e, 0x9a, 0x8b, 0xcb, 0xe6, 0x8a,
	0x2c, 0xc9, 0x9a, 0xfd, 0xd9, 0x80, 0xa1, 0x40, 0x2e, 0x4b, 0x90, 0x6d, 0xd9, 0x56, 0xb9, 0xd9,
	0xb0, 0xa1, 0x40, 0xa1, 0xda, 0x8c, 0xad, 0x45, 0x96, 0x52, 0x89, 0x4e, 0xe7, 0xfd, 0xda, 0x5b,
	0x0c, 0xd8, 0x63, 0xec, 0x09, 0x07, 0x89, 0xa4, 0x4c, 0x5a, 0xa4, 0x1c, 0x25, 0x43, 0xff, 0x14,
	0x25, 0xcf, 0xe1, 0x77, 0x2e, 0x3c, 0x87, 0x3a, 0x9f, 0x03, 0xb8, 0xd1, 0x76, 0xe8, 0x5e, 0xfc,
	0xcf, 0xdb, 0x4e, 0xd0, 0x24, 0xa1, 0x43, 0xdd, 0xc0, 0xdf, 0x8d, 0x48, 0x78, 0xe3, 0x36, 0xc8,
	0xee, 0x75, 0x18, 0xd0, 0x00, 0x8d, 0xc6, 0x62, 0x6b, 0x9e, 0x69, 0x06, 0xfe, 0x0d, 0x09, 0x23,
	0xa6, 0x96, 0x88, 0xad, 0xa9, 0x44, 0xd0, 0x21, 0x4d, 0xd7, 0xe1, 0x3b, 0x88, 0xef, 0x44, 0x91,
	0xd3, 0x22, 0xca, 0x5e, 0x44, 0xdd, 0xc6, 0x15, 0x09, 0xf9, 0xde, 0x74, 0xb2, 0xf7, 0xbe, 0x4b,
	0x22, 0x09, 0x6e, 0xb1, 0xef, 0x51, 0x23, 0x08, 0x89, 0xea, 0x0b, 0x6e, 0xc1, 0xca, 0x89, 0xeb,
	0x37, 0x8f, 0x24, 0x37, 0x4e, 0x82, 0xf0, 0xa0, 0xd9, 0x71, 0x7d, 0x9b, 0x24, 0x48, 0x68, 0x0e,
	0x1e, 0x76, 0x23, 0x12, 0x9e, 0x35, 0xab, 0xe5, 0x5a, 0x79, 0xb3, 0x62, 0xf3, 0x55, 0xbc, 0x1f,
	0x5c, 0x5e, 0x46, 0x84, 0x56, 0x1f, 0xd4, 0xca, 0x9b, 0x63, 0x36, 0x5f, 0xa1, 0x19, 0x18, 0xf3,
	0xdc, 0x8e, 0x4b, 0xab, 0x23, 0xc9, 0x36, 0x5b, 0xe0, 0x5f, 0x61, 0xc9, 0x6c, 0xe8, 0xda, 0xeb,
	0xa1, 0x2f, 0x61, 0x52, 0x4e, 0x46, 0x54, 0x2d, 0xd7, 0x46, 0x36, 0x27, 0xf6, 0xd1, 0x6e, 0xec,
	0xfa, 0xae, 0x7c, 0xce, 0x56, 0x15, 0xf1, 0xef, 0x80, 0x07, 0xa1, 0x7f, 0x71, 0x69, 0xfb, 0x9c,
	0xe5, 0xeb, 0xff, 0x0d, 0xe3, 0x0d, 0xd4, 0x72, 0x6d, 0xdd, 0x2f, 0x92, 0x0b, 0x58, 0xb8, 0xb8,
	0x6e, 0x3a, 0x94, 0x28, 0x4a, 0x3c, 0x80, 0xbb, 0xc3, 0xd6, 0x61, 0x5e, 0x07, 0x7b, 0x3f, 0x5f,
	0x5f, 0xc1, 0xb3, 0x3a, 0xf1, 0x48, 0x83, 0xf2, 0xd8, 0x4f, 0x82, 0xf0, 0x3c, 0xad, 0xf8, 0x61,
	0x49, 0x4f, 0x93, 0xfb, 0x40, 0x4e, 0xee, 0xf7, 0xb0, 0x92, 0x07, 0x19, 0xfb, 0xbb, 0x05, 0xe3,
	0xbc, 0x0f, 0x84, 0xab, 0x93, 0xcc, 0x55, 0x71, 0x03, 0xa9, 0x18, 0xbf, 0x86, 0x8d, 0x33, 0x3f,
	0x22, 0xa1, 0x40, 0x8b, 0xef, 0x29, 0xe8, 0xd2, 0x3a, 0xf1, 0x9b, 0xae, 0xdf, 0xfa, 0xe6, 0x86,
	0xf8, 0x54, 0xb8, 0x59, 0x00, 0xd5, 0x86, 0xb5, 0xe1, 0xa8, 0x05, 0x3d, 0x3d, 0x83, 0x45, 0x76,
	0x3f, 0x69, 0x19, 0x35, 0x1c, 0xcf, 0x23, 0xcd, 0x3b, 0xb8, 0x77, 0x0a, 0x96, 0x01, 0xaa, 0xa0,
	0x4f, 0xdb, 0x30, 0x1f, 0x17, 0x7a, 0x9d, 0x3d, 0x30, 0x87, 0xbd, 0xb3, 0x66, 0x24, 0xdc, 0x99,
	0x82, 0x11, 0xb7, 0xc9, 0x00, 0x2a, 0x76, 0xfc, 0x5f, 0x7c, 0x08, 0xb3, 0x59, 0x65, 0x6e, 0x90,
	0x3f, 0x51, 0x03, 0x06, 0xb9, 0xaa, 0x9d, 0x8a, 0xf1, 0x01, 0xcc, 0x9d, 0x12, 0xca, 0xf7, 0xcf,
	0xe3, 0xd7, 0x4f, 0xd8, 0xdb, 0x80, 0x47, 0x5c, 0x2b, 0xa9, 0xa2, 0x0c, 0x86, 0x90, 0xe2, 0xaf,
	0x60, 0x26, 0x03, 0x11, 0x7b, 0xf1, 0x0c, 0xc6, 0x92, 0xe7, 0x94, 0x1f, 0x9f, 0x10, 0x31, 0xc7,
	0x0a, 0x4c, 0x82, 0x09, 0xac, 0xc5, 0x11, 0xbc, 0xe2, 0x6f, 0x67, 0x12, 0x82, 0xb6, 0xa2, 0x6b,
	0x30, 0x21, 0x1e, 0xd8, 0xb3, 0x34, 0x09, 0xf2, 0x16, 0xb2, 0x60, 0xdc, 0x73, 0xfc, 0x56, 0xd7,
	0x69, 0x91, 0xa4, 0xbc, 0x2b, 0x76, 0xba, 0xc6, 0x75, 0x78, 0x3e, 0xcc, 0x4c, 0xec, 0xf0, 0x67,
	0x50, 0x11, 0x88, 0x22, 0x6f, 0x9f, 0x30, 0xa7, 0xc5, 0x49, 0xbb, 0xaf, 0x80, 0xff, 0x2d, 0xb3,
	0x47, 0x49, 0xc8, 0x4c, 0x9d, 0x78, 0xe9, 0x7a, 0x94, 0xe7, 0xb0, 0x62, 0xf3, 0x55, 0xdc, 0x89,
	0xdd, 0xa8, 0xef, 0x2a, 0x5b, 0xc4, 0xda, 0x11, 0x75, 0x68, 0x37, 0x4a, 0x5e, 0xbf, 0x8a, 0xcd,
	0x57, 0x4a, 0x6c, 0xa3, 0x6a, 0x6c, 0xfd, 0x9e, 0x1e, 0x93, 0x7a, 0x5a, 0x7a, 0x5e, 0x1f, 0xca,
	0xcf, 0x2b, 0xfe, 0x01, 0x96, 0x73, 0x7c, 0x2e, 0x9e, 0x84, 0x7f, 0xca, 0xb0, 0xa8, 0xa6, 0xf6,
	0x3b, 0xd2, 0xfb, 0x10, 0x84, 0x69, 0x13, 0x55, 0xe1, 0xd1, 0x15, 0xdb, 0xe1, 0x19, 0x10, 0x4b,
	0x29, 0xd8, 0x07, 0xc6, 0x60, 0x47, 0x4c, 0xc1, 0x8e, 0xea, 0x83, 0x1d, 0x53, 0x82, 0xfd, 0x16,
	0x2c, 0x83, 0x6f, 0xc5, 0x03, 0x3d, 0x81, 0x39, 0xf6, 0x00, 0x09, 0x61, 0xda, 0x97, 0xc5, 0x70,
	0x8e, 0x61, 0x26, 0x83, 0x73, 0x27, 0x6f, 0xd8, 0x7b, 0x73, 0x7f, 0x6f, 0x32, 0x38, 0xc5, 0xbd,
	0x09, 0xa1, 0xa6, 0xc6, 0xf4, 0x3a, 0x74, 0xfc, 0xc8, 0x53, 0x1a, 0x61, 0x19, 0xa0, 0xdf, 0xad,
	0xbc, 0x14, 0xa4, 0x1d, 0x84, 0x60, 0x94, 0x92, 0x3f, 0x28, 0xaf, 0x85, 0xe4, 0xff, 0x79, 0x95,
	0x10, 0x17, 0x72, 0x8e, 0xcd, 0x3b, 0xc5, 0xa0, 0x66, 0xe2, 0xe3, 0xc4, 0x90, 0x63, 0xb3, 0x78,
	0x0c, 0x2f, 0x45, 0x6d, 0x1d, 0xf8, 0xd1, 0x07, 0x12, 0xa6, 0x35, 0xb1, 0x0e, 0x8f, 0x1c, 0xb6,
	0xc3, 0x31, 0x1e, 0x33, 0x0c, 0xa6, 0x66, 0x0b, 0x21, 0xfe, 0x1a, 0xd0, 0xc0, 0xf9, 0xd8, 0x87,
	0xdb, 0x9e, 0x7e, 0x29, 0x6a, 0xe9, 0xee, 0xd6, 0x07, 0xce, 0x17, 0xb1, 0xfe, 0x02, 0xa6, 0x8f,
	0x89, 0x47, 0xc4, 0x69, 0x61, 0xdc, 0x82, 0x71, 0xa6, 0x91, 0x5e, 0x58, 0xba, 0xc6, 0xd3, 0xf0,
	0x44, 0x3d, 0x72, 0xed, 0xf5, 0xb0, 0x27, 0xea, 0x8a, 0x6d, 0x6a, 0xaa, 0x20, 0x07, 0xb2, 0x70,
	0x05, 0x9c, 0xc0, 0xa2, 0xd1, 0x5a, 0x91, 0xe8, 0x3d, 0x51, 0x49, 0x1f, 0xcb, 0x6b, 0xa3, 0xb5,
	0x02, 0x5e, 0xef, 0xff, 0x3d, 0x07, 0xb3, 0x47, 0x6d, 0x87, 0xf6, 0x3f, 0x41, 0x75, 0xc6, 0x92,
	0xd0, 0x1b, 0xa8, 0x26, 0xf3, 0x7e, 0xdb, 0xa1, 0x47, 0x41, 0xd7, 0xa7, 0x24, 0x8c, 0x0e, 0x7b,
	0x17, 0x6c, 0x88, 0x5d, 0x63, 0x60, 0x26, 0x39, 0x0f, 0xd8, 0x9a, 0xe7, 0xb3, 0xb4, 0xa4, 0xc2,
	0x6e, 0xb8, 0x84, 0x1a, 0xf0, 0x74, 0x90, 0x4d, 0x44, 0x87, 0xbd, 0x1f, 0x69, 0x3b, 0x3e, 0x1f,
	0xa1, 0x4d, 0xc9, 0x80, 0x5e, 0x45, 0xd8, 0xa8, 0x66, 0xe7, 0xf5, 0xd4, 0x08, 0x65, 0x1f, 0x46,
	0x59, 0x96, 0x1c, 0x67, 0x5e, 0x46, 0x68, 0x4b, 0x6f, 0x45, 0xd6, 0x11, 0x66, 0x36, 0x6e, 0xa3,
	0xca, 0xac, 0xfe, 0x04, 0x53, 0x83, 0x6a, 0x68, 0x49, 0x7f, 0x5c, 0xa0, 0x3f, 0x35, 0x89, 0x19,
	0xe2, 0xcf, 0xe2, 0x51, 0x50, 0x30, 0x57, 0xd8, 0xa1, 0xac, 0x44, 0xa0, 0x2e, 0x99, 0x15, 0x52,
	0x5c, 0xd6, 0x7d, 0x3a, 0xdc, 0xac, 0x64, 0x00, 0x57, 0xa7, 0xc0, 0x70, 0x4f, 0x61, 0x52, 0x61,
	0x0a, 0xc8, 0x92, 0x3d, 0x51, 0xd9, 0xa9, 0xb8, 0xc0, 0x01, 0x99, 0x92, 0x4a, 0xbe, 0x9b, 0xcc,
	0x8c, 0x72, 0x2a, 0xe5, 0x7d, 0x4d, 0x2a, 0x55, 0x31, 0x43, 0x3c, 0x80, 0x09, 0x49, 0x84, 0xaa,
	0x19, 0x6d, 0x81, 0x33, 0xa7, 0x91, 0x30, 0x88, 0x3a, 0x3c, 0xc9, 0x4c, 0xb2, 0x68, 0xb9, 0xaf,
	0xae, 0x08, 0x04, 0xdc, 0xa2, 0x51, 0xce, 0x40, 0xdb, 0xbc, 0xdb, 0x34, 0x3f, 0x12, 0x28, 0xdd,
	0x66, 0xfe, 0xb5, 0xc2, 0x7a, 0x3e, 0x4c, 0x8d, 0x59, 0x7a, 0x9f, 0xed, 0x3c, 0x89, 0xc7, 0x9b,
	0x3a, 0x2f, 0xfb, 0xb3, 0x82, 0xb5, 0x7e, 0x0b, 0xcd, 0xb4, 0xce, 0xb2, 0x2c, 0x5c, 0xd4, 0x99,
	0x91, 0xf6, 0x8b, 0x3a, 0x33, 0x10, 0x78, 0x5c, 0x42, 0x3e, 0x58, 0x66, 0xd6, 0x8c, 0x78, 0xcb,
	0x0e, 0xa5, 0xea, 0xd6, 0xda, 0x70, 0x45, 0x66, 0xef, 0xaf, 0xb2, 0x98, 0xb2, 0xcc, 0x14, 0x18,
	0xed, 0x68, 0xea, 0xd9, 0x4c, 0xc0, 0xad, 0xed, 0xdb, 0xaa, 0x33, 0x17, 0xde, 0xc2, 0xac, 0x96,
	0xe5, 0x22, 0x2c, 0x27, 0x4b, 0xcf, 0xa6, 0xad, 0x5a, 0xae, 0x8e, 0xd2, 0x72, 0x32, 0xa1, 0x95,
	0x5b, 0x4e, 0xc3, 0x8a, 0xe5, 0x96, 0xcb, 0xf0, 0x60, 0x5c, 0x42, 0xe7, 0xf0, 0xe9, 0x00, 0x37,
	0x45, 0xbc, 0x1b, 0xf4, 0xac, 0xd7, 0xb2, 0x0c, 0x52, 0x06, 0xf7, 0xa7, 0x4a, 0x9f, 0xb2, 0x44,
	0x12, 0x6d, 0x1b, 0x7a, 0x4d, 0x7b, 0xf9, 0x5b, 0xb7, 0x53, 0x66, 0xb6, 0xaf, 0x60, 0xc1, 0x48,
	0xdd, 0xd0, 0x7a, 0x16, 0x49, 0x6b, 0x71, 0x75, 0xa8, 0x5e, 0x7a, 0xd5, 0x5a, 0xea, 0x24, 0xae,
	0x3a, 0x8f, 0xf3, 0x89, 0xab, 0x36, 0x73, 0x2f, 0x76, 0x31, 0x03, 0x3c, 0x48, 0x5c, 0x8c, 0x9e,
	0x66, 0x59, 0x96, 0x41, 0x9a, 0xc2, 0x0d, 0x10, 0x19, 0x01, 0xa7, 0xe7, 0x49, 0x02, 0x4e, 0xc7,
	0x7e, 0x58, 0xae, 0x8d, 0xec, 0x42, 0xe4, 0x7a, 0x18, 0xe5, 0x11, 0xb9, 0xce, 0xa7, 0x29, 0xcc,
	0x98, 0x91, 0x06, 0x08, 0x63, 0xc3, 0xb8, 0x89, 0x30, 0x96, 0xcf, 0x27, 0xe4, 0xcf, 0x23, 0x9f,
	0xb2, 0xd5, 0xcf, 0xa3, 0x3a, 0xba, 0xab, 0x9f, 0x47, 0x79, 0x2c, 0x67, 0x40, 0xca, 0xb8, 0x8e,
	0x94, 0x8c, 0xea, 0x81, 0xb2, 0xf3, 0x3d, 0x2e, 0xa1, 0x63, 0x78, 0x2c, 0x8f, 0xe1, 0x68, 0x41,
	0xfe, 0xc2, 0x2b, 0xd3, 0xbc, 0x98, 0xe9, 0xb2, 0x53, 0x7b, 0x09, 0x11, 0x98, 0x37, 0x4c, 0xd2,
	0x68, 0x35, 0x1b, 0x85, 0x26, 0x81, 0x78, 0x88, 0x56, 0x6a, 0xc6, 0x30, 0xfa, 0xa2, 0xd5, 0x6c,
	0x8c, 0x66, 0x33, 0x79, 0xf3, 0x33, 0x2e, 0x1d, 0xee, 0xff, 0xf6, 0x79, 0xcb, 0xa5, 0xed, 0xee,
	0xbb, 0xdd, 0x46, 0xd0, 0xd9, 0xbb, 0x7e, 0xd1, 0xf0, 0xf7, 0xa8, 0xe3, 0x53, 0xc7, 0xdf, 0x69,
	0x06, 0x1d, 0xc7, 0xf5, 0x77, 0xa2, 0x46, 0x9b, 0x74, 0x9c, 0xbd, 0x56, 0x10, 0x0f, 0xe5, 0xc9,
	0x9f, 0x19, 0xde, 0x3d, 0x4c, 0xfe, 0xb4, 0xf0, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x63,
	0xb8, 0x32, 0xba, 0x0c, 0x19, 0x00, 0x00,
}
