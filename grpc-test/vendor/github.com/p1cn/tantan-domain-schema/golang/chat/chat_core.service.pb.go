// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat/chat_core.service.proto

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat/chat_core.service.proto
	chat/chat_moderation.service.proto
	chat/chatcounters.proto
	chat/conversation.proto
	chat/media.proto
	chat/message.proto
	chat/predefinedmessage.proto
	chat/question.proto
	chat/sticker.proto
	chat/teamaccount.service.proto

It has these top-level messages:
	InsertConversationParam
	InsertConversationRequest
	InsertConversationReply
	DeleteConversationParam
	DeleteConversationRequest
	DeleteConversationReply
	FindConversationRequest
	FindConversationReply
	InsertMessageRequest
	InsertMessageReply
	FindMessageByIdsRequest
	FindMessageByIdsReply
	FindMessageRequest
	FindMessageReply
	ChatCountersReply
	FindChatCountersByUserIdRequest
	FindChatCountersByUserIdParams
	ConversationsReply
	FindConversationsByOtherIdsRequest
	FindConversationsByOtherIdsParams
	FindConversationOtherUserIdsRequest
	FindConversationOtherUserIdsParams
	FindConversationOtherUserIdsReply
	FindQuestionByIdsRequest
	FindQuestionByIdsReply
	FindConversationForAdminRequest
	FindConversationForAdminReply
	FindConversationWithMessageRequest
	FindConversationWithMessageReply
	UpdateConversationRequest
	UpdateConversationReply
	SelectMessageForModerationRequest
	SelectMessageForModerationReply
	InsertMessageWithoutSendingEventRequest
	InsertMessageWithoutSendingEventReply
	UpdateMessageRecalledRequest
	UpdateMessageRecalledReply
	FindStickerByIdsRequest
	FindStickerByIdsReply
	GetStickerMediaRequest
	GetStickerMediaReply
	FindQuestionByIdsForModerationRequest
	FindQuestionByIdsForModerationReply
	FindQuestionForModerationRequest
	FindQuestionForModerationReply
	FindQuestionByKeywordRequest
	FindQuestionByKeywordReply
	InsertQuestionsRequest
	InsertQuestionsReply
	UpdateQuestionsRequest
	UpdateQuestionsReply
	InsertQuestionTranslationRequest
	InsertQuestionTranslationReply
	UpdateQuestionTranslationRequest
	UpdateQuestionTranslationReply
	InsertAnswersRequest
	InsertAnswersReply
	UpdateAnswersRequest
	UpdateAnswersReply
	DeleteAnswerRequest
	DeleteAnswerReply
	InsertAnswerTranslationRequest
	InsertAnswerTranslationReply
	UpdateAnswerTranslationRequest
	UpdateAnswerTranslationReply
	ChatCounters
	ChatCountersConversations
	ChatCountersMessages
	Conversation
	Media
	Video
	Audio
	Picture
	Message
	LocationMessage
	StickerMessage
	QuestionMessage
	AnswerMessage
	MomentCommentMessage
	MomentLikeMessage
	TextMessage
	VideoMessage
	AudioMessage
	PictureMessage
	PredefinedMessage
	Question
	Answer
	AnswerReply
	Sticker
	Package
	Shop
	Bundle
	Campaign
	SendChatMessageRequest
	SendChatMessageReply
	SendMessageForAdminRequest
	SendMessageForAdminReply
	GetPredefinedMessageByIdRequest
	GetPredefinedMessageByIdReply
	GetPredefinedMessageByKeyRequest
	GetPredefinedMessageByKeyReply
	GetPredefinedMessageTextByKeyRequest
	GetPredefinedMessageTextByKeyReply
	GetPredefinedMessageRequest
	GetPredefinedMessageReply
	InsertPredefinedMessageRequest
	InsertPredefinedMessageReply
	UpdatePredefinedMessageRequest
	UpdatePredefinedMessageReply
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// used for insert conversation
type InsertConversationParam struct {
	UserId      string             `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserId string             `protobuf:"bytes,2,opt,name=otherUserId" json:"otherUserId,omitempty"`
	Status      ConversationStatus `protobuf:"varint,3,opt,name=status,enum=chat.ConversationStatus" json:"status,omitempty"`
}

func (m *InsertConversationParam) Reset()                    { *m = InsertConversationParam{} }
func (m *InsertConversationParam) String() string            { return proto.CompactTextString(m) }
func (*InsertConversationParam) ProtoMessage()               {}
func (*InsertConversationParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InsertConversationParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *InsertConversationParam) GetOtherUserId() string {
	if m != nil {
		return m.OtherUserId
	}
	return ""
}

func (m *InsertConversationParam) GetStatus() ConversationStatus {
	if m != nil {
		return m.Status
	}
	return ConversationStatus_CONVERSATION_STATUS_DEFAULT
}

type InsertConversationRequest struct {
	Source string                     `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Params []*InsertConversationParam `protobuf:"bytes,2,rep,name=params" json:"params,omitempty"`
}

func (m *InsertConversationRequest) Reset()                    { *m = InsertConversationRequest{} }
func (m *InsertConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertConversationRequest) ProtoMessage()               {}
func (*InsertConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InsertConversationRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *InsertConversationRequest) GetParams() []*InsertConversationParam {
	if m != nil {
		return m.Params
	}
	return nil
}

type InsertConversationReply struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *InsertConversationReply) Reset()                    { *m = InsertConversationReply{} }
func (m *InsertConversationReply) String() string            { return proto.CompactTextString(m) }
func (*InsertConversationReply) ProtoMessage()               {}
func (*InsertConversationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InsertConversationReply) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type DeleteConversationParam struct {
	UserId      string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserId string `protobuf:"bytes,2,opt,name=otherUserId" json:"otherUserId,omitempty"`
}

func (m *DeleteConversationParam) Reset()                    { *m = DeleteConversationParam{} }
func (m *DeleteConversationParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteConversationParam) ProtoMessage()               {}
func (*DeleteConversationParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteConversationParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DeleteConversationParam) GetOtherUserId() string {
	if m != nil {
		return m.OtherUserId
	}
	return ""
}

// used for delete converssation
type DeleteConversationRequest struct {
	Source string                     `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Params []*DeleteConversationParam `protobuf:"bytes,2,rep,name=params" json:"params,omitempty"`
}

func (m *DeleteConversationRequest) Reset()                    { *m = DeleteConversationRequest{} }
func (m *DeleteConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteConversationRequest) ProtoMessage()               {}
func (*DeleteConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteConversationRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *DeleteConversationRequest) GetParams() []*DeleteConversationParam {
	if m != nil {
		return m.Params
	}
	return nil
}

type DeleteConversationReply struct {
}

func (m *DeleteConversationReply) Reset()                    { *m = DeleteConversationReply{} }
func (m *DeleteConversationReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteConversationReply) ProtoMessage()               {}
func (*DeleteConversationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// used for find conversation
type FindConversationRequest struct {
	UserId         string   `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserIds   []string `protobuf:"bytes,2,rep,name=otherUserIds" json:"otherUserIds,omitempty"`
	UntilTime      int64    `protobuf:"varint,3,opt,name=untilTime" json:"untilTime,omitempty"`
	SinceTime      int64    `protobuf:"varint,4,opt,name=sinceTime" json:"sinceTime,omitempty"`
	Offset         int64    `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Limit          int64    `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Filter         string   `protobuf:"bytes,7,opt,name=filter" json:"filter,omitempty"`
	IncludeDeleted bool     `protobuf:"varint,8,opt,name=includeDeleted" json:"includeDeleted,omitempty"`
	Sort           string   `protobuf:"bytes,9,opt,name=sort" json:"sort,omitempty"`
}

func (m *FindConversationRequest) Reset()                    { *m = FindConversationRequest{} }
func (m *FindConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*FindConversationRequest) ProtoMessage()               {}
func (*FindConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FindConversationRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindConversationRequest) GetOtherUserIds() []string {
	if m != nil {
		return m.OtherUserIds
	}
	return nil
}

func (m *FindConversationRequest) GetUntilTime() int64 {
	if m != nil {
		return m.UntilTime
	}
	return 0
}

func (m *FindConversationRequest) GetSinceTime() int64 {
	if m != nil {
		return m.SinceTime
	}
	return 0
}

func (m *FindConversationRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FindConversationRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FindConversationRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *FindConversationRequest) GetIncludeDeleted() bool {
	if m != nil {
		return m.IncludeDeleted
	}
	return false
}

func (m *FindConversationRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type FindConversationReply struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *FindConversationReply) Reset()                    { *m = FindConversationReply{} }
func (m *FindConversationReply) String() string            { return proto.CompactTextString(m) }
func (*FindConversationReply) ProtoMessage()               {}
func (*FindConversationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FindConversationReply) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

// used for insert message
type InsertMessageRequest struct {
	Source   string     `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Messages []*Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *InsertMessageRequest) Reset()                    { *m = InsertMessageRequest{} }
func (m *InsertMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertMessageRequest) ProtoMessage()               {}
func (*InsertMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InsertMessageRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *InsertMessageRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type InsertMessageReply struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *InsertMessageReply) Reset()                    { *m = InsertMessageReply{} }
func (m *InsertMessageReply) String() string            { return proto.CompactTextString(m) }
func (*InsertMessageReply) ProtoMessage()               {}
func (*InsertMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InsertMessageReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// used for find message  by ids
type FindMessageByIdsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *FindMessageByIdsRequest) Reset()                    { *m = FindMessageByIdsRequest{} }
func (m *FindMessageByIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindMessageByIdsRequest) ProtoMessage()               {}
func (*FindMessageByIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FindMessageByIdsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type FindMessageByIdsReply struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *FindMessageByIdsReply) Reset()                    { *m = FindMessageByIdsReply{} }
func (m *FindMessageByIdsReply) String() string            { return proto.CompactTextString(m) }
func (*FindMessageByIdsReply) ProtoMessage()               {}
func (*FindMessageByIdsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FindMessageByIdsReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// used for find message
type FindMessageRequest struct {
	UserId         string   `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserIds   []string `protobuf:"bytes,2,rep,name=otherUserIds" json:"otherUserIds,omitempty"`
	SinceId        string   `protobuf:"bytes,3,opt,name=sinceId" json:"sinceId,omitempty"`
	UntilId        string   `protobuf:"bytes,4,opt,name=untilId" json:"untilId,omitempty"`
	Offset         int64    `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Limit          int64    `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Filter         string   `protobuf:"bytes,7,opt,name=filter" json:"filter,omitempty"`
	IncludeDeleted bool     `protobuf:"varint,8,opt,name=includeDeleted" json:"includeDeleted,omitempty"`
	Sort           string   `protobuf:"bytes,9,opt,name=sort" json:"sort,omitempty"`
}

func (m *FindMessageRequest) Reset()                    { *m = FindMessageRequest{} }
func (m *FindMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*FindMessageRequest) ProtoMessage()               {}
func (*FindMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FindMessageRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindMessageRequest) GetOtherUserIds() []string {
	if m != nil {
		return m.OtherUserIds
	}
	return nil
}

func (m *FindMessageRequest) GetSinceId() string {
	if m != nil {
		return m.SinceId
	}
	return ""
}

func (m *FindMessageRequest) GetUntilId() string {
	if m != nil {
		return m.UntilId
	}
	return ""
}

func (m *FindMessageRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FindMessageRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FindMessageRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *FindMessageRequest) GetIncludeDeleted() bool {
	if m != nil {
		return m.IncludeDeleted
	}
	return false
}

func (m *FindMessageRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type FindMessageReply struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *FindMessageReply) Reset()                    { *m = FindMessageReply{} }
func (m *FindMessageReply) String() string            { return proto.CompactTextString(m) }
func (*FindMessageReply) ProtoMessage()               {}
func (*FindMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FindMessageReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// chat counters
type ChatCountersReply struct {
	ChatCounters []*ChatCounters `protobuf:"bytes,1,rep,name=chatCounters" json:"chatCounters,omitempty"`
}

func (m *ChatCountersReply) Reset()                    { *m = ChatCountersReply{} }
func (m *ChatCountersReply) String() string            { return proto.CompactTextString(m) }
func (*ChatCountersReply) ProtoMessage()               {}
func (*ChatCountersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ChatCountersReply) GetChatCounters() []*ChatCounters {
	if m != nil {
		return m.ChatCounters
	}
	return nil
}

type FindChatCountersByUserIdRequest struct {
	Params *FindChatCountersByUserIdParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindChatCountersByUserIdRequest) Reset()         { *m = FindChatCountersByUserIdRequest{} }
func (m *FindChatCountersByUserIdRequest) String() string { return proto.CompactTextString(m) }
func (*FindChatCountersByUserIdRequest) ProtoMessage()    {}
func (*FindChatCountersByUserIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15}
}

func (m *FindChatCountersByUserIdRequest) GetParams() *FindChatCountersByUserIdParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindChatCountersByUserIdParams struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *FindChatCountersByUserIdParams) Reset()                    { *m = FindChatCountersByUserIdParams{} }
func (m *FindChatCountersByUserIdParams) String() string            { return proto.CompactTextString(m) }
func (*FindChatCountersByUserIdParams) ProtoMessage()               {}
func (*FindChatCountersByUserIdParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FindChatCountersByUserIdParams) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// conversations
type ConversationsReply struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *ConversationsReply) Reset()                    { *m = ConversationsReply{} }
func (m *ConversationsReply) String() string            { return proto.CompactTextString(m) }
func (*ConversationsReply) ProtoMessage()               {}
func (*ConversationsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ConversationsReply) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type FindConversationsByOtherIdsRequest struct {
	Params *FindConversationsByOtherIdsParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindConversationsByOtherIdsRequest) Reset()         { *m = FindConversationsByOtherIdsRequest{} }
func (m *FindConversationsByOtherIdsRequest) String() string { return proto.CompactTextString(m) }
func (*FindConversationsByOtherIdsRequest) ProtoMessage()    {}
func (*FindConversationsByOtherIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *FindConversationsByOtherIdsRequest) GetParams() *FindConversationsByOtherIdsParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindConversationsByOtherIdsParams struct {
	UserId   string   `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherIds []string `protobuf:"bytes,2,rep,name=otherIds" json:"otherIds,omitempty"`
}

func (m *FindConversationsByOtherIdsParams) Reset()         { *m = FindConversationsByOtherIdsParams{} }
func (m *FindConversationsByOtherIdsParams) String() string { return proto.CompactTextString(m) }
func (*FindConversationsByOtherIdsParams) ProtoMessage()    {}
func (*FindConversationsByOtherIdsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *FindConversationsByOtherIdsParams) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindConversationsByOtherIdsParams) GetOtherIds() []string {
	if m != nil {
		return m.OtherIds
	}
	return nil
}

type FindConversationOtherUserIdsRequest struct {
	Params *FindConversationOtherUserIdsParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindConversationOtherUserIdsRequest) Reset()         { *m = FindConversationOtherUserIdsRequest{} }
func (m *FindConversationOtherUserIdsRequest) String() string { return proto.CompactTextString(m) }
func (*FindConversationOtherUserIdsRequest) ProtoMessage()    {}
func (*FindConversationOtherUserIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *FindConversationOtherUserIdsRequest) GetParams() *FindConversationOtherUserIdsParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindConversationOtherUserIdsParams struct {
	UserId string               `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Status []ConversationStatus `protobuf:"varint,2,rep,packed,name=status,enum=chat.ConversationStatus" json:"status,omitempty"`
}

func (m *FindConversationOtherUserIdsParams) Reset()         { *m = FindConversationOtherUserIdsParams{} }
func (m *FindConversationOtherUserIdsParams) String() string { return proto.CompactTextString(m) }
func (*FindConversationOtherUserIdsParams) ProtoMessage()    {}
func (*FindConversationOtherUserIdsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *FindConversationOtherUserIdsParams) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindConversationOtherUserIdsParams) GetStatus() []ConversationStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type FindConversationOtherUserIdsReply struct {
	UserIds []string `protobuf:"bytes,1,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *FindConversationOtherUserIdsReply) Reset()         { *m = FindConversationOtherUserIdsReply{} }
func (m *FindConversationOtherUserIdsReply) String() string { return proto.CompactTextString(m) }
func (*FindConversationOtherUserIdsReply) ProtoMessage()    {}
func (*FindConversationOtherUserIdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *FindConversationOtherUserIdsReply) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// question
type FindQuestionByIdsRequest struct {
	QuestionIds []string `protobuf:"bytes,1,rep,name=questionIds" json:"questionIds,omitempty"`
	Language    string   `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *FindQuestionByIdsRequest) Reset()                    { *m = FindQuestionByIdsRequest{} }
func (m *FindQuestionByIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindQuestionByIdsRequest) ProtoMessage()               {}
func (*FindQuestionByIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *FindQuestionByIdsRequest) GetQuestionIds() []string {
	if m != nil {
		return m.QuestionIds
	}
	return nil
}

func (m *FindQuestionByIdsRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type FindQuestionByIdsReply struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *FindQuestionByIdsReply) Reset()                    { *m = FindQuestionByIdsReply{} }
func (m *FindQuestionByIdsReply) String() string            { return proto.CompactTextString(m) }
func (*FindQuestionByIdsReply) ProtoMessage()               {}
func (*FindQuestionByIdsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *FindQuestionByIdsReply) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

func init() {
	proto.RegisterType((*InsertConversationParam)(nil), "chat.InsertConversationParam")
	proto.RegisterType((*InsertConversationRequest)(nil), "chat.InsertConversationRequest")
	proto.RegisterType((*InsertConversationReply)(nil), "chat.InsertConversationReply")
	proto.RegisterType((*DeleteConversationParam)(nil), "chat.DeleteConversationParam")
	proto.RegisterType((*DeleteConversationRequest)(nil), "chat.DeleteConversationRequest")
	proto.RegisterType((*DeleteConversationReply)(nil), "chat.DeleteConversationReply")
	proto.RegisterType((*FindConversationRequest)(nil), "chat.FindConversationRequest")
	proto.RegisterType((*FindConversationReply)(nil), "chat.FindConversationReply")
	proto.RegisterType((*InsertMessageRequest)(nil), "chat.InsertMessageRequest")
	proto.RegisterType((*InsertMessageReply)(nil), "chat.InsertMessageReply")
	proto.RegisterType((*FindMessageByIdsRequest)(nil), "chat.FindMessageByIdsRequest")
	proto.RegisterType((*FindMessageByIdsReply)(nil), "chat.FindMessageByIdsReply")
	proto.RegisterType((*FindMessageRequest)(nil), "chat.FindMessageRequest")
	proto.RegisterType((*FindMessageReply)(nil), "chat.FindMessageReply")
	proto.RegisterType((*ChatCountersReply)(nil), "chat.ChatCountersReply")
	proto.RegisterType((*FindChatCountersByUserIdRequest)(nil), "chat.FindChatCountersByUserIdRequest")
	proto.RegisterType((*FindChatCountersByUserIdParams)(nil), "chat.FindChatCountersByUserIdParams")
	proto.RegisterType((*ConversationsReply)(nil), "chat.ConversationsReply")
	proto.RegisterType((*FindConversationsByOtherIdsRequest)(nil), "chat.FindConversationsByOtherIdsRequest")
	proto.RegisterType((*FindConversationsByOtherIdsParams)(nil), "chat.FindConversationsByOtherIdsParams")
	proto.RegisterType((*FindConversationOtherUserIdsRequest)(nil), "chat.FindConversationOtherUserIdsRequest")
	proto.RegisterType((*FindConversationOtherUserIdsParams)(nil), "chat.FindConversationOtherUserIdsParams")
	proto.RegisterType((*FindConversationOtherUserIdsReply)(nil), "chat.FindConversationOtherUserIdsReply")
	proto.RegisterType((*FindQuestionByIdsRequest)(nil), "chat.FindQuestionByIdsRequest")
	proto.RegisterType((*FindQuestionByIdsReply)(nil), "chat.FindQuestionByIdsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatService service

type ChatServiceClient interface {
	// chat counters
	FindChatCountersByUserId(ctx context.Context, in *FindChatCountersByUserIdRequest, opts ...grpc.CallOption) (*ChatCountersReply, error)
	// conversations
	FindConversationsByOtherIds(ctx context.Context, in *FindConversationsByOtherIdsRequest, opts ...grpc.CallOption) (*ConversationsReply, error)
	FindConversationOtherUserIds(ctx context.Context, in *FindConversationOtherUserIdsRequest, opts ...grpc.CallOption) (*FindConversationOtherUserIdsReply, error)
	FindConversation(ctx context.Context, in *FindConversationRequest, opts ...grpc.CallOption) (*FindConversationReply, error)
	//
	InsertConversation(ctx context.Context, in *InsertConversationRequest, opts ...grpc.CallOption) (*InsertConversationReply, error)
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error)
	// used for message, insert, find message
	InsertMessage(ctx context.Context, in *InsertMessageRequest, opts ...grpc.CallOption) (*InsertMessageReply, error)
	FindMessageByIds(ctx context.Context, in *FindMessageByIdsRequest, opts ...grpc.CallOption) (*FindMessageByIdsReply, error)
	FindMessage(ctx context.Context, in *FindMessageRequest, opts ...grpc.CallOption) (*FindMessageReply, error)
	// question
	FindQuestionByIds(ctx context.Context, in *FindQuestionByIdsRequest, opts ...grpc.CallOption) (*FindQuestionByIdsReply, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) FindChatCountersByUserId(ctx context.Context, in *FindChatCountersByUserIdRequest, opts ...grpc.CallOption) (*ChatCountersReply, error) {
	out := new(ChatCountersReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/FindChatCountersByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindConversationsByOtherIds(ctx context.Context, in *FindConversationsByOtherIdsRequest, opts ...grpc.CallOption) (*ConversationsReply, error) {
	out := new(ConversationsReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/FindConversationsByOtherIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindConversationOtherUserIds(ctx context.Context, in *FindConversationOtherUserIdsRequest, opts ...grpc.CallOption) (*FindConversationOtherUserIdsReply, error) {
	out := new(FindConversationOtherUserIdsReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/FindConversationOtherUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindConversation(ctx context.Context, in *FindConversationRequest, opts ...grpc.CallOption) (*FindConversationReply, error) {
	out := new(FindConversationReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/FindConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) InsertConversation(ctx context.Context, in *InsertConversationRequest, opts ...grpc.CallOption) (*InsertConversationReply, error) {
	out := new(InsertConversationReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/InsertConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error) {
	out := new(DeleteConversationReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/DeleteConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) InsertMessage(ctx context.Context, in *InsertMessageRequest, opts ...grpc.CallOption) (*InsertMessageReply, error) {
	out := new(InsertMessageReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/InsertMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindMessageByIds(ctx context.Context, in *FindMessageByIdsRequest, opts ...grpc.CallOption) (*FindMessageByIdsReply, error) {
	out := new(FindMessageByIdsReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/FindMessageByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindMessage(ctx context.Context, in *FindMessageRequest, opts ...grpc.CallOption) (*FindMessageReply, error) {
	out := new(FindMessageReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/FindMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindQuestionByIds(ctx context.Context, in *FindQuestionByIdsRequest, opts ...grpc.CallOption) (*FindQuestionByIdsReply, error) {
	out := new(FindQuestionByIdsReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/FindQuestionByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	// chat counters
	FindChatCountersByUserId(context.Context, *FindChatCountersByUserIdRequest) (*ChatCountersReply, error)
	// conversations
	FindConversationsByOtherIds(context.Context, *FindConversationsByOtherIdsRequest) (*ConversationsReply, error)
	FindConversationOtherUserIds(context.Context, *FindConversationOtherUserIdsRequest) (*FindConversationOtherUserIdsReply, error)
	FindConversation(context.Context, *FindConversationRequest) (*FindConversationReply, error)
	//
	InsertConversation(context.Context, *InsertConversationRequest) (*InsertConversationReply, error)
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationReply, error)
	// used for message, insert, find message
	InsertMessage(context.Context, *InsertMessageRequest) (*InsertMessageReply, error)
	FindMessageByIds(context.Context, *FindMessageByIdsRequest) (*FindMessageByIdsReply, error)
	FindMessage(context.Context, *FindMessageRequest) (*FindMessageReply, error)
	// question
	FindQuestionByIds(context.Context, *FindQuestionByIdsRequest) (*FindQuestionByIdsReply, error)
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_FindChatCountersByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindChatCountersByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindChatCountersByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FindChatCountersByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindChatCountersByUserId(ctx, req.(*FindChatCountersByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindConversationsByOtherIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationsByOtherIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindConversationsByOtherIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FindConversationsByOtherIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindConversationsByOtherIds(ctx, req.(*FindConversationsByOtherIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindConversationOtherUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationOtherUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindConversationOtherUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FindConversationOtherUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindConversationOtherUserIds(ctx, req.(*FindConversationOtherUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FindConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindConversation(ctx, req.(*FindConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_InsertConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).InsertConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/InsertConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).InsertConversation(ctx, req.(*InsertConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_InsertMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).InsertMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/InsertMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).InsertMessage(ctx, req.(*InsertMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindMessageByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMessageByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindMessageByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FindMessageByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindMessageByIds(ctx, req.(*FindMessageByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FindMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindMessage(ctx, req.(*FindMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindQuestionByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQuestionByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindQuestionByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FindQuestionByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindQuestionByIds(ctx, req.(*FindQuestionByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindChatCountersByUserId",
			Handler:    _ChatService_FindChatCountersByUserId_Handler,
		},
		{
			MethodName: "FindConversationsByOtherIds",
			Handler:    _ChatService_FindConversationsByOtherIds_Handler,
		},
		{
			MethodName: "FindConversationOtherUserIds",
			Handler:    _ChatService_FindConversationOtherUserIds_Handler,
		},
		{
			MethodName: "FindConversation",
			Handler:    _ChatService_FindConversation_Handler,
		},
		{
			MethodName: "InsertConversation",
			Handler:    _ChatService_InsertConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _ChatService_DeleteConversation_Handler,
		},
		{
			MethodName: "InsertMessage",
			Handler:    _ChatService_InsertMessage_Handler,
		},
		{
			MethodName: "FindMessageByIds",
			Handler:    _ChatService_FindMessageByIds_Handler,
		},
		{
			MethodName: "FindMessage",
			Handler:    _ChatService_FindMessage_Handler,
		},
		{
			MethodName: "FindQuestionByIds",
			Handler:    _ChatService_FindQuestionByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat_core.service.proto",
}

func init() { proto.RegisterFile("chat/chat_core.service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x6d, 0x6f, 0xe3, 0x44,
	0x10, 0xbe, 0x24, 0xbd, 0x5c, 0x3c, 0xb9, 0x56, 0x77, 0xcb, 0xd1, 0xf8, 0x72, 0xc9, 0x5d, 0x30,
	0x2f, 0x97, 0x13, 0x34, 0x29, 0x41, 0xa0, 0x7e, 0xa0, 0x2a, 0xa4, 0xa8, 0x28, 0x42, 0xd0, 0xd6,
	0xe1, 0x5d, 0x48, 0x95, 0x6b, 0x6f, 0x13, 0xa3, 0xc4, 0x0e, 0xde, 0x75, 0xa5, 0xfc, 0x00, 0xf8,
	0x03, 0xfc, 0x5c, 0xbe, 0xa0, 0xdd, 0xf5, 0x3a, 0xeb, 0xb7, 0xa4, 0xa5, 0xfd, 0xc0, 0x97, 0x28,
	0xbb, 0xf3, 0xec, 0xb3, 0x33, 0xb3, 0xcf, 0xec, 0x8e, 0xa1, 0x65, 0x4f, 0x2d, 0xda, 0x67, 0x3f,
	0x17, 0xb6, 0x1f, 0xe0, 0x1e, 0xc1, 0xc1, 0xb5, 0x6b, 0xe3, 0xde, 0x22, 0xf0, 0xa9, 0x8f, 0xb6,
	0x98, 0xa1, 0xd9, 0x88, 0x31, 0xb6, 0x1f, 0x7a, 0x14, 0x07, 0x44, 0x98, 0xa5, 0xc1, 0xf7, 0xae,
	0x71, 0x40, 0x2c, 0xea, 0xfa, 0x5e, 0x64, 0x40, 0xdc, 0x30, 0xc7, 0x84, 0x58, 0x93, 0x88, 0xab,
	0xf9, 0x16, 0x9f, 0xfb, 0x23, 0xc4, 0x64, 0x05, 0x34, 0xfe, 0x2c, 0x41, 0x63, 0xe4, 0x11, 0x1c,
	0xd0, 0x63, 0x85, 0xe5, 0xcc, 0x0a, 0xac, 0x39, 0xda, 0x85, 0x6a, 0x48, 0x70, 0x30, 0x72, 0xf4,
	0x52, 0xa7, 0xd4, 0xd5, 0xcc, 0x68, 0x84, 0x3a, 0x50, 0xf7, 0xe9, 0x14, 0x07, 0x3f, 0x08, 0x63,
	0x99, 0x1b, 0xd5, 0x29, 0xb4, 0x0f, 0x55, 0x42, 0x2d, 0x1a, 0x12, 0xbd, 0xd2, 0x29, 0x75, 0x77,
	0x06, 0x7a, 0x8f, 0xed, 0xdd, 0x53, 0xb7, 0x18, 0x73, 0xbb, 0x19, 0xe1, 0x8c, 0xdf, 0xe1, 0x79,
	0xd6, 0x0d, 0x13, 0x73, 0x6f, 0x99, 0x23, 0xc4, 0x0f, 0x03, 0x1b, 0x4b, 0x47, 0xc4, 0x08, 0x7d,
	0x0a, 0xd5, 0x05, 0xf3, 0x94, 0xe8, 0xe5, 0x4e, 0xa5, 0x5b, 0x1f, 0xb4, 0xc5, 0x36, 0x05, 0xf1,
	0x98, 0x11, 0xd8, 0x18, 0xe7, 0x85, 0x6c, 0xe2, 0xc5, 0x6c, 0x89, 0x0e, 0x60, 0x5b, 0xcd, 0x26,
	0xd1, 0x4b, 0x9c, 0x18, 0x65, 0xfd, 0x37, 0x93, 0x40, 0x46, 0xfa, 0x15, 0x9e, 0x61, 0x8a, 0xef,
	0x31, 0x8f, 0x2c, 0x2b, 0x59, 0xd2, 0xff, 0x98, 0x95, 0x02, 0xef, 0xe2, 0xac, 0x3c, 0xcf, 0x0b,
	0x80, 0x67, 0xc5, 0xf8, 0xbb, 0x0c, 0x8d, 0x13, 0xd7, 0x73, 0x0a, 0xbc, 0xc8, 0x0d, 0xce, 0x80,
	0xc7, 0x4a, 0x24, 0xc2, 0x17, 0xcd, 0x4c, 0xcc, 0xa1, 0x16, 0x68, 0xa1, 0x47, 0xdd, 0xd9, 0xf7,
	0xee, 0x1c, 0x73, 0xa5, 0x54, 0xcc, 0xd5, 0x04, 0xb3, 0x12, 0xd7, 0xb3, 0x31, 0xb7, 0x6e, 0x09,
	0x6b, 0x3c, 0xc1, 0xf6, 0xf5, 0xaf, 0xae, 0x08, 0xa6, 0xfa, 0x43, 0x6e, 0x8a, 0x46, 0xe8, 0x19,
	0x3c, 0x9c, 0xb9, 0x73, 0x97, 0xea, 0x55, 0x3e, 0x2d, 0x06, 0x0c, 0x7d, 0xe5, 0xce, 0x28, 0x0e,
	0xf4, 0x47, 0xc2, 0x4b, 0x31, 0x42, 0x1f, 0xc0, 0x8e, 0xeb, 0xd9, 0xb3, 0xd0, 0xc1, 0x22, 0x76,
	0x47, 0xaf, 0x75, 0x4a, 0xdd, 0x9a, 0x99, 0x9a, 0x45, 0x08, 0xb6, 0x88, 0x1f, 0x50, 0x5d, 0xe3,
	0xab, 0xf9, 0x7f, 0xe3, 0x1c, 0xde, 0xce, 0x26, 0xe5, 0x6e, 0x22, 0xfa, 0x05, 0x9e, 0x09, 0x65,
	0x7e, 0x2b, 0x2a, 0x77, 0xd3, 0x51, 0xbf, 0x81, 0x5a, 0x54, 0xe3, 0xf2, 0xb0, 0xb7, 0xc5, 0x26,
	0x72, 0x7d, 0x6c, 0x36, 0x8e, 0x00, 0xa5, 0xa8, 0x99, 0xab, 0x2a, 0x41, 0x69, 0x3d, 0xc1, 0x87,
	0x42, 0x03, 0x91, 0x61, 0xb8, 0x1c, 0x39, 0x44, 0xba, 0xf7, 0x04, 0x2a, 0xae, 0x23, 0x08, 0x34,
	0x93, 0xfd, 0x35, 0x86, 0x22, 0x37, 0x49, 0xf0, 0x2d, 0x37, 0xfc, 0xab, 0x0c, 0x48, 0x21, 0xb9,
	0x0f, 0xc1, 0xe9, 0xf0, 0x88, 0x2b, 0x68, 0xe4, 0x70, 0xb9, 0x69, 0xa6, 0x1c, 0x32, 0x0b, 0x57,
	0xde, 0xc8, 0xe1, 0x52, 0xd3, 0x4c, 0x39, 0xfc, 0x1f, 0x08, 0xed, 0x10, 0x9e, 0x24, 0xf2, 0x70,
	0xcb, 0x3c, 0x7e, 0x03, 0x4f, 0x8f, 0xa7, 0x16, 0x3d, 0x8e, 0x9e, 0x0e, 0xb1, 0xfe, 0x33, 0x78,
	0x6c, 0x2b, 0x93, 0x29, 0x89, 0xaa, 0xf0, 0x04, 0xce, 0xb8, 0x80, 0x57, 0x5c, 0xf4, 0xca, 0xdc,
	0x70, 0x29, 0xd2, 0x2b, 0x0f, 0xe8, 0xf3, 0xf8, 0xfe, 0x61, 0x07, 0x54, 0x1f, 0xbc, 0x27, 0x48,
	0x8b, 0x96, 0xf1, 0x5b, 0x88, 0xc4, 0xd7, 0xd0, 0x01, 0xbc, 0x5c, 0x8f, 0x2c, 0x12, 0x80, 0xf1,
	0x1d, 0x20, 0xb5, 0xb6, 0xc8, 0x5d, 0x8b, 0x11, 0x83, 0x91, 0xae, 0x6f, 0x32, 0x5c, 0x9e, 0x32,
	0x3d, 0x29, 0xda, 0x3f, 0x4a, 0x45, 0xfb, 0x5a, 0x89, 0x36, 0x7f, 0x65, 0x2a, 0xe0, 0x9f, 0xe0,
	0x9d, 0x8d, 0xe0, 0x42, 0xd1, 0x37, 0xa1, 0xe6, 0x47, 0xc8, 0x48, 0xf0, 0xf1, 0xd8, 0x98, 0xc0,
	0xbb, 0x69, 0xe2, 0x53, 0xa5, 0x18, 0x64, 0x00, 0x5f, 0xa4, 0x02, 0xe8, 0xe6, 0x07, 0xa0, 0x2e,
	0x4d, 0x45, 0xe0, 0x65, 0x13, 0x95, 0x45, 0x17, 0x86, 0xb0, 0xea, 0x15, 0x58, 0x00, 0x37, 0xe9,
	0x15, 0x0e, 0xb3, 0x19, 0x4b, 0x06, 0xc6, 0xce, 0x9d, 0x15, 0x74, 0x74, 0x13, 0x88, 0x7b, 0x49,
	0x0e, 0x8d, 0x9f, 0x41, 0x67, 0xcb, 0xcf, 0xa3, 0x46, 0x28, 0x71, 0x93, 0x75, 0xa0, 0x2e, 0x1b,
	0xa4, 0xd5, 0x4a, 0x75, 0x8a, 0x65, 0x7c, 0x66, 0x79, 0x93, 0xd0, 0x9a, 0xe0, 0xe8, 0xc5, 0x8e,
	0xc7, 0xc6, 0x09, 0xec, 0xe6, 0x30, 0x33, 0x6f, 0x3e, 0x02, 0x4d, 0x92, 0x48, 0x05, 0xee, 0x88,
	0x38, 0x25, 0xd8, 0x5c, 0x01, 0x06, 0xff, 0x54, 0xa1, 0xce, 0x0a, 0x60, 0x2c, 0x7a, 0x41, 0xf4,
	0x9b, 0xf0, 0x38, 0xaf, 0x26, 0xd0, 0xfb, 0xeb, 0xab, 0x2b, 0x0a, 0xac, 0xd9, 0xc8, 0xa9, 0x6c,
	0xfe, 0xb6, 0x3f, 0x40, 0x36, 0xbc, 0x58, 0x23, 0x40, 0xd4, 0xdd, 0x28, 0x68, 0xb9, 0x47, 0xce,
	0xc9, 0xc5, 0x9b, 0x50, 0x68, 0xad, 0x3b, 0x33, 0xf4, 0x66, 0xb3, 0xea, 0xe4, 0x36, 0xaf, 0x6f,
	0x02, 0x15, 0xbb, 0x9e, 0x89, 0x9b, 0x53, 0x85, 0xa1, 0x76, 0xfe, 0x72, 0xc9, 0xfe, 0xa2, 0xc8,
	0x2c, 0x18, 0x7f, 0x94, 0xcf, 0x68, 0x82, 0xf3, 0x55, 0x51, 0xe3, 0x29, 0x59, 0xdb, 0xc5, 0x80,
	0x98, 0x37, 0xdb, 0x7d, 0x49, 0xde, 0xc2, 0x1e, 0xb0, 0xd9, 0x2e, 0x06, 0x08, 0xde, 0xaf, 0x61,
	0x3b, 0xf1, 0xec, 0xa3, 0xa6, 0xea, 0x49, 0xf2, 0x69, 0x95, 0x07, 0x98, 0xed, 0x13, 0x56, 0xa9,
	0x54, 0x5f, 0x74, 0x35, 0x95, 0x39, 0x6d, 0x81, 0x9a, 0xca, 0x4c, 0x23, 0x60, 0x3c, 0x40, 0x5f,
	0x42, 0x5d, 0x31, 0x21, 0x3d, 0x83, 0x96, 0x3c, 0xbb, 0x39, 0x16, 0x41, 0x31, 0x86, 0xa7, 0x99,
	0x82, 0x43, 0x2f, 0x57, 0xf0, 0xbc, 0x1a, 0x6f, 0xb6, 0x0a, 0xed, 0x9c, 0x74, 0x38, 0xf8, 0x75,
	0x7f, 0xe2, 0xd2, 0x69, 0x78, 0xd9, 0xb3, 0xfd, 0x79, 0x7f, 0xf1, 0xb1, 0xed, 0xf5, 0xa9, 0xe5,
	0x51, 0xcb, 0xdb, 0x73, 0xfc, 0xb9, 0xe5, 0x7a, 0x7b, 0xc4, 0x9e, 0xe2, 0xb9, 0xd5, 0x9f, 0xf8,
	0xac, 0xf0, 0xf9, 0x67, 0xd9, 0x65, 0x95, 0x7f, 0x4d, 0x7d, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x30, 0xee, 0x71, 0x48, 0xce, 0x0d, 0x00, 0x00,
}
