// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat/teamaccount.service.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SendChatMessageRequest struct {
	Source     string            `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	UserId     string            `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	MessageKey string            `protobuf:"bytes,3,opt,name=messageKey" json:"messageKey,omitempty"`
	Params     map[string]string `protobuf:"bytes,4,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SendChatMessageRequest) Reset()                    { *m = SendChatMessageRequest{} }
func (m *SendChatMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendChatMessageRequest) ProtoMessage()               {}
func (*SendChatMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *SendChatMessageRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SendChatMessageRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SendChatMessageRequest) GetMessageKey() string {
	if m != nil {
		return m.MessageKey
	}
	return ""
}

func (m *SendChatMessageRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type SendChatMessageReply struct {
	MessageId string `protobuf:"bytes,1,opt,name=messageId" json:"messageId,omitempty"`
}

func (m *SendChatMessageReply) Reset()                    { *m = SendChatMessageReply{} }
func (m *SendChatMessageReply) String() string            { return proto.CompactTextString(m) }
func (*SendChatMessageReply) ProtoMessage()               {}
func (*SendChatMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *SendChatMessageReply) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type SendMessageForAdminRequest struct {
	Source  string   `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=userIds" json:"userIds,omitempty"`
	Message *Message `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SendMessageForAdminRequest) Reset()                    { *m = SendMessageForAdminRequest{} }
func (m *SendMessageForAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMessageForAdminRequest) ProtoMessage()               {}
func (*SendMessageForAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *SendMessageForAdminRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SendMessageForAdminRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SendMessageForAdminRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type SendMessageForAdminReply struct {
	MessageId []string `protobuf:"bytes,1,rep,name=messageId" json:"messageId,omitempty"`
}

func (m *SendMessageForAdminReply) Reset()                    { *m = SendMessageForAdminReply{} }
func (m *SendMessageForAdminReply) String() string            { return proto.CompactTextString(m) }
func (*SendMessageForAdminReply) ProtoMessage()               {}
func (*SendMessageForAdminReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *SendMessageForAdminReply) GetMessageId() []string {
	if m != nil {
		return m.MessageId
	}
	return nil
}

//
type GetPredefinedMessageByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPredefinedMessageByIdRequest) Reset()                    { *m = GetPredefinedMessageByIdRequest{} }
func (m *GetPredefinedMessageByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPredefinedMessageByIdRequest) ProtoMessage()               {}
func (*GetPredefinedMessageByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *GetPredefinedMessageByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPredefinedMessageByIdReply struct {
	Message *PredefinedMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *GetPredefinedMessageByIdReply) Reset()                    { *m = GetPredefinedMessageByIdReply{} }
func (m *GetPredefinedMessageByIdReply) String() string            { return proto.CompactTextString(m) }
func (*GetPredefinedMessageByIdReply) ProtoMessage()               {}
func (*GetPredefinedMessageByIdReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *GetPredefinedMessageByIdReply) GetMessage() *PredefinedMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

//
type GetPredefinedMessageByKeyRequest struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *GetPredefinedMessageByKeyRequest) Reset()         { *m = GetPredefinedMessageByKeyRequest{} }
func (m *GetPredefinedMessageByKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetPredefinedMessageByKeyRequest) ProtoMessage()    {}
func (*GetPredefinedMessageByKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{6}
}

func (m *GetPredefinedMessageByKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetPredefinedMessageByKeyRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type GetPredefinedMessageByKeyReply struct {
	Message *PredefinedMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *GetPredefinedMessageByKeyReply) Reset()                    { *m = GetPredefinedMessageByKeyReply{} }
func (m *GetPredefinedMessageByKeyReply) String() string            { return proto.CompactTextString(m) }
func (*GetPredefinedMessageByKeyReply) ProtoMessage()               {}
func (*GetPredefinedMessageByKeyReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *GetPredefinedMessageByKeyReply) GetMessage() *PredefinedMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

//
type GetPredefinedMessageTextByKeyRequest struct {
	Key          string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Language     string            `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	Replacements map[string]string `protobuf:"bytes,3,rep,name=replacements" json:"replacements,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetPredefinedMessageTextByKeyRequest) Reset()         { *m = GetPredefinedMessageTextByKeyRequest{} }
func (m *GetPredefinedMessageTextByKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetPredefinedMessageTextByKeyRequest) ProtoMessage()    {}
func (*GetPredefinedMessageTextByKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{8}
}

func (m *GetPredefinedMessageTextByKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetPredefinedMessageTextByKeyRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *GetPredefinedMessageTextByKeyRequest) GetReplacements() map[string]string {
	if m != nil {
		return m.Replacements
	}
	return nil
}

type GetPredefinedMessageTextByKeyReply struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *GetPredefinedMessageTextByKeyReply) Reset()         { *m = GetPredefinedMessageTextByKeyReply{} }
func (m *GetPredefinedMessageTextByKeyReply) String() string { return proto.CompactTextString(m) }
func (*GetPredefinedMessageTextByKeyReply) ProtoMessage()    {}
func (*GetPredefinedMessageTextByKeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{9}
}

func (m *GetPredefinedMessageTextByKeyReply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

//
type GetPredefinedMessageRequest struct {
}

func (m *GetPredefinedMessageRequest) Reset()                    { *m = GetPredefinedMessageRequest{} }
func (m *GetPredefinedMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPredefinedMessageRequest) ProtoMessage()               {}
func (*GetPredefinedMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

type GetPredefinedMessageReply struct {
	Messages []*PredefinedMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *GetPredefinedMessageReply) Reset()                    { *m = GetPredefinedMessageReply{} }
func (m *GetPredefinedMessageReply) String() string            { return proto.CompactTextString(m) }
func (*GetPredefinedMessageReply) ProtoMessage()               {}
func (*GetPredefinedMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

func (m *GetPredefinedMessageReply) GetMessages() []*PredefinedMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

//
type InsertPredefinedMessageRequest struct {
	Message *PredefinedMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *InsertPredefinedMessageRequest) Reset()                    { *m = InsertPredefinedMessageRequest{} }
func (m *InsertPredefinedMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertPredefinedMessageRequest) ProtoMessage()               {}
func (*InsertPredefinedMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{12} }

func (m *InsertPredefinedMessageRequest) GetMessage() *PredefinedMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type InsertPredefinedMessageReply struct {
	Message *PredefinedMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *InsertPredefinedMessageReply) Reset()                    { *m = InsertPredefinedMessageReply{} }
func (m *InsertPredefinedMessageReply) String() string            { return proto.CompactTextString(m) }
func (*InsertPredefinedMessageReply) ProtoMessage()               {}
func (*InsertPredefinedMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{13} }

func (m *InsertPredefinedMessageReply) GetMessage() *PredefinedMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

//
type UpdatePredefinedMessageRequest struct {
	Message *PredefinedMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *UpdatePredefinedMessageRequest) Reset()                    { *m = UpdatePredefinedMessageRequest{} }
func (m *UpdatePredefinedMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePredefinedMessageRequest) ProtoMessage()               {}
func (*UpdatePredefinedMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{14} }

func (m *UpdatePredefinedMessageRequest) GetMessage() *PredefinedMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type UpdatePredefinedMessageReply struct {
	Message *PredefinedMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *UpdatePredefinedMessageReply) Reset()                    { *m = UpdatePredefinedMessageReply{} }
func (m *UpdatePredefinedMessageReply) String() string            { return proto.CompactTextString(m) }
func (*UpdatePredefinedMessageReply) ProtoMessage()               {}
func (*UpdatePredefinedMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{15} }

func (m *UpdatePredefinedMessageReply) GetMessage() *PredefinedMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*SendChatMessageRequest)(nil), "chat.SendChatMessageRequest")
	proto.RegisterType((*SendChatMessageReply)(nil), "chat.SendChatMessageReply")
	proto.RegisterType((*SendMessageForAdminRequest)(nil), "chat.SendMessageForAdminRequest")
	proto.RegisterType((*SendMessageForAdminReply)(nil), "chat.SendMessageForAdminReply")
	proto.RegisterType((*GetPredefinedMessageByIdRequest)(nil), "chat.GetPredefinedMessageByIdRequest")
	proto.RegisterType((*GetPredefinedMessageByIdReply)(nil), "chat.GetPredefinedMessageByIdReply")
	proto.RegisterType((*GetPredefinedMessageByKeyRequest)(nil), "chat.GetPredefinedMessageByKeyRequest")
	proto.RegisterType((*GetPredefinedMessageByKeyReply)(nil), "chat.GetPredefinedMessageByKeyReply")
	proto.RegisterType((*GetPredefinedMessageTextByKeyRequest)(nil), "chat.GetPredefinedMessageTextByKeyRequest")
	proto.RegisterType((*GetPredefinedMessageTextByKeyReply)(nil), "chat.GetPredefinedMessageTextByKeyReply")
	proto.RegisterType((*GetPredefinedMessageRequest)(nil), "chat.GetPredefinedMessageRequest")
	proto.RegisterType((*GetPredefinedMessageReply)(nil), "chat.GetPredefinedMessageReply")
	proto.RegisterType((*InsertPredefinedMessageRequest)(nil), "chat.InsertPredefinedMessageRequest")
	proto.RegisterType((*InsertPredefinedMessageReply)(nil), "chat.InsertPredefinedMessageReply")
	proto.RegisterType((*UpdatePredefinedMessageRequest)(nil), "chat.UpdatePredefinedMessageRequest")
	proto.RegisterType((*UpdatePredefinedMessageReply)(nil), "chat.UpdatePredefinedMessageReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TeamAccountSerivce service

type TeamAccountSerivceClient interface {
	SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageReply, error)
	SendMessageForAdmin(ctx context.Context, in *SendMessageForAdminRequest, opts ...grpc.CallOption) (*SendMessageForAdminReply, error)
	InsertPredefinedMessage(ctx context.Context, in *InsertPredefinedMessageRequest, opts ...grpc.CallOption) (*InsertPredefinedMessageReply, error)
	UpdatePredefinedMessage(ctx context.Context, in *UpdatePredefinedMessageRequest, opts ...grpc.CallOption) (*UpdatePredefinedMessageReply, error)
	GetPredefinedMessageById(ctx context.Context, in *GetPredefinedMessageByIdRequest, opts ...grpc.CallOption) (*GetPredefinedMessageByIdReply, error)
	GetPredefinedMessageByKey(ctx context.Context, in *GetPredefinedMessageByKeyRequest, opts ...grpc.CallOption) (*GetPredefinedMessageByKeyReply, error)
	GetPredefinedMessageTextByKey(ctx context.Context, in *GetPredefinedMessageTextByKeyRequest, opts ...grpc.CallOption) (*GetPredefinedMessageTextByKeyReply, error)
	GetPredefinedMessage(ctx context.Context, in *GetPredefinedMessageRequest, opts ...grpc.CallOption) (*GetPredefinedMessageReply, error)
}

type teamAccountSerivceClient struct {
	cc *grpc.ClientConn
}

func NewTeamAccountSerivceClient(cc *grpc.ClientConn) TeamAccountSerivceClient {
	return &teamAccountSerivceClient{cc}
}

func (c *teamAccountSerivceClient) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageReply, error) {
	out := new(SendChatMessageReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/SendChatMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamAccountSerivceClient) SendMessageForAdmin(ctx context.Context, in *SendMessageForAdminRequest, opts ...grpc.CallOption) (*SendMessageForAdminReply, error) {
	out := new(SendMessageForAdminReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/SendMessageForAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamAccountSerivceClient) InsertPredefinedMessage(ctx context.Context, in *InsertPredefinedMessageRequest, opts ...grpc.CallOption) (*InsertPredefinedMessageReply, error) {
	out := new(InsertPredefinedMessageReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/InsertPredefinedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamAccountSerivceClient) UpdatePredefinedMessage(ctx context.Context, in *UpdatePredefinedMessageRequest, opts ...grpc.CallOption) (*UpdatePredefinedMessageReply, error) {
	out := new(UpdatePredefinedMessageReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/UpdatePredefinedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamAccountSerivceClient) GetPredefinedMessageById(ctx context.Context, in *GetPredefinedMessageByIdRequest, opts ...grpc.CallOption) (*GetPredefinedMessageByIdReply, error) {
	out := new(GetPredefinedMessageByIdReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/GetPredefinedMessageById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamAccountSerivceClient) GetPredefinedMessageByKey(ctx context.Context, in *GetPredefinedMessageByKeyRequest, opts ...grpc.CallOption) (*GetPredefinedMessageByKeyReply, error) {
	out := new(GetPredefinedMessageByKeyReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/GetPredefinedMessageByKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamAccountSerivceClient) GetPredefinedMessageTextByKey(ctx context.Context, in *GetPredefinedMessageTextByKeyRequest, opts ...grpc.CallOption) (*GetPredefinedMessageTextByKeyReply, error) {
	out := new(GetPredefinedMessageTextByKeyReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/GetPredefinedMessageTextByKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamAccountSerivceClient) GetPredefinedMessage(ctx context.Context, in *GetPredefinedMessageRequest, opts ...grpc.CallOption) (*GetPredefinedMessageReply, error) {
	out := new(GetPredefinedMessageReply)
	err := grpc.Invoke(ctx, "/chat.TeamAccountSerivce/GetPredefinedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TeamAccountSerivce service

type TeamAccountSerivceServer interface {
	SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageReply, error)
	SendMessageForAdmin(context.Context, *SendMessageForAdminRequest) (*SendMessageForAdminReply, error)
	InsertPredefinedMessage(context.Context, *InsertPredefinedMessageRequest) (*InsertPredefinedMessageReply, error)
	UpdatePredefinedMessage(context.Context, *UpdatePredefinedMessageRequest) (*UpdatePredefinedMessageReply, error)
	GetPredefinedMessageById(context.Context, *GetPredefinedMessageByIdRequest) (*GetPredefinedMessageByIdReply, error)
	GetPredefinedMessageByKey(context.Context, *GetPredefinedMessageByKeyRequest) (*GetPredefinedMessageByKeyReply, error)
	GetPredefinedMessageTextByKey(context.Context, *GetPredefinedMessageTextByKeyRequest) (*GetPredefinedMessageTextByKeyReply, error)
	GetPredefinedMessage(context.Context, *GetPredefinedMessageRequest) (*GetPredefinedMessageReply, error)
}

func RegisterTeamAccountSerivceServer(s *grpc.Server, srv TeamAccountSerivceServer) {
	s.RegisterService(&_TeamAccountSerivce_serviceDesc, srv)
}

func _TeamAccountSerivce_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/SendChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).SendChatMessage(ctx, req.(*SendChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamAccountSerivce_SendMessageForAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageForAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).SendMessageForAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/SendMessageForAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).SendMessageForAdmin(ctx, req.(*SendMessageForAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamAccountSerivce_InsertPredefinedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertPredefinedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).InsertPredefinedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/InsertPredefinedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).InsertPredefinedMessage(ctx, req.(*InsertPredefinedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamAccountSerivce_UpdatePredefinedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredefinedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).UpdatePredefinedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/UpdatePredefinedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).UpdatePredefinedMessage(ctx, req.(*UpdatePredefinedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamAccountSerivce_GetPredefinedMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredefinedMessageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/GetPredefinedMessageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessageById(ctx, req.(*GetPredefinedMessageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamAccountSerivce_GetPredefinedMessageByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredefinedMessageByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessageByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/GetPredefinedMessageByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessageByKey(ctx, req.(*GetPredefinedMessageByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamAccountSerivce_GetPredefinedMessageTextByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredefinedMessageTextByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessageTextByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/GetPredefinedMessageTextByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessageTextByKey(ctx, req.(*GetPredefinedMessageTextByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamAccountSerivce_GetPredefinedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredefinedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.TeamAccountSerivce/GetPredefinedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamAccountSerivceServer).GetPredefinedMessage(ctx, req.(*GetPredefinedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamAccountSerivce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.TeamAccountSerivce",
	HandlerType: (*TeamAccountSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendChatMessage",
			Handler:    _TeamAccountSerivce_SendChatMessage_Handler,
		},
		{
			MethodName: "SendMessageForAdmin",
			Handler:    _TeamAccountSerivce_SendMessageForAdmin_Handler,
		},
		{
			MethodName: "InsertPredefinedMessage",
			Handler:    _TeamAccountSerivce_InsertPredefinedMessage_Handler,
		},
		{
			MethodName: "UpdatePredefinedMessage",
			Handler:    _TeamAccountSerivce_UpdatePredefinedMessage_Handler,
		},
		{
			MethodName: "GetPredefinedMessageById",
			Handler:    _TeamAccountSerivce_GetPredefinedMessageById_Handler,
		},
		{
			MethodName: "GetPredefinedMessageByKey",
			Handler:    _TeamAccountSerivce_GetPredefinedMessageByKey_Handler,
		},
		{
			MethodName: "GetPredefinedMessageTextByKey",
			Handler:    _TeamAccountSerivce_GetPredefinedMessageTextByKey_Handler,
		},
		{
			MethodName: "GetPredefinedMessage",
			Handler:    _TeamAccountSerivce_GetPredefinedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/teamaccount.service.proto",
}

func init() { proto.RegisterFile("chat/teamaccount.service.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x6d, 0x92, 0x92, 0xb6, 0x53, 0x3e, 0x97, 0xaa, 0x35, 0x4b, 0x9a, 0x06, 0x53, 0x20, 0x42,
	0xaa, 0x43, 0x53, 0x0e, 0x05, 0x21, 0x41, 0x8b, 0x00, 0x45, 0x55, 0xa5, 0x90, 0x94, 0x03, 0x88,
	0x03, 0x5b, 0x7b, 0x48, 0xac, 0xc6, 0x1f, 0xd8, 0xeb, 0xb6, 0xfe, 0x6b, 0xfc, 0x1f, 0x7e, 0x03,
	0x57, 0x64, 0xef, 0x3a, 0x49, 0x89, 0xed, 0x84, 0x88, 0x5b, 0x76, 0xe7, 0xcd, 0x7b, 0xcf, 0x33,
	0xbb, 0xb3, 0x81, 0xaa, 0xde, 0x67, 0xbc, 0xc1, 0x91, 0x59, 0x4c, 0xd7, 0x9d, 0xc0, 0xe6, 0x9a,
	0x8f, 0xde, 0xb9, 0xa9, 0xa3, 0xe6, 0x7a, 0x0e, 0x77, 0xc8, 0x62, 0x14, 0xa7, 0x95, 0x18, 0xe5,
	0x7a, 0x68, 0xe0, 0x77, 0xd3, 0x46, 0xc3, 0x42, 0xdf, 0x67, 0x3d, 0x89, 0xa1, 0x24, 0x8e, 0x5e,
	0xd9, 0x53, 0x7f, 0x15, 0x60, 0xbd, 0x8b, 0xb6, 0xf1, 0xb6, 0xcf, 0xf8, 0xb1, 0x88, 0x74, 0xf0,
	0x47, 0x80, 0x3e, 0x27, 0xeb, 0x50, 0xf6, 0x9d, 0xc0, 0xd3, 0x51, 0x29, 0xd4, 0x0a, 0xf5, 0x95,
	0x8e, 0x5c, 0x45, 0xfb, 0x81, 0x8f, 0x5e, 0xcb, 0x50, 0x8a, 0x62, 0x5f, 0xac, 0x48, 0x15, 0x40,
	0x72, 0x1f, 0x61, 0xa8, 0x94, 0xe2, 0xd8, 0xd8, 0x0e, 0x79, 0x03, 0x65, 0x97, 0x79, 0xcc, 0xf2,
	0x95, 0xc5, 0x5a, 0xa9, 0xbe, 0xda, 0xac, 0x6b, 0x91, 0x1f, 0x2d, 0x5d, 0x5d, 0x6b, 0xc7, 0xd0,
	0x77, 0x36, 0xf7, 0xc2, 0x8e, 0xcc, 0xa3, 0x2f, 0x60, 0x75, 0x6c, 0x9b, 0xdc, 0x86, 0xd2, 0x19,
	0x86, 0xd2, 0x5d, 0xf4, 0x93, 0xac, 0xc1, 0xb5, 0x73, 0x36, 0x08, 0x50, 0x3a, 0x13, 0x8b, 0x97,
	0xc5, 0xfd, 0x82, 0xfa, 0x1c, 0xd6, 0x26, 0x84, 0xdc, 0x41, 0x48, 0x2a, 0xb0, 0x22, 0x2d, 0xb6,
	0x0c, 0xc9, 0x34, 0xda, 0x50, 0x2f, 0x80, 0x46, 0x59, 0x32, 0xe3, 0xbd, 0xe3, 0x1d, 0x18, 0x96,
	0x69, 0x4f, 0x2b, 0x90, 0x02, 0x4b, 0xa2, 0x24, 0xbe, 0x52, 0xac, 0x95, 0xea, 0x2b, 0x9d, 0x64,
	0x49, 0x9e, 0xc0, 0x92, 0x24, 0x8f, 0xeb, 0xb3, 0xda, 0xbc, 0x21, 0x6a, 0x90, 0x58, 0x4a, 0xa2,
	0xea, 0x3e, 0x28, 0xa9, 0xc2, 0x29, 0x96, 0x4b, 0x57, 0x2d, 0xef, 0xc2, 0xd6, 0x07, 0xe4, 0xed,
	0xe1, 0x11, 0x90, 0x14, 0x87, 0x61, 0xcb, 0x48, 0x7c, 0xdf, 0x84, 0xa2, 0x99, 0x7c, 0x6c, 0xd1,
	0x34, 0xd4, 0x0e, 0x6c, 0x66, 0xa7, 0x44, 0x8a, 0xbb, 0x23, 0xdb, 0x85, 0xd8, 0xf6, 0x86, 0xb0,
	0x3d, 0x91, 0x32, 0xfa, 0x80, 0x36, 0xd4, 0xd2, 0x39, 0x8f, 0x30, 0x4c, 0x7c, 0x4c, 0xf6, 0x8f,
	0xc2, 0xf2, 0x80, 0xd9, 0xbd, 0x20, 0x52, 0x12, 0x2d, 0x1c, 0xae, 0xd5, 0x2e, 0x54, 0x73, 0x18,
	0xe7, 0xb4, 0xf9, 0xbb, 0x00, 0xdb, 0x69, 0xac, 0x27, 0x78, 0xc9, 0xe7, 0xf7, 0x4a, 0xbe, 0xc1,
	0x75, 0x0f, 0xdd, 0x01, 0xd3, 0xd1, 0x42, 0x9b, 0xfb, 0x4a, 0x29, 0x3e, 0xf0, 0xaf, 0x84, 0x9d,
	0x59, 0xf4, 0xb4, 0xce, 0x58, 0xba, 0xb8, 0x04, 0x57, 0x18, 0xe9, 0x6b, 0xb8, 0x33, 0x01, 0xf9,
	0xa7, 0x0b, 0xb1, 0x0f, 0xea, 0x14, 0x23, 0x51, 0x49, 0x09, 0x2c, 0x72, 0xbc, 0xe4, 0x92, 0x32,
	0xfe, 0xad, 0x6e, 0xc2, 0xfd, 0xb4, 0x4c, 0xe9, 0x5c, 0x6d, 0xc3, 0xbd, 0xf4, 0x70, 0xc4, 0xb7,
	0x07, 0xcb, 0xb2, 0xf4, 0x7e, 0x7c, 0x74, 0x73, 0x7a, 0x34, 0x04, 0x46, 0x9d, 0x6f, 0xd9, 0x3e,
	0x7a, 0x99, 0x9a, 0xf3, 0x74, 0xfe, 0x23, 0x54, 0x32, 0x49, 0xe7, 0x3c, 0x4c, 0x5d, 0xa8, 0x7e,
	0x72, 0x0d, 0xc6, 0xf1, 0x3f, 0xfb, 0xcc, 0x24, 0x9d, 0xcf, 0x67, 0xf3, 0x67, 0x19, 0xc8, 0x09,
	0x32, 0xeb, 0x40, 0xbc, 0x24, 0x5d, 0xf4, 0xcc, 0x73, 0x1d, 0xc9, 0x31, 0xdc, 0xfa, 0x6b, 0x44,
	0x92, 0x4a, 0xde, 0x88, 0xa6, 0x34, 0x23, 0xea, 0x0e, 0x42, 0x75, 0x81, 0x7c, 0x86, 0xbb, 0x29,
	0x23, 0x8c, 0xd4, 0x46, 0x49, 0xe9, 0x63, 0x95, 0x56, 0x73, 0x10, 0x82, 0x1a, 0x61, 0x23, 0xa3,
	0x77, 0x64, 0x5b, 0x24, 0xe7, 0x9f, 0x17, 0xaa, 0x4e, 0x41, 0x0d, 0x65, 0x32, 0x4a, 0x9f, 0xc8,
	0xe4, 0xb7, 0x3b, 0x91, 0xc9, 0xeb, 0x9f, 0xba, 0x40, 0xfa, 0xa0, 0x64, 0x8d, 0x5f, 0xf2, 0x28,
	0x7b, 0x64, 0x8c, 0x4d, 0x74, 0xfa, 0x70, 0x1a, 0x4c, 0x28, 0x9d, 0xa5, 0x5f, 0xcd, 0xf8, 0xbe,
	0x93, 0xc7, 0x79, 0x1c, 0xa3, 0xc9, 0x44, 0xb7, 0xa7, 0xe2, 0x84, 0xd8, 0x45, 0xfa, 0xab, 0x32,
	0x1c, 0x30, 0xe4, 0xe9, 0xec, 0xe3, 0x90, 0xd6, 0x67, 0xc2, 0x0a, 0xe1, 0xaf, 0xb0, 0x96, 0x86,
	0x23, 0x0f, 0xb2, 0x39, 0x12, 0x99, 0xad, 0x3c, 0x48, 0xcc, 0x7e, 0xd8, 0xfc, 0xf2, 0xac, 0x67,
	0xf2, 0x7e, 0x70, 0xaa, 0xe9, 0x8e, 0xd5, 0x70, 0x77, 0x75, 0xbb, 0xc1, 0x99, 0xcd, 0x99, 0xbd,
	0x63, 0x38, 0x16, 0x33, 0xed, 0x1d, 0x5f, 0xef, 0xa3, 0xc5, 0x1a, 0x3d, 0x27, 0x7a, 0x0d, 0x1a,
	0x11, 0xdf, 0x69, 0x39, 0xfe, 0xaf, 0xb5, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x39, 0x99,
	0xa0, 0xc5, 0x09, 0x00, 0x00,
}
