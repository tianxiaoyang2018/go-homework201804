// Code generated by protoc-gen-go. DO NOT EDIT.
// source: location/passby.proto

package location

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Passby struct {
	UserID      string  `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	OtherUserID string  `protobuf:"bytes,2,opt,name=otherUserID" json:"otherUserID,omitempty"`
	Longitude   float64 `protobuf:"fixed64,3,opt,name=longitude" json:"longitude,omitempty"`
	Latitude    float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	Count       int64   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Timestamp   int64   `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Passby) Reset()                    { *m = Passby{} }
func (m *Passby) String() string            { return proto.CompactTextString(m) }
func (*Passby) ProtoMessage()               {}
func (*Passby) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Passby) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Passby) GetOtherUserID() string {
	if m != nil {
		return m.OtherUserID
	}
	return ""
}

func (m *Passby) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Passby) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Passby) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Passby) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Passby)(nil), "location.Passby")
}

func init() { proto.RegisterFile("location/passby.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0xb1, 0x4a, 0x04, 0x31,
	0x10, 0xc6, 0x71, 0xe2, 0x79, 0xcb, 0x5d, 0xec, 0x82, 0xca, 0x22, 0x16, 0x8b, 0xd5, 0x36, 0x77,
	0x41, 0x14, 0x1f, 0x40, 0x6c, 0xec, 0x64, 0xc1, 0xc6, 0x6e, 0x36, 0x17, 0xb2, 0x81, 0x64, 0x26,
	0x6c, 0x26, 0x85, 0x6f, 0xe5, 0x23, 0x8a, 0x59, 0xcf, 0xb3, 0xfc, 0xfe, 0x3f, 0x18, 0x18, 0x79,
	0x15, 0xc8, 0x00, 0x7b, 0x42, 0x9d, 0x20, 0xe7, 0xf1, 0x73, 0x9f, 0x66, 0x62, 0x52, 0x9b, 0x63,
	0xbe, 0xfb, 0x12, 0xb2, 0x79, 0xab, 0xa4, 0xae, 0x65, 0x53, 0xb2, 0x9d, 0x5f, 0x5f, 0x5a, 0xd1,
	0x89, 0x7e, 0x3b, 0xfc, 0x2e, 0xd5, 0xc9, 0x0b, 0xe2, 0xc9, 0xce, 0xef, 0x0b, 0x9e, 0x55, 0xfc,
	0x9f, 0xd4, 0xad, 0xdc, 0x06, 0x42, 0xe7, 0xb9, 0x1c, 0x6c, 0xbb, 0xea, 0x44, 0x2f, 0x86, 0x53,
	0x50, 0x37, 0x72, 0x13, 0x80, 0x17, 0x3c, 0xaf, 0xf8, 0xb7, 0xd5, 0xa5, 0x5c, 0x1b, 0x2a, 0xc8,
	0xed, 0xba, 0x13, 0xfd, 0x6a, 0x58, 0xc6, 0xcf, 0x3d, 0xf6, 0xd1, 0x66, 0x86, 0x98, 0xda, 0xa6,
	0xca, 0x29, 0x3c, 0x3f, 0x7d, 0x3c, 0x3a, 0xcf, 0x53, 0x19, 0xf7, 0x86, 0xa2, 0x4e, 0xf7, 0x06,
	0x35, 0x03, 0x32, 0xe0, 0xee, 0x40, 0x11, 0x3c, 0xee, 0xb2, 0x99, 0x6c, 0x04, 0xed, 0x28, 0x00,
	0x3a, 0x7d, 0x7c, 0x75, 0x6c, 0xea, 0xef, 0x0f, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x15,
	0x03, 0x07, 0x14, 0x01, 0x00, 0x00,
}
