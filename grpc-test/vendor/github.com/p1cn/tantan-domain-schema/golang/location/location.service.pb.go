// Code generated by protoc-gen-go. DO NOT EDIT.
// source: location/location.service.proto

/*
Package location is a generated protocol buffer package.

It is generated from these files:
	location/location.service.proto
	location/passby.proto
	location/user-location.proto

It has these top-level messages:
	InsertUserLocationRequest
	UserLocationReply
	FindUsersPassbysRequest
	FindUserPassbysParams
	PassbysReply
	FindPassbysBetweenUsersRequest
	FindPassbysBetweenUsersParams
	Passby
	UserLocation
*/
package location

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// insert user location
type InsertUserLocationRequest struct {
	UserLocation *UserLocation `protobuf:"bytes,1,opt,name=userLocation" json:"userLocation,omitempty"`
}

func (m *InsertUserLocationRequest) Reset()                    { *m = InsertUserLocationRequest{} }
func (m *InsertUserLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertUserLocationRequest) ProtoMessage()               {}
func (*InsertUserLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InsertUserLocationRequest) GetUserLocation() *UserLocation {
	if m != nil {
		return m.UserLocation
	}
	return nil
}

// reply
type UserLocationReply struct {
	UserLocation []*UserLocation `protobuf:"bytes,1,rep,name=userLocation" json:"userLocation,omitempty"`
}

func (m *UserLocationReply) Reset()                    { *m = UserLocationReply{} }
func (m *UserLocationReply) String() string            { return proto.CompactTextString(m) }
func (*UserLocationReply) ProtoMessage()               {}
func (*UserLocationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserLocationReply) GetUserLocation() []*UserLocation {
	if m != nil {
		return m.UserLocation
	}
	return nil
}

// find user's passbys request
type FindUsersPassbysRequest struct {
	Params *FindUserPassbysParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindUsersPassbysRequest) Reset()                    { *m = FindUsersPassbysRequest{} }
func (m *FindUsersPassbysRequest) String() string            { return proto.CompactTextString(m) }
func (*FindUsersPassbysRequest) ProtoMessage()               {}
func (*FindUsersPassbysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FindUsersPassbysRequest) GetParams() *FindUserPassbysParams {
	if m != nil {
		return m.Params
	}
	return nil
}

// request params
type FindUserPassbysParams struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *FindUserPassbysParams) Reset()                    { *m = FindUserPassbysParams{} }
func (m *FindUserPassbysParams) String() string            { return proto.CompactTextString(m) }
func (*FindUserPassbysParams) ProtoMessage()               {}
func (*FindUserPassbysParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FindUserPassbysParams) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindUserPassbysParams) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FindUserPassbysParams) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// reply
type PassbysReply struct {
	Passbys []*Passby `protobuf:"bytes,1,rep,name=passbys" json:"passbys,omitempty"`
}

func (m *PassbysReply) Reset()                    { *m = PassbysReply{} }
func (m *PassbysReply) String() string            { return proto.CompactTextString(m) }
func (*PassbysReply) ProtoMessage()               {}
func (*PassbysReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PassbysReply) GetPassbys() []*Passby {
	if m != nil {
		return m.Passbys
	}
	return nil
}

// find passbys between users (userId and otherUserIds)
type FindPassbysBetweenUsersRequest struct {
	Params *FindPassbysBetweenUsersParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindPassbysBetweenUsersRequest) Reset()                    { *m = FindPassbysBetweenUsersRequest{} }
func (m *FindPassbysBetweenUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*FindPassbysBetweenUsersRequest) ProtoMessage()               {}
func (*FindPassbysBetweenUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FindPassbysBetweenUsersRequest) GetParams() *FindPassbysBetweenUsersParams {
	if m != nil {
		return m.Params
	}
	return nil
}

// request params
type FindPassbysBetweenUsersParams struct {
	UserId       string   `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserIds []string `protobuf:"bytes,2,rep,name=otherUserIds" json:"otherUserIds,omitempty"`
}

func (m *FindPassbysBetweenUsersParams) Reset()                    { *m = FindPassbysBetweenUsersParams{} }
func (m *FindPassbysBetweenUsersParams) String() string            { return proto.CompactTextString(m) }
func (*FindPassbysBetweenUsersParams) ProtoMessage()               {}
func (*FindPassbysBetweenUsersParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FindPassbysBetweenUsersParams) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindPassbysBetweenUsersParams) GetOtherUserIds() []string {
	if m != nil {
		return m.OtherUserIds
	}
	return nil
}

func init() {
	proto.RegisterType((*InsertUserLocationRequest)(nil), "location.InsertUserLocationRequest")
	proto.RegisterType((*UserLocationReply)(nil), "location.UserLocationReply")
	proto.RegisterType((*FindUsersPassbysRequest)(nil), "location.FindUsersPassbysRequest")
	proto.RegisterType((*FindUserPassbysParams)(nil), "location.FindUserPassbysParams")
	proto.RegisterType((*PassbysReply)(nil), "location.PassbysReply")
	proto.RegisterType((*FindPassbysBetweenUsersRequest)(nil), "location.FindPassbysBetweenUsersRequest")
	proto.RegisterType((*FindPassbysBetweenUsersParams)(nil), "location.FindPassbysBetweenUsersParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LocationService service

type LocationServiceClient interface {
	// insert user location
	InsertUserLocation(ctx context.Context, in *InsertUserLocationRequest, opts ...grpc.CallOption) (*UserLocationReply, error)
	// find user passbys (userId)
	FindUsersPassbys(ctx context.Context, in *FindUsersPassbysRequest, opts ...grpc.CallOption) (*PassbysReply, error)
	// find passbys between users (userId and otherUserId)
	FindPassbysBetweenUsers(ctx context.Context, in *FindPassbysBetweenUsersRequest, opts ...grpc.CallOption) (*PassbysReply, error)
}

type locationServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocationServiceClient(cc *grpc.ClientConn) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) InsertUserLocation(ctx context.Context, in *InsertUserLocationRequest, opts ...grpc.CallOption) (*UserLocationReply, error) {
	out := new(UserLocationReply)
	err := grpc.Invoke(ctx, "/location.LocationService/InsertUserLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) FindUsersPassbys(ctx context.Context, in *FindUsersPassbysRequest, opts ...grpc.CallOption) (*PassbysReply, error) {
	out := new(PassbysReply)
	err := grpc.Invoke(ctx, "/location.LocationService/FindUsersPassbys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) FindPassbysBetweenUsers(ctx context.Context, in *FindPassbysBetweenUsersRequest, opts ...grpc.CallOption) (*PassbysReply, error) {
	out := new(PassbysReply)
	err := grpc.Invoke(ctx, "/location.LocationService/FindPassbysBetweenUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LocationService service

type LocationServiceServer interface {
	// insert user location
	InsertUserLocation(context.Context, *InsertUserLocationRequest) (*UserLocationReply, error)
	// find user passbys (userId)
	FindUsersPassbys(context.Context, *FindUsersPassbysRequest) (*PassbysReply, error)
	// find passbys between users (userId and otherUserId)
	FindPassbysBetweenUsers(context.Context, *FindPassbysBetweenUsersRequest) (*PassbysReply, error)
}

func RegisterLocationServiceServer(s *grpc.Server, srv LocationServiceServer) {
	s.RegisterService(&_LocationService_serviceDesc, srv)
}

func _LocationService_InsertUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).InsertUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/InsertUserLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).InsertUserLocation(ctx, req.(*InsertUserLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_FindUsersPassbys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUsersPassbysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).FindUsersPassbys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/FindUsersPassbys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).FindUsersPassbys(ctx, req.(*FindUsersPassbysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_FindPassbysBetweenUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPassbysBetweenUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).FindPassbysBetweenUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/FindPassbysBetweenUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).FindPassbysBetweenUsers(ctx, req.(*FindPassbysBetweenUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "location.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertUserLocation",
			Handler:    _LocationService_InsertUserLocation_Handler,
		},
		{
			MethodName: "FindUsersPassbys",
			Handler:    _LocationService_FindUsersPassbys_Handler,
		},
		{
			MethodName: "FindPassbysBetweenUsers",
			Handler:    _LocationService_FindPassbysBetweenUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location/location.service.proto",
}

func init() { proto.RegisterFile("location/location.service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5f, 0xef, 0xd2, 0x30,
	0x14, 0x15, 0xc8, 0x0f, 0xe5, 0x4a, 0x22, 0x36, 0x82, 0x73, 0xfe, 0x01, 0xe7, 0x83, 0x8b, 0x09,
	0x5b, 0x44, 0xa3, 0x09, 0x2f, 0x26, 0x3c, 0x98, 0x90, 0x98, 0x40, 0x66, 0x88, 0x46, 0xc3, 0x43,
	0x19, 0x05, 0x96, 0x6c, 0xed, 0x5c, 0x3b, 0x0d, 0x9f, 0xc5, 0x2f, 0x6b, 0xd6, 0xb5, 0xc3, 0x8d,
	0x21, 0xbe, 0xed, 0xde, 0x9e, 0x7b, 0x76, 0xce, 0xed, 0x29, 0x0c, 0x43, 0xe6, 0x63, 0x11, 0x30,
	0xea, 0xea, 0x0f, 0x87, 0x93, 0xe4, 0x67, 0xe0, 0x13, 0x27, 0x4e, 0x98, 0x60, 0xe8, 0x8e, 0xee,
	0x9b, 0xfd, 0x02, 0x1a, 0x63, 0xce, 0x37, 0xc7, 0x1c, 0x60, 0x3e, 0x29, 0xda, 0x29, 0x27, 0xc9,
	0xb8, 0xa0, 0x91, 0xa7, 0xd6, 0x17, 0x78, 0x34, 0xa7, 0x9c, 0x24, 0x62, 0xc5, 0x49, 0xf2, 0x49,
	0x9d, 0x79, 0xe4, 0x47, 0x4a, 0xb8, 0x40, 0x53, 0xe8, 0xa6, 0x7f, 0xb5, 0x8d, 0xc6, 0xa8, 0x61,
	0xdf, 0x9d, 0x0c, 0x9c, 0x82, 0xa3, 0x34, 0x54, 0xc2, 0x5a, 0x0b, 0xb8, 0x5f, 0xa6, 0x8c, 0xc3,
	0x63, 0x0d, 0x61, 0xeb, 0xbf, 0x09, 0x3d, 0x78, 0xf8, 0x31, 0xa0, 0xdb, 0x0c, 0xc1, 0x97, 0xd2,
	0x20, 0xd7, 0x3a, 0xdf, 0x43, 0x3b, 0xc6, 0x09, 0x8e, 0xb8, 0x52, 0x38, 0x3c, 0x11, 0xea, 0x11,
	0x35, 0xb1, 0x94, 0x30, 0x4f, 0xc1, 0xad, 0x35, 0xf4, 0x6b, 0x01, 0x68, 0x00, 0xed, 0xec, 0xe7,
	0xf3, 0xad, 0x64, 0xec, 0x78, 0xaa, 0x42, 0x0f, 0xe0, 0x26, 0x0c, 0xa2, 0x40, 0x18, 0xcd, 0x51,
	0xc3, 0xbe, 0xf1, 0xf2, 0x22, 0x43, 0xb3, 0xdd, 0x8e, 0x13, 0x61, 0xb4, 0x64, 0x5b, 0x55, 0xd6,
	0x14, 0xba, 0x85, 0xd2, 0xcc, 0xfe, 0x2b, 0xb8, 0x9d, 0x5f, 0x0d, 0x57, 0xce, 0x7b, 0x27, 0xa1,
	0x39, 0xd0, 0xd3, 0x00, 0x0b, 0xc3, 0xb3, 0x4c, 0x9a, 0x9a, 0x9f, 0x11, 0xf1, 0x8b, 0x10, 0x2a,
	0xcd, 0x6b, 0xd7, 0x1f, 0x2a, 0xae, 0x5f, 0x96, 0x5d, 0xd7, 0x4c, 0x56, 0xdc, 0x7f, 0x87, 0xa7,
	0xff, 0x04, 0x5e, 0xdc, 0x82, 0x05, 0x5d, 0x26, 0x0e, 0x24, 0x59, 0xc9, 0x92, 0x1b, 0xcd, 0x51,
	0xcb, 0xee, 0x78, 0xa5, 0xde, 0xe4, 0x77, 0x13, 0xee, 0xe9, 0xbb, 0xfb, 0x9c, 0x27, 0x16, 0x7d,
	0x05, 0x74, 0x1e, 0x36, 0xf4, 0xe2, 0xa4, 0xfb, 0x62, 0x14, 0xcd, 0xc7, 0x17, 0x32, 0x92, 0xed,
	0xd5, 0xba, 0x85, 0x16, 0xd0, 0xab, 0x86, 0x03, 0x3d, 0x3f, 0x4f, 0x41, 0x25, 0x38, 0xe6, 0xa0,
	0xba, 0x7f, 0xae, 0x09, 0xd7, 0x79, 0xda, 0x6a, 0x76, 0x83, 0xec, 0xab, 0x7b, 0xbe, 0x4a, 0x3f,
	0x7b, 0xf7, 0xed, 0xed, 0x3e, 0x10, 0x87, 0x74, 0xe3, 0xf8, 0x2c, 0x72, 0xe3, 0xd7, 0x3e, 0x75,
	0x05, 0xa6, 0x02, 0xd3, 0xf1, 0x96, 0x45, 0x38, 0xa0, 0x63, 0xee, 0x1f, 0x48, 0x84, 0xdd, 0x3d,
	0x0b, 0x31, 0xdd, 0x17, 0x6f, 0x7f, 0xd3, 0x96, 0xaf, 0xf6, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x4f, 0xb2, 0x30, 0x17, 0x04, 0x00, 0x00,
}
