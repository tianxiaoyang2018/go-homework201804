// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relationship/relationship.service.proto

package relationship

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UpsertParam struct {
	Relationship *RelationshipUpdate `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
}

func (m *UpsertParam) Reset()                    { *m = UpsertParam{} }
func (m *UpsertParam) String() string            { return proto.CompactTextString(m) }
func (*UpsertParam) ProtoMessage()               {}
func (*UpsertParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *UpsertParam) GetRelationship() *RelationshipUpdate {
	if m != nil {
		return m.Relationship
	}
	return nil
}

type UserCounterChange struct {
	ReceivedLikes      int32 `protobuf:"varint,1,opt,name=receivedLikes" json:"receivedLikes,omitempty"`
	ReceivedDislikes   int32 `protobuf:"varint,2,opt,name=receivedDislikes" json:"receivedDislikes,omitempty"`
	ReceivedBlocks     int32 `protobuf:"varint,3,opt,name=receivedBlocks" json:"receivedBlocks,omitempty"`
	ReceivedSuperLikes int32 `protobuf:"varint,4,opt,name=receivedSuperLikes" json:"receivedSuperLikes,omitempty"`
	ReceivedCrushes    int32 `protobuf:"varint,5,opt,name=receivedCrushes" json:"receivedCrushes,omitempty"`
	GivenLikes         int32 `protobuf:"varint,6,opt,name=givenLikes" json:"givenLikes,omitempty"`
	GivenDislikes      int32 `protobuf:"varint,7,opt,name=givenDislikes" json:"givenDislikes,omitempty"`
	GivenBlocks        int32 `protobuf:"varint,8,opt,name=givenBlocks" json:"givenBlocks,omitempty"`
	GivenCrushes       int32 `protobuf:"varint,9,opt,name=givenCrushes" json:"givenCrushes,omitempty"`
	GivenSuperLikes    int32 `protobuf:"varint,10,opt,name=givenSuperLikes" json:"givenSuperLikes,omitempty"`
	Matches            int32 `protobuf:"varint,11,opt,name=matches" json:"matches,omitempty"`
	LikeRating         int32 `protobuf:"varint,12,opt,name=likeRating" json:"likeRating,omitempty"`
	GivenUndos         int32 `protobuf:"varint,13,opt,name=givenUndos" json:"givenUndos,omitempty"`
	// 每日额度
	SuperLikeCount   int32 `protobuf:"varint,14,opt,name=superLikeCount" json:"superLikeCount,omitempty"`
	LikesWithinLimit int32 `protobuf:"varint,15,opt,name=likesWithinLimit" json:"likesWithinLimit,omitempty"`
	// set to
	Popularity float64 `protobuf:"fixed64,16,opt,name=popularity" json:"popularity,omitempty"`
}

func (m *UserCounterChange) Reset()                    { *m = UserCounterChange{} }
func (m *UserCounterChange) String() string            { return proto.CompactTextString(m) }
func (*UserCounterChange) ProtoMessage()               {}
func (*UserCounterChange) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *UserCounterChange) GetReceivedLikes() int32 {
	if m != nil {
		return m.ReceivedLikes
	}
	return 0
}

func (m *UserCounterChange) GetReceivedDislikes() int32 {
	if m != nil {
		return m.ReceivedDislikes
	}
	return 0
}

func (m *UserCounterChange) GetReceivedBlocks() int32 {
	if m != nil {
		return m.ReceivedBlocks
	}
	return 0
}

func (m *UserCounterChange) GetReceivedSuperLikes() int32 {
	if m != nil {
		return m.ReceivedSuperLikes
	}
	return 0
}

func (m *UserCounterChange) GetReceivedCrushes() int32 {
	if m != nil {
		return m.ReceivedCrushes
	}
	return 0
}

func (m *UserCounterChange) GetGivenLikes() int32 {
	if m != nil {
		return m.GivenLikes
	}
	return 0
}

func (m *UserCounterChange) GetGivenDislikes() int32 {
	if m != nil {
		return m.GivenDislikes
	}
	return 0
}

func (m *UserCounterChange) GetGivenBlocks() int32 {
	if m != nil {
		return m.GivenBlocks
	}
	return 0
}

func (m *UserCounterChange) GetGivenCrushes() int32 {
	if m != nil {
		return m.GivenCrushes
	}
	return 0
}

func (m *UserCounterChange) GetGivenSuperLikes() int32 {
	if m != nil {
		return m.GivenSuperLikes
	}
	return 0
}

func (m *UserCounterChange) GetMatches() int32 {
	if m != nil {
		return m.Matches
	}
	return 0
}

func (m *UserCounterChange) GetLikeRating() int32 {
	if m != nil {
		return m.LikeRating
	}
	return 0
}

func (m *UserCounterChange) GetGivenUndos() int32 {
	if m != nil {
		return m.GivenUndos
	}
	return 0
}

func (m *UserCounterChange) GetSuperLikeCount() int32 {
	if m != nil {
		return m.SuperLikeCount
	}
	return 0
}

func (m *UserCounterChange) GetLikesWithinLimit() int32 {
	if m != nil {
		return m.LikesWithinLimit
	}
	return 0
}

func (m *UserCounterChange) GetPopularity() float64 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

type UpsertReply struct {
	Relationship       *Relationship      `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	CounterChange      *UserCounterChange `protobuf:"bytes,2,opt,name=counterChange" json:"counterChange,omitempty"`
	OtherCounterChange *UserCounterChange `protobuf:"bytes,3,opt,name=otherCounterChange" json:"otherCounterChange,omitempty"`
}

func (m *UpsertReply) Reset()                    { *m = UpsertReply{} }
func (m *UpsertReply) String() string            { return proto.CompactTextString(m) }
func (*UpsertReply) ProtoMessage()               {}
func (*UpsertReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *UpsertReply) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *UpsertReply) GetCounterChange() *UserCounterChange {
	if m != nil {
		return m.CounterChange
	}
	return nil
}

func (m *UpsertReply) GetOtherCounterChange() *UserCounterChange {
	if m != nil {
		return m.OtherCounterChange
	}
	return nil
}

// order by time where beginTime or endTime is set
type FindSuperLikeParam struct {
	Me        string   `protobuf:"bytes,1,opt,name=me" json:"me,omitempty"`
	Others    []string `protobuf:"bytes,2,rep,name=others" json:"others,omitempty"`
	BeginTime int64    `protobuf:"varint,3,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime   int64    `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *FindSuperLikeParam) Reset()                    { *m = FindSuperLikeParam{} }
func (m *FindSuperLikeParam) String() string            { return proto.CompactTextString(m) }
func (*FindSuperLikeParam) ProtoMessage()               {}
func (*FindSuperLikeParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *FindSuperLikeParam) GetMe() string {
	if m != nil {
		return m.Me
	}
	return ""
}

func (m *FindSuperLikeParam) GetOthers() []string {
	if m != nil {
		return m.Others
	}
	return nil
}

func (m *FindSuperLikeParam) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *FindSuperLikeParam) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type FindSuperLikeMatchedParam struct {
	Me     string   `protobuf:"bytes,1,opt,name=me" json:"me,omitempty"`
	Others []string `protobuf:"bytes,2,rep,name=others" json:"others,omitempty"`
}

func (m *FindSuperLikeMatchedParam) Reset()                    { *m = FindSuperLikeMatchedParam{} }
func (m *FindSuperLikeMatchedParam) String() string            { return proto.CompactTextString(m) }
func (*FindSuperLikeMatchedParam) ProtoMessage()               {}
func (*FindSuperLikeMatchedParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *FindSuperLikeMatchedParam) GetMe() string {
	if m != nil {
		return m.Me
	}
	return ""
}

func (m *FindSuperLikeMatchedParam) GetOthers() []string {
	if m != nil {
		return m.Others
	}
	return nil
}

type FindOtherSuperLikeParam struct {
	Me     string   `protobuf:"bytes,1,opt,name=me" json:"me,omitempty"`
	Others []string `protobuf:"bytes,2,rep,name=others" json:"others,omitempty"`
}

func (m *FindOtherSuperLikeParam) Reset()                    { *m = FindOtherSuperLikeParam{} }
func (m *FindOtherSuperLikeParam) String() string            { return proto.CompactTextString(m) }
func (*FindOtherSuperLikeParam) ProtoMessage()               {}
func (*FindOtherSuperLikeParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *FindOtherSuperLikeParam) GetMe() string {
	if m != nil {
		return m.Me
	}
	return ""
}

func (m *FindOtherSuperLikeParam) GetOthers() []string {
	if m != nil {
		return m.Others
	}
	return nil
}

type FindParam struct {
	Me      string   `protobuf:"bytes,1,opt,name=me" json:"me,omitempty"`
	Others  []string `protobuf:"bytes,2,rep,name=others" json:"others,omitempty"`
	Matched bool     `protobuf:"varint,3,opt,name=matched" json:"matched,omitempty"`
	Offset  int32    `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit   int32    `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *FindParam) Reset()                    { *m = FindParam{} }
func (m *FindParam) String() string            { return proto.CompactTextString(m) }
func (*FindParam) ProtoMessage()               {}
func (*FindParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *FindParam) GetMe() string {
	if m != nil {
		return m.Me
	}
	return ""
}

func (m *FindParam) GetOthers() []string {
	if m != nil {
		return m.Others
	}
	return nil
}

func (m *FindParam) GetMatched() bool {
	if m != nil {
		return m.Matched
	}
	return false
}

func (m *FindParam) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FindParam) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type FindReply struct {
	Relationship []*Relationship `protobuf:"bytes,1,rep,name=relationship" json:"relationship,omitempty"`
}

func (m *FindReply) Reset()                    { *m = FindReply{} }
func (m *FindReply) String() string            { return proto.CompactTextString(m) }
func (*FindReply) ProtoMessage()               {}
func (*FindReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *FindReply) GetRelationship() []*Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func init() {
	proto.RegisterType((*UpsertParam)(nil), "relationship.UpsertParam")
	proto.RegisterType((*UserCounterChange)(nil), "relationship.UserCounterChange")
	proto.RegisterType((*UpsertReply)(nil), "relationship.UpsertReply")
	proto.RegisterType((*FindSuperLikeParam)(nil), "relationship.FindSuperLikeParam")
	proto.RegisterType((*FindSuperLikeMatchedParam)(nil), "relationship.FindSuperLikeMatchedParam")
	proto.RegisterType((*FindOtherSuperLikeParam)(nil), "relationship.FindOtherSuperLikeParam")
	proto.RegisterType((*FindParam)(nil), "relationship.FindParam")
	proto.RegisterType((*FindReply)(nil), "relationship.FindReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RelationshipService service

type RelationshipServiceClient interface {
	// 插入新的relationship(目前只能单条插入、且仅供restapi-relationship调用，外部调用应使用restapi接口).
	Upsert(ctx context.Context, in *UpsertParam, opts ...grpc.CallOption) (*UpsertReply, error)
	// 返回所有我superlike过的其它指定用户的关系
	FindSuperLike(ctx context.Context, in *FindSuperLikeParam, opts ...grpc.CallOption) (*FindReply, error)
	// 返回所有我superlike其它指定用户的关系,并且这些关系是matched的
	FindSuperLikeMatched(ctx context.Context, in *FindSuperLikeMatchedParam, opts ...grpc.CallOption) (*FindReply, error)
	// 返回所有其它人superlike我的关系
	FindOtherSuperLike(ctx context.Context, in *FindOtherSuperLikeParam, opts ...grpc.CallOption) (*FindReply, error)
	// 返回我与others中所有用户的relationship中第offset开始的limit条，满足matched or not条件. 注意：要对uid<0的teamAccount和promotionAccount做特殊处理
	Find(ctx context.Context, in *FindParam, opts ...grpc.CallOption) (*FindReply, error)
}

type relationshipServiceClient struct {
	cc *grpc.ClientConn
}

func NewRelationshipServiceClient(cc *grpc.ClientConn) RelationshipServiceClient {
	return &relationshipServiceClient{cc}
}

func (c *relationshipServiceClient) Upsert(ctx context.Context, in *UpsertParam, opts ...grpc.CallOption) (*UpsertReply, error) {
	out := new(UpsertReply)
	err := grpc.Invoke(ctx, "/relationship.RelationshipService/Upsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceClient) FindSuperLike(ctx context.Context, in *FindSuperLikeParam, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := grpc.Invoke(ctx, "/relationship.RelationshipService/FindSuperLike", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceClient) FindSuperLikeMatched(ctx context.Context, in *FindSuperLikeMatchedParam, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := grpc.Invoke(ctx, "/relationship.RelationshipService/FindSuperLikeMatched", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceClient) FindOtherSuperLike(ctx context.Context, in *FindOtherSuperLikeParam, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := grpc.Invoke(ctx, "/relationship.RelationshipService/FindOtherSuperLike", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceClient) Find(ctx context.Context, in *FindParam, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := grpc.Invoke(ctx, "/relationship.RelationshipService/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RelationshipService service

type RelationshipServiceServer interface {
	// 插入新的relationship(目前只能单条插入、且仅供restapi-relationship调用，外部调用应使用restapi接口).
	Upsert(context.Context, *UpsertParam) (*UpsertReply, error)
	// 返回所有我superlike过的其它指定用户的关系
	FindSuperLike(context.Context, *FindSuperLikeParam) (*FindReply, error)
	// 返回所有我superlike其它指定用户的关系,并且这些关系是matched的
	FindSuperLikeMatched(context.Context, *FindSuperLikeMatchedParam) (*FindReply, error)
	// 返回所有其它人superlike我的关系
	FindOtherSuperLike(context.Context, *FindOtherSuperLikeParam) (*FindReply, error)
	// 返回我与others中所有用户的relationship中第offset开始的limit条，满足matched or not条件. 注意：要对uid<0的teamAccount和promotionAccount做特殊处理
	Find(context.Context, *FindParam) (*FindReply, error)
}

func RegisterRelationshipServiceServer(s *grpc.Server, srv RelationshipServiceServer) {
	s.RegisterService(&_RelationshipService_serviceDesc, srv)
}

func _RelationshipService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.RelationshipService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).Upsert(ctx, req.(*UpsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipService_FindSuperLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuperLikeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).FindSuperLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.RelationshipService/FindSuperLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).FindSuperLike(ctx, req.(*FindSuperLikeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipService_FindSuperLikeMatched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuperLikeMatchedParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).FindSuperLikeMatched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.RelationshipService/FindSuperLikeMatched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).FindSuperLikeMatched(ctx, req.(*FindSuperLikeMatchedParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipService_FindOtherSuperLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOtherSuperLikeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).FindOtherSuperLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.RelationshipService/FindOtherSuperLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).FindOtherSuperLike(ctx, req.(*FindOtherSuperLikeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.RelationshipService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).Find(ctx, req.(*FindParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelationshipService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relationship.RelationshipService",
	HandlerType: (*RelationshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _RelationshipService_Upsert_Handler,
		},
		{
			MethodName: "FindSuperLike",
			Handler:    _RelationshipService_FindSuperLike_Handler,
		},
		{
			MethodName: "FindSuperLikeMatched",
			Handler:    _RelationshipService_FindSuperLikeMatched_Handler,
		},
		{
			MethodName: "FindOtherSuperLike",
			Handler:    _RelationshipService_FindOtherSuperLike_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _RelationshipService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relationship/relationship.service.proto",
}

func init() { proto.RegisterFile("relationship/relationship.service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xd1, 0x4e, 0xdb, 0x4a,
	0x10, 0xbd, 0x21, 0x21, 0x90, 0x09, 0x01, 0xee, 0x5c, 0x74, 0x31, 0x51, 0x55, 0x22, 0xab, 0x2d,
	0x51, 0x25, 0x12, 0x95, 0xbe, 0x54, 0x3c, 0x54, 0x2d, 0xa1, 0x7d, 0x29, 0x15, 0x95, 0x69, 0x5a,
	0x89, 0x37, 0x63, 0x2f, 0xf1, 0x0a, 0x7b, 0x6d, 0xd9, 0x1b, 0x24, 0xd4, 0xef, 0xe8, 0x27, 0xf6,
	0xa9, 0x3f, 0x51, 0xed, 0x6c, 0x4c, 0xbc, 0x8e, 0xa1, 0xa5, 0x8f, 0xe7, 0xec, 0x99, 0xd9, 0x39,
	0x9a, 0xe3, 0x35, 0xec, 0xa5, 0x2c, 0x74, 0x25, 0x8f, 0x45, 0x16, 0xf0, 0x64, 0x58, 0x04, 0x83,
	0x8c, 0xa5, 0xd7, 0xdc, 0x63, 0x83, 0x24, 0x8d, 0x65, 0x8c, 0x6b, 0xc5, 0xb3, 0xee, 0xee, 0xdd,
	0x65, 0x24, 0xb7, 0xcf, 0xa0, 0x3d, 0x4e, 0x32, 0x96, 0xca, 0x4f, 0x6e, 0xea, 0x46, 0x78, 0x0c,
	0x46, 0xbd, 0x55, 0xeb, 0xd5, 0xfa, 0xed, 0x83, 0xde, 0xc0, 0xa8, 0x74, 0x0a, 0x60, 0x9c, 0xf8,
	0xae, 0x64, 0x8e, 0x51, 0x65, 0xff, 0x6c, 0xc0, 0xbf, 0xe3, 0x8c, 0xa5, 0xa3, 0x78, 0x2a, 0x24,
	0x4b, 0x47, 0x81, 0x2b, 0x26, 0x0c, 0x9f, 0x40, 0x27, 0x65, 0x1e, 0xe3, 0xd7, 0xcc, 0x3f, 0xe1,
	0x57, 0x2c, 0xa3, 0xe6, 0xcb, 0x8e, 0x49, 0xe2, 0x73, 0xd8, 0xcc, 0x89, 0x63, 0x9e, 0x85, 0x24,
	0x5c, 0x22, 0xe1, 0x02, 0x8f, 0xcf, 0x60, 0x3d, 0xe7, 0x8e, 0xc2, 0xd8, 0xbb, 0xca, 0xac, 0x3a,
	0x29, 0x4b, 0x2c, 0x0e, 0x00, 0x73, 0xe6, 0x6c, 0x9a, 0xb0, 0x54, 0x5f, 0xdf, 0x20, 0x6d, 0xc5,
	0x09, 0xf6, 0x61, 0x23, 0x67, 0x47, 0xe9, 0x34, 0x0b, 0x58, 0x66, 0x2d, 0x93, 0xb8, 0x4c, 0xe3,
	0x63, 0x80, 0x09, 0xbf, 0x66, 0x42, 0x77, 0x6c, 0x92, 0xa8, 0xc0, 0x28, 0xcf, 0x84, 0x6e, 0xad,
	0xac, 0x68, 0xcf, 0x06, 0x89, 0x3d, 0x68, 0x13, 0x31, 0x33, 0xb1, 0x4a, 0x9a, 0x22, 0x85, 0x36,
	0xac, 0x11, 0xcc, 0xc7, 0x69, 0x91, 0xc4, 0xe0, 0xd4, 0xd4, 0x84, 0x0b, 0x16, 0x41, 0x4f, 0x5d,
	0xa2, 0xd1, 0x82, 0x95, 0xc8, 0x95, 0x9e, 0x6a, 0xd4, 0x26, 0x45, 0x0e, 0x95, 0x1f, 0x35, 0x92,
	0xe3, 0x4a, 0x2e, 0x26, 0xd6, 0x9a, 0xf6, 0x33, 0x67, 0x6e, 0xfd, 0x8e, 0x85, 0x1f, 0x67, 0x56,
	0xa7, 0xe0, 0x97, 0x18, 0xb5, 0x91, 0x2c, 0xbf, 0x87, 0xb6, 0x6f, 0xad, 0xeb, 0x8d, 0x98, 0xac,
	0xda, 0x32, 0x59, 0xff, 0xca, 0x65, 0xc0, 0xc5, 0x09, 0x8f, 0xb8, 0xb4, 0x36, 0xf4, 0x96, 0xcb,
	0xbc, 0xba, 0x33, 0x89, 0x93, 0x69, 0xe8, 0xa6, 0x5c, 0xde, 0x58, 0x9b, 0xbd, 0x5a, 0xbf, 0xe6,
	0x14, 0x18, 0xfb, 0x47, 0x2d, 0xcf, 0xb0, 0xc3, 0x92, 0xf0, 0x06, 0x5f, 0x57, 0x66, 0xb8, 0x7b,
	0x77, 0x86, 0xcd, 0xf4, 0xe2, 0x3b, 0xe8, 0x78, 0xc5, 0xe0, 0x52, 0xfc, 0xda, 0x07, 0xbb, 0x66,
	0x83, 0x85, 0x7c, 0x3b, 0x66, 0x15, 0x9e, 0x02, 0xc6, 0x32, 0x28, 0x89, 0x28, 0xa0, 0x7f, 0xd0,
	0xab, 0xa2, 0xd4, 0x96, 0x80, 0xef, 0xb9, 0x98, 0xe7, 0x54, 0x7f, 0xb1, 0xeb, 0xb0, 0x14, 0x31,
	0xf2, 0xd8, 0x72, 0x96, 0x22, 0x86, 0xff, 0x43, 0x93, 0x6a, 0xd5, 0x57, 0x53, 0xef, 0xb7, 0x9c,
	0x19, 0xc2, 0x47, 0xd0, 0xba, 0x60, 0x13, 0x2e, 0x3e, 0xf3, 0x48, 0x4f, 0x51, 0x77, 0xe6, 0x84,
	0x4a, 0x04, 0x13, 0x3e, 0x9d, 0x35, 0xe8, 0x2c, 0x87, 0xf6, 0x08, 0x76, 0x8c, 0x5b, 0x3f, 0x52,
	0x52, 0xfc, 0x07, 0x5d, 0x6e, 0xbf, 0x85, 0x6d, 0xd5, 0xe4, 0x54, 0xa1, 0xbf, 0x9b, 0xdf, 0xfe,
	0x06, 0x2d, 0xd5, 0xe2, 0x61, 0xa6, 0x6f, 0x83, 0xee, 0x93, 0xe5, 0xd5, 0x3c, 0xe8, 0x3e, 0x55,
	0x5c, 0x5e, 0x66, 0x4c, 0xce, 0x9e, 0x81, 0x19, 0xc2, 0x2d, 0x58, 0x0e, 0x29, 0x8d, 0xfa, 0x83,
	0xd7, 0xc0, 0xfe, 0xa0, 0x2f, 0xbf, 0x2b, 0x5f, 0xf5, 0x87, 0xe4, 0xeb, 0xe0, 0x7b, 0x1d, 0xfe,
	0x2b, 0x1e, 0x9f, 0xe9, 0xf7, 0x1b, 0xdf, 0x40, 0x53, 0xc7, 0x18, 0x77, 0x4a, 0xf1, 0x98, 0x3f,
	0xd0, 0xdd, 0xca, 0x23, 0x9a, 0xcb, 0xfe, 0x07, 0x4f, 0xa0, 0x63, 0xec, 0x0a, 0x4b, 0x0f, 0xf7,
	0x62, 0x7c, 0xba, 0xdb, 0x8b, 0x8a, 0xbc, 0xdb, 0x39, 0x6c, 0x55, 0x6d, 0x1e, 0xf7, 0xee, 0x69,
	0x5a, 0x4c, 0xc7, 0x7d, 0xbd, 0xbf, 0xe8, 0x2c, 0x9b, 0x81, 0xc0, 0xa7, 0x8b, 0x05, 0x15, 0x91,
	0xb9, 0xaf, 0xef, 0x21, 0x34, 0x14, 0xc4, 0x0a, 0xc9, 0xef, 0x6a, 0x8f, 0x0e, 0xcf, 0x5f, 0x4d,
	0xb8, 0x0c, 0xa6, 0x17, 0x03, 0x2f, 0x8e, 0x86, 0xc9, 0x0b, 0x4f, 0x0c, 0xa5, 0x2b, 0xa4, 0x2b,
	0xf6, 0xfd, 0x38, 0x72, 0xb9, 0xd8, 0xcf, 0xbc, 0x80, 0x45, 0xee, 0x70, 0x12, 0x87, 0xae, 0x98,
	0x18, 0x3f, 0xd3, 0x8b, 0x26, 0xfd, 0x4d, 0x5f, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xba, 0xac,
	0x48, 0xed, 0xa7, 0x07, 0x00, 0x00,
}
