// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relationship/relationship.proto

package relationship

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RelationshipStateEnum int32

const (
	RelationshipStateEnum_LIKED      RelationshipStateEnum = 0
	RelationshipStateEnum_DISLIKED   RelationshipStateEnum = 1
	RelationshipStateEnum_DEFAULT    RelationshipStateEnum = 2
	RelationshipStateEnum_BLOCKED    RelationshipStateEnum = 3
	RelationshipStateEnum_SUPERLIKED RelationshipStateEnum = 4
	// 	CONTACT = 5;
	RelationshipStateEnum_CRUSHLIKED RelationshipStateEnum = 6
)

var RelationshipStateEnum_name = map[int32]string{
	0: "LIKED",
	1: "DISLIKED",
	2: "DEFAULT",
	3: "BLOCKED",
	4: "SUPERLIKED",
	6: "CRUSHLIKED",
}
var RelationshipStateEnum_value = map[string]int32{
	"LIKED":      0,
	"DISLIKED":   1,
	"DEFAULT":    2,
	"BLOCKED":    3,
	"SUPERLIKED": 4,
	"CRUSHLIKED": 6,
}

func (x RelationshipStateEnum) String() string {
	return proto.EnumName(RelationshipStateEnum_name, int32(x))
}
func (RelationshipStateEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Tag struct {
	Category string `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Tag) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RelationshipUpdate struct {
	UserId      string                `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserId string                `protobuf:"bytes,2,opt,name=otherUserId" json:"otherUserId,omitempty"`
	State       RelationshipStateEnum `protobuf:"varint,3,opt,name=state,enum=relationship.RelationshipStateEnum" json:"state,omitempty"`
	CreatedTime int64                 `protobuf:"varint,4,opt,name=createdTime" json:"createdTime,omitempty"`
	Tags        []*Tag                `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *RelationshipUpdate) Reset()                    { *m = RelationshipUpdate{} }
func (m *RelationshipUpdate) String() string            { return proto.CompactTextString(m) }
func (*RelationshipUpdate) ProtoMessage()               {}
func (*RelationshipUpdate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RelationshipUpdate) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RelationshipUpdate) GetOtherUserId() string {
	if m != nil {
		return m.OtherUserId
	}
	return ""
}

func (m *RelationshipUpdate) GetState() RelationshipStateEnum {
	if m != nil {
		return m.State
	}
	return RelationshipStateEnum_LIKED
}

func (m *RelationshipUpdate) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *RelationshipUpdate) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Relationship struct {
	UserId      string                `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserId string                `protobuf:"bytes,2,opt,name=otherUserId" json:"otherUserId,omitempty"`
	State       RelationshipStateEnum `protobuf:"varint,3,opt,name=state,enum=relationship.RelationshipStateEnum" json:"state,omitempty"`
	OtherState  RelationshipStateEnum `protobuf:"varint,4,opt,name=otherState,enum=relationship.RelationshipStateEnum" json:"otherState,omitempty"`
	CreatedTime int64                 `protobuf:"varint,5,opt,name=createdTime" json:"createdTime,omitempty"`
	UpdatedTime int64                 `protobuf:"varint,6,opt,name=updatedTime" json:"updatedTime,omitempty"`
	Tags        []*Tag                `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	OtherTags   []*Tag                `protobuf:"bytes,8,rep,name=otherTags" json:"otherTags,omitempty"`
}

func (m *Relationship) Reset()                    { *m = Relationship{} }
func (m *Relationship) String() string            { return proto.CompactTextString(m) }
func (*Relationship) ProtoMessage()               {}
func (*Relationship) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Relationship) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Relationship) GetOtherUserId() string {
	if m != nil {
		return m.OtherUserId
	}
	return ""
}

func (m *Relationship) GetState() RelationshipStateEnum {
	if m != nil {
		return m.State
	}
	return RelationshipStateEnum_LIKED
}

func (m *Relationship) GetOtherState() RelationshipStateEnum {
	if m != nil {
		return m.OtherState
	}
	return RelationshipStateEnum_LIKED
}

func (m *Relationship) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *Relationship) GetUpdatedTime() int64 {
	if m != nil {
		return m.UpdatedTime
	}
	return 0
}

func (m *Relationship) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Relationship) GetOtherTags() []*Tag {
	if m != nil {
		return m.OtherTags
	}
	return nil
}

func init() {
	proto.RegisterType((*Tag)(nil), "relationship.Tag")
	proto.RegisterType((*RelationshipUpdate)(nil), "relationship.RelationshipUpdate")
	proto.RegisterType((*Relationship)(nil), "relationship.Relationship")
	proto.RegisterEnum("relationship.RelationshipStateEnum", RelationshipStateEnum_name, RelationshipStateEnum_value)
}

func init() { proto.RegisterFile("relationship/relationship.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0x4d, 0xab, 0xd3, 0x40,
	0x14, 0x35, 0xcd, 0x47, 0xdb, 0x9b, 0x52, 0xea, 0x80, 0x12, 0xdc, 0x18, 0x2a, 0x42, 0x10, 0xda,
	0x60, 0x45, 0x50, 0x77, 0xb6, 0x8d, 0x58, 0x2c, 0x28, 0xf9, 0xd8, 0xb8, 0x9b, 0x26, 0x43, 0x12,
	0x69, 0x66, 0x42, 0x32, 0x59, 0xf8, 0x37, 0xfd, 0x0d, 0xfe, 0x90, 0x47, 0x66, 0x4a, 0xdf, 0xf4,
	0x7d, 0xf1, 0x76, 0x6f, 0x97, 0x73, 0xee, 0xb9, 0xe7, 0xe6, 0x9e, 0xe1, 0xc2, 0xeb, 0x86, 0x1c,
	0x31, 0x2f, 0x19, 0x6d, 0x8b, 0xb2, 0xf6, 0x55, 0xb0, 0xac, 0x1b, 0xc6, 0x19, 0x9a, 0xa8, 0xdc,
	0xfc, 0x23, 0xe8, 0x31, 0xce, 0xd1, 0x2b, 0x18, 0xa5, 0x98, 0x93, 0x9c, 0x35, 0x7f, 0x1d, 0xcd,
	0xd5, 0xbc, 0x71, 0x78, 0xc6, 0x08, 0x81, 0x41, 0x71, 0x45, 0x9c, 0x81, 0xe0, 0xc5, 0xf7, 0xfc,
	0x9f, 0x06, 0x28, 0x54, 0x7c, 0x92, 0x3a, 0xc3, 0x9c, 0xa0, 0x97, 0x60, 0x75, 0x2d, 0x69, 0x76,
	0xd9, 0xc9, 0xe4, 0x84, 0x90, 0x0b, 0x36, 0xe3, 0x05, 0x69, 0x12, 0x59, 0x94, 0x4e, 0x2a, 0x85,
	0x3e, 0x83, 0xd9, 0x72, 0xcc, 0x89, 0xa3, 0xbb, 0x9a, 0x37, 0x5d, 0xbd, 0x59, 0x5e, 0xfc, 0xb9,
	0x3a, 0x2a, 0xea, 0x65, 0x01, 0xed, 0xaa, 0x50, 0x76, 0xf4, 0xe6, 0x69, 0x43, 0x30, 0x27, 0x59,
	0x5c, 0x56, 0xc4, 0x31, 0x5c, 0xcd, 0xd3, 0x43, 0x95, 0x42, 0x6f, 0xc1, 0xe0, 0x38, 0x6f, 0x1d,
	0xd3, 0xd5, 0x3d, 0x7b, 0xf5, 0xfc, 0xd2, 0x3b, 0xc6, 0x79, 0x28, 0xca, 0xf3, 0xff, 0x03, 0x98,
	0xa8, 0x93, 0x9e, 0x66, 0x9d, 0x0d, 0x80, 0x70, 0x12, 0x05, 0xb1, 0xcd, 0x23, 0xfb, 0x95, 0xb6,
	0x9b, 0x99, 0x98, 0xb7, 0x33, 0x71, 0xc1, 0xee, 0xc4, 0xa3, 0x49, 0x85, 0x25, 0x15, 0x0a, 0x75,
	0x4e, 0x6d, 0xf8, 0x60, 0x6a, 0xc8, 0x87, 0xb1, 0x18, 0x1c, 0xf7, 0xda, 0xd1, 0x7d, 0xda, 0x6b,
	0xcd, 0xbb, 0x3f, 0xf0, 0xe2, 0xce, 0x05, 0xd0, 0x18, 0xcc, 0xfd, 0xee, 0x47, 0xb0, 0x9d, 0x3d,
	0x43, 0x13, 0x18, 0x6d, 0x77, 0x91, 0x44, 0x1a, 0xb2, 0x61, 0xb8, 0x0d, 0xbe, 0x7d, 0x4d, 0xf6,
	0xf1, 0x6c, 0xd0, 0x83, 0xf5, 0xfe, 0xe7, 0xa6, 0xaf, 0xe8, 0x68, 0x0a, 0x10, 0x25, 0xbf, 0x82,
	0x50, 0x2a, 0x8d, 0x1e, 0x6f, 0xc2, 0x24, 0xfa, 0x2e, 0xb1, 0xb5, 0xfe, 0xf2, 0xfb, 0x53, 0x5e,
	0xf2, 0xa2, 0x3b, 0x2c, 0x53, 0x56, 0xf9, 0xf5, 0xfb, 0x94, 0xfa, 0x1c, 0x53, 0x8e, 0xe9, 0x22,
	0x63, 0x15, 0x2e, 0xe9, 0xa2, 0x4d, 0x0b, 0x52, 0x61, 0x3f, 0x67, 0x47, 0x4c, 0xf3, 0x8b, 0x73,
	0x39, 0x58, 0xe2, 0x5e, 0x3e, 0x5c, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x04, 0x55, 0x87, 0x52,
	0x03, 0x00, 0x00,
}
