// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feedback/report.service.proto

package feedback

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReportsParam struct {
	Report []*Report `protobuf:"bytes,1,rep,name=report" json:"report,omitempty"`
}

func (m *ReportsParam) Reset()                    { *m = ReportsParam{} }
func (m *ReportsParam) String() string            { return proto.CompactTextString(m) }
func (*ReportsParam) ProtoMessage()               {}
func (*ReportsParam) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ReportsParam) GetReport() []*Report {
	if m != nil {
		return m.Report
	}
	return nil
}

type ReportReply struct {
	Report []*Report `protobuf:"bytes,1,rep,name=report" json:"report,omitempty"`
}

func (m *ReportReply) Reset()                    { *m = ReportReply{} }
func (m *ReportReply) String() string            { return proto.CompactTextString(m) }
func (*ReportReply) ProtoMessage()               {}
func (*ReportReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ReportReply) GetReport() []*Report {
	if m != nil {
		return m.Report
	}
	return nil
}

type ReportUserIdParam struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *ReportUserIdParam) Reset()                    { *m = ReportUserIdParam{} }
func (m *ReportUserIdParam) String() string            { return proto.CompactTextString(m) }
func (*ReportUserIdParam) ProtoMessage()               {}
func (*ReportUserIdParam) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ReportUserIdParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CountersByReportersParam struct {
	UserIds []string `protobuf:"bytes,1,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *CountersByReportersParam) Reset()                    { *m = CountersByReportersParam{} }
func (m *CountersByReportersParam) String() string            { return proto.CompactTextString(m) }
func (*CountersByReportersParam) ProtoMessage()               {}
func (*CountersByReportersParam) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CountersByReportersParam) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type ReportIdParam struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReportIdParam) Reset()                    { *m = ReportIdParam{} }
func (m *ReportIdParam) String() string            { return proto.CompactTextString(m) }
func (*ReportIdParam) ProtoMessage()               {}
func (*ReportIdParam) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ReportIdParam) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MapReportCounter struct {
	ReportCounter map[string]*ReportCounter `protobuf:"bytes,1,rep,name=reportCounter" json:"reportCounter,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapReportCounter) Reset()                    { *m = MapReportCounter{} }
func (m *MapReportCounter) String() string            { return proto.CompactTextString(m) }
func (*MapReportCounter) ProtoMessage()               {}
func (*MapReportCounter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *MapReportCounter) GetReportCounter() map[string]*ReportCounter {
	if m != nil {
		return m.ReportCounter
	}
	return nil
}

type UpdateStatusByReporterParam struct {
	ReportedBy string `protobuf:"bytes,1,opt,name=reportedBy" json:"reportedBy,omitempty"`
	OldStatus  string `protobuf:"bytes,2,opt,name=oldStatus" json:"oldStatus,omitempty"`
	NewStatus  string `protobuf:"bytes,3,opt,name=newStatus" json:"newStatus,omitempty"`
}

func (m *UpdateStatusByReporterParam) Reset()                    { *m = UpdateStatusByReporterParam{} }
func (m *UpdateStatusByReporterParam) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusByReporterParam) ProtoMessage()               {}
func (*UpdateStatusByReporterParam) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *UpdateStatusByReporterParam) GetReportedBy() string {
	if m != nil {
		return m.ReportedBy
	}
	return ""
}

func (m *UpdateStatusByReporterParam) GetOldStatus() string {
	if m != nil {
		return m.OldStatus
	}
	return ""
}

func (m *UpdateStatusByReporterParam) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

type DeleteByCountentParam struct {
	ContentId   string `protobuf:"bytes,1,opt,name=contentId" json:"contentId,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=contentType" json:"contentType,omitempty"`
}

func (m *DeleteByCountentParam) Reset()                    { *m = DeleteByCountentParam{} }
func (m *DeleteByCountentParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteByCountentParam) ProtoMessage()               {}
func (*DeleteByCountentParam) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *DeleteByCountentParam) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *DeleteByCountentParam) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func init() {
	proto.RegisterType((*ReportsParam)(nil), "feedback.ReportsParam")
	proto.RegisterType((*ReportReply)(nil), "feedback.ReportReply")
	proto.RegisterType((*ReportUserIdParam)(nil), "feedback.ReportUserIdParam")
	proto.RegisterType((*CountersByReportersParam)(nil), "feedback.CountersByReportersParam")
	proto.RegisterType((*ReportIdParam)(nil), "feedback.ReportIdParam")
	proto.RegisterType((*MapReportCounter)(nil), "feedback.MapReportCounter")
	proto.RegisterType((*UpdateStatusByReporterParam)(nil), "feedback.UpdateStatusByReporterParam")
	proto.RegisterType((*DeleteByCountentParam)(nil), "feedback.DeleteByCountentParam")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ReportService service

type ReportServiceClient interface {
	InsertReports(ctx context.Context, in *ReportsParam, opts ...grpc.CallOption) (*ReportReply, error)
	FindReportsByUserId(ctx context.Context, in *ReportUserIdParam, opts ...grpc.CallOption) (*ReportReply, error)
	FindReportedTypeByUserId(ctx context.Context, in *ReportUserIdParam, opts ...grpc.CallOption) (*common.StringValueArray, error)
	FindReportPicturesById(ctx context.Context, in *ReportIdParam, opts ...grpc.CallOption) (*common.StringValueArray, error)
	FindByReporterUserId(ctx context.Context, in *ReportUserIdParam, opts ...grpc.CallOption) (*ReportReply, error)
	CountersByReporters(ctx context.Context, in *CountersByReportersParam, opts ...grpc.CallOption) (*MapReportCounter, error)
	UpdateStatusByReporter(ctx context.Context, in *UpdateStatusByReporterParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	DeleteReportById(ctx context.Context, in *ReportIdParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	DeleteByCountent(ctx context.Context, in *DeleteByCountentParam, opts ...grpc.CallOption) (*common.BoolValue, error)
}

type reportServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportServiceClient(cc *grpc.ClientConn) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) InsertReports(ctx context.Context, in *ReportsParam, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := grpc.Invoke(ctx, "/feedback.ReportService/InsertReports", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) FindReportsByUserId(ctx context.Context, in *ReportUserIdParam, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := grpc.Invoke(ctx, "/feedback.ReportService/FindReportsByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) FindReportedTypeByUserId(ctx context.Context, in *ReportUserIdParam, opts ...grpc.CallOption) (*common.StringValueArray, error) {
	out := new(common.StringValueArray)
	err := grpc.Invoke(ctx, "/feedback.ReportService/FindReportedTypeByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) FindReportPicturesById(ctx context.Context, in *ReportIdParam, opts ...grpc.CallOption) (*common.StringValueArray, error) {
	out := new(common.StringValueArray)
	err := grpc.Invoke(ctx, "/feedback.ReportService/FindReportPicturesById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) FindByReporterUserId(ctx context.Context, in *ReportUserIdParam, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := grpc.Invoke(ctx, "/feedback.ReportService/FindByReporterUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) CountersByReporters(ctx context.Context, in *CountersByReportersParam, opts ...grpc.CallOption) (*MapReportCounter, error) {
	out := new(MapReportCounter)
	err := grpc.Invoke(ctx, "/feedback.ReportService/CountersByReporters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) UpdateStatusByReporter(ctx context.Context, in *UpdateStatusByReporterParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/feedback.ReportService/UpdateStatusByReporter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) DeleteReportById(ctx context.Context, in *ReportIdParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/feedback.ReportService/DeleteReportById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) DeleteByCountent(ctx context.Context, in *DeleteByCountentParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/feedback.ReportService/DeleteByCountent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReportService service

type ReportServiceServer interface {
	InsertReports(context.Context, *ReportsParam) (*ReportReply, error)
	FindReportsByUserId(context.Context, *ReportUserIdParam) (*ReportReply, error)
	FindReportedTypeByUserId(context.Context, *ReportUserIdParam) (*common.StringValueArray, error)
	FindReportPicturesById(context.Context, *ReportIdParam) (*common.StringValueArray, error)
	FindByReporterUserId(context.Context, *ReportUserIdParam) (*ReportReply, error)
	CountersByReporters(context.Context, *CountersByReportersParam) (*MapReportCounter, error)
	UpdateStatusByReporter(context.Context, *UpdateStatusByReporterParam) (*common.BoolValue, error)
	DeleteReportById(context.Context, *ReportIdParam) (*common.BoolValue, error)
	DeleteByCountent(context.Context, *DeleteByCountentParam) (*common.BoolValue, error)
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_InsertReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).InsertReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/InsertReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).InsertReports(ctx, req.(*ReportsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_FindReportsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUserIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).FindReportsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/FindReportsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).FindReportsByUserId(ctx, req.(*ReportUserIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_FindReportedTypeByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUserIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).FindReportedTypeByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/FindReportedTypeByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).FindReportedTypeByUserId(ctx, req.(*ReportUserIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_FindReportPicturesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).FindReportPicturesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/FindReportPicturesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).FindReportPicturesById(ctx, req.(*ReportIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_FindByReporterUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUserIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).FindByReporterUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/FindByReporterUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).FindByReporterUserId(ctx, req.(*ReportUserIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_CountersByReporters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountersByReportersParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).CountersByReporters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/CountersByReporters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).CountersByReporters(ctx, req.(*CountersByReportersParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_UpdateStatusByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusByReporterParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).UpdateStatusByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/UpdateStatusByReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).UpdateStatusByReporter(ctx, req.(*UpdateStatusByReporterParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_DeleteReportById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).DeleteReportById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/DeleteReportById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).DeleteReportById(ctx, req.(*ReportIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_DeleteByCountent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByCountentParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).DeleteByCountent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedback.ReportService/DeleteByCountent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).DeleteByCountent(ctx, req.(*DeleteByCountentParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feedback.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertReports",
			Handler:    _ReportService_InsertReports_Handler,
		},
		{
			MethodName: "FindReportsByUserId",
			Handler:    _ReportService_FindReportsByUserId_Handler,
		},
		{
			MethodName: "FindReportedTypeByUserId",
			Handler:    _ReportService_FindReportedTypeByUserId_Handler,
		},
		{
			MethodName: "FindReportPicturesById",
			Handler:    _ReportService_FindReportPicturesById_Handler,
		},
		{
			MethodName: "FindByReporterUserId",
			Handler:    _ReportService_FindByReporterUserId_Handler,
		},
		{
			MethodName: "CountersByReporters",
			Handler:    _ReportService_CountersByReporters_Handler,
		},
		{
			MethodName: "UpdateStatusByReporter",
			Handler:    _ReportService_UpdateStatusByReporter_Handler,
		},
		{
			MethodName: "DeleteReportById",
			Handler:    _ReportService_DeleteReportById_Handler,
		},
		{
			MethodName: "DeleteByCountent",
			Handler:    _ReportService_DeleteByCountent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedback/report.service.proto",
}

func init() { proto.RegisterFile("feedback/report.service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdf, 0x6b, 0xd4, 0x40,
	0x10, 0x26, 0x57, 0x5a, 0xbd, 0x39, 0x2b, 0xd7, 0xad, 0x77, 0x86, 0xb4, 0xda, 0x23, 0x20, 0x1c,
	0xc8, 0x25, 0x58, 0x8b, 0x16, 0x1f, 0x0a, 0x46, 0x2d, 0x9c, 0x22, 0xd4, 0x9c, 0xa7, 0xe8, 0xdb,
	0x5e, 0x32, 0x5e, 0x43, 0x73, 0xbb, 0x61, 0xb3, 0x69, 0xc9, 0x9f, 0xe6, 0xab, 0x7f, 0x99, 0x24,
	0xbb, 0x69, 0xae, 0xf7, 0xa3, 0x2a, 0xbe, 0x65, 0x66, 0xbe, 0xef, 0x9b, 0x99, 0xdd, 0x6f, 0x03,
	0x8f, 0x7e, 0x20, 0x86, 0x13, 0x1a, 0x5c, 0xb8, 0x02, 0x13, 0x2e, 0xa4, 0x93, 0xa2, 0xb8, 0x8c,
	0x02, 0x74, 0x12, 0xc1, 0x25, 0x27, 0x77, 0xab, 0xb2, 0xd5, 0x59, 0x04, 0x96, 0x00, 0xab, 0x13,
	0xf0, 0xd9, 0x8c, 0x33, 0xf7, 0x4a, 0xd0, 0x24, 0x41, 0x91, 0xaa, 0xb4, 0x7d, 0x0c, 0xf7, 0xfc,
	0x12, 0x96, 0x9e, 0x51, 0x41, 0x67, 0xa4, 0x0f, 0x5b, 0x8a, 0x66, 0x1a, 0xbd, 0x8d, 0x7e, 0xeb,
	0xb0, 0xed, 0x54, 0x72, 0x8e, 0xc2, 0xf9, 0xba, 0x6e, 0xbf, 0x84, 0x96, 0xce, 0x60, 0x12, 0xe7,
	0xff, 0x40, 0x7c, 0x0a, 0x3b, 0x2a, 0x33, 0x4e, 0x51, 0x0c, 0x43, 0xd5, 0xb7, 0x0b, 0x5b, 0x59,
	0x19, 0x9a, 0x46, 0xcf, 0xe8, 0x37, 0x7d, 0x1d, 0xd9, 0x47, 0x60, 0xbe, 0xe1, 0x19, 0x93, 0x28,
	0x52, 0x2f, 0x57, 0x34, 0x14, 0x7a, 0x56, 0x13, 0xee, 0x28, 0x54, 0x5a, 0xf6, 0x6c, 0xfa, 0x55,
	0x68, 0x1f, 0xc0, 0xb6, 0xc2, 0x56, 0xf2, 0xf7, 0xa1, 0x11, 0x55, 0xd2, 0x8d, 0x28, 0xb4, 0x7f,
	0x19, 0xd0, 0xfe, 0x48, 0x13, 0x05, 0xd2, 0x0d, 0xc8, 0x08, 0xb6, 0xc5, 0x7c, 0x42, 0x6f, 0x32,
	0xa8, 0x37, 0x59, 0xa4, 0x38, 0x37, 0xa2, 0x77, 0x4c, 0x8a, 0xdc, 0xbf, 0xa9, 0x61, 0x7d, 0x03,
	0xb2, 0x0c, 0x22, 0x6d, 0xd8, 0xb8, 0xc0, 0x5c, 0x0f, 0x54, 0x7c, 0x92, 0x01, 0x6c, 0x5e, 0xd2,
	0x38, 0x43, 0xb3, 0xd1, 0x33, 0xfa, 0xad, 0xc3, 0x87, 0x8b, 0xc7, 0xa7, 0xe9, 0xbe, 0x42, 0xbd,
	0x6a, 0x1c, 0x1b, 0x76, 0x0e, 0x7b, 0xe3, 0x24, 0xa4, 0x12, 0x47, 0x92, 0xca, 0x6c, 0xee, 0x7c,
	0xd4, 0xce, 0x8f, 0x01, 0xd4, 0x28, 0x18, 0x7a, 0x55, 0xab, 0xb9, 0x0c, 0xd9, 0x87, 0x26, 0x8f,
	0x43, 0xc5, 0x2d, 0xbb, 0x36, 0xfd, 0x3a, 0x51, 0x54, 0x19, 0x5e, 0xe9, 0xea, 0x86, 0xaa, 0x5e,
	0x27, 0xec, 0xaf, 0xd0, 0x79, 0x8b, 0x31, 0x4a, 0xf4, 0x72, 0x35, 0x18, 0x93, 0xaa, 0xe9, 0x3e,
	0x34, 0x03, 0x5e, 0xc6, 0xd7, 0x57, 0x59, 0x27, 0x48, 0x0f, 0x5a, 0x3a, 0xf8, 0x9c, 0x27, 0xa8,
	0x9b, 0xce, 0xa7, 0x0e, 0x7f, 0x6e, 0x56, 0x57, 0x37, 0x52, 0xfe, 0x26, 0x27, 0xb0, 0x3d, 0x64,
	0x29, 0x96, 0x3e, 0x2b, 0x7c, 0x4a, 0xba, 0x8b, 0x47, 0xa3, 0xec, 0x60, 0x75, 0x96, 0x1c, 0x57,
	0x1a, 0x73, 0x08, 0xbb, 0xa7, 0x11, 0x0b, 0x35, 0xd4, 0xcb, 0x95, 0xeb, 0xc8, 0xde, 0x22, 0x7a,
	0xce, 0x8d, 0xeb, 0xa4, 0x3e, 0x81, 0x59, 0x4b, 0x61, 0x58, 0x0c, 0xfc, 0x77, 0x7a, 0xa6, 0xa3,
	0x5e, 0x9f, 0x33, 0x92, 0x22, 0x62, 0xd3, 0x2f, 0xc5, 0x15, 0xbe, 0x16, 0x82, 0xe6, 0xe4, 0x03,
	0x74, 0x6b, 0xc9, 0xb3, 0x28, 0x90, 0x99, 0xc0, 0xd4, 0xcb, 0x87, 0x21, 0x59, 0x72, 0xc0, 0x9f,
	0xc5, 0xde, 0xc3, 0x83, 0x42, 0xac, 0x36, 0xc2, 0x7f, 0xec, 0x3a, 0x86, 0xdd, 0x15, 0x0f, 0x8f,
	0xd8, 0x35, 0x7a, 0xdd, 0xbb, 0xb4, 0xac, 0xf5, 0x0f, 0x86, 0xf8, 0xd0, 0x5d, 0xed, 0x59, 0xf2,
	0xa4, 0x66, 0xdd, 0xe2, 0x6a, 0x6b, 0xa7, 0xda, 0xde, 0xe3, 0x3c, 0x2e, 0x77, 0x27, 0x27, 0xd0,
	0x56, 0x66, 0x54, 0xc8, 0xdb, 0x4f, 0x6f, 0x05, 0xff, 0xb4, 0xe2, 0xd7, 0x66, 0x26, 0x07, 0x35,
	0x7f, 0xa5, 0xd1, 0x57, 0xe8, 0x78, 0x2f, 0xbe, 0x1f, 0x4d, 0x23, 0x79, 0x9e, 0x4d, 0x8a, 0x92,
	0x9b, 0x3c, 0x0b, 0x98, 0x2b, 0x29, 0x93, 0x94, 0x0d, 0x42, 0x3e, 0xa3, 0x11, 0x1b, 0xa4, 0xc1,
	0x39, 0xce, 0xa8, 0x3b, 0xe5, 0x31, 0x65, 0x53, 0xb7, 0x6a, 0x30, 0xd9, 0x2a, 0x7f, 0xc5, 0xcf,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x59, 0x0b, 0x25, 0xb8, 0xe3, 0x05, 0x00, 0x00,
}
