// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.service.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FindUserByIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *FindUserByIDRequest) Reset()                    { *m = FindUserByIDRequest{} }
func (m *FindUserByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*FindUserByIDRequest) ProtoMessage()               {}
func (*FindUserByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *FindUserByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UserReply struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserReply) Reset()                    { *m = UserReply{} }
func (m *UserReply) String() string            { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()               {}
func (*UserReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *UserReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type FindUsersByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *FindUsersByIDsRequest) Reset()                    { *m = FindUsersByIDsRequest{} }
func (m *FindUsersByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindUsersByIDsRequest) ProtoMessage()               {}
func (*FindUsersByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *FindUsersByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UsersReply struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersReply) Reset()                    { *m = UsersReply{} }
func (m *UsersReply) String() string            { return proto.CompactTextString(m) }
func (*UsersReply) ProtoMessage()               {}
func (*UsersReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *UsersReply) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type FindUserActivitiesByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *FindUserActivitiesByIDsRequest) Reset()                    { *m = FindUserActivitiesByIDsRequest{} }
func (m *FindUserActivitiesByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindUserActivitiesByIDsRequest) ProtoMessage()               {}
func (*FindUserActivitiesByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *FindUserActivitiesByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UserActivitiesReply struct {
	Activities []*UserActivity `protobuf:"bytes,1,rep,name=activities" json:"activities,omitempty"`
}

func (m *UserActivitiesReply) Reset()                    { *m = UserActivitiesReply{} }
func (m *UserActivitiesReply) String() string            { return proto.CompactTextString(m) }
func (*UserActivitiesReply) ProtoMessage()               {}
func (*UserActivitiesReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *UserActivitiesReply) GetActivities() []*UserActivity {
	if m != nil {
		return m.Activities
	}
	return nil
}

type InsertUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *InsertUserRequest) Reset()                    { *m = InsertUserRequest{} }
func (m *InsertUserRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertUserRequest) ProtoMessage()               {}
func (*InsertUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

func (m *InsertUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateUserProfileMediasRequest struct {
	UserID string          `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Medias []*common.Media `protobuf:"bytes,2,rep,name=medias" json:"medias,omitempty"`
}

func (m *UpdateUserProfileMediasRequest) Reset()                    { *m = UpdateUserProfileMediasRequest{} }
func (m *UpdateUserProfileMediasRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserProfileMediasRequest) ProtoMessage()               {}
func (*UpdateUserProfileMediasRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

func (m *UpdateUserProfileMediasRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateUserProfileMediasRequest) GetMedias() []*common.Media {
	if m != nil {
		return m.Medias
	}
	return nil
}

type UpdateUserProfileMediasReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *UpdateUserProfileMediasReply) Reset()                    { *m = UpdateUserProfileMediasReply{} }
func (m *UpdateUserProfileMediasReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserProfileMediasReply) ProtoMessage()               {}
func (*UpdateUserProfileMediasReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

func (m *UpdateUserProfileMediasReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

func (m *UpdateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ResetPhoneRequest struct {
	UserID       string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	CountryCode  int32  `protobuf:"varint,2,opt,name=countryCode" json:"countryCode,omitempty"`
	MobileNumber string `protobuf:"bytes,3,opt,name=mobileNumber" json:"mobileNumber,omitempty"`
}

func (m *ResetPhoneRequest) Reset()                    { *m = ResetPhoneRequest{} }
func (m *ResetPhoneRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPhoneRequest) ProtoMessage()               {}
func (*ResetPhoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{10} }

func (m *ResetPhoneRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ResetPhoneRequest) GetCountryCode() int32 {
	if m != nil {
		return m.CountryCode
	}
	return 0
}

func (m *ResetPhoneRequest) GetMobileNumber() string {
	if m != nil {
		return m.MobileNumber
	}
	return ""
}

type ResetPhoneReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ResetPhoneReply) Reset()                    { *m = ResetPhoneReply{} }
func (m *ResetPhoneReply) String() string            { return proto.CompactTextString(m) }
func (*ResetPhoneReply) ProtoMessage()               {}
func (*ResetPhoneReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{11} }

func (m *ResetPhoneReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ResetPasswordRequest struct {
	UserID   string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *ResetPasswordRequest) Reset()                    { *m = ResetPasswordRequest{} }
func (m *ResetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordRequest) ProtoMessage()               {}
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{12} }

func (m *ResetPasswordRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ResetPasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ResetPasswordReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ResetPasswordReply) Reset()                    { *m = ResetPasswordReply{} }
func (m *ResetPasswordReply) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordReply) ProtoMessage()               {}
func (*ResetPasswordReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{13} }

func (m *ResetPasswordReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpgradeMembershipRequest struct {
	UserID        string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	ExpireSeconds int32  `protobuf:"varint,3,opt,name=expireSeconds" json:"expireSeconds,omitempty"`
}

func (m *UpgradeMembershipRequest) Reset()                    { *m = UpgradeMembershipRequest{} }
func (m *UpgradeMembershipRequest) String() string            { return proto.CompactTextString(m) }
func (*UpgradeMembershipRequest) ProtoMessage()               {}
func (*UpgradeMembershipRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{14} }

func (m *UpgradeMembershipRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpgradeMembershipRequest) GetExpireSeconds() int32 {
	if m != nil {
		return m.ExpireSeconds
	}
	return 0
}

type UpgradeMembershipReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *UpgradeMembershipReply) Reset()                    { *m = UpgradeMembershipReply{} }
func (m *UpgradeMembershipReply) String() string            { return proto.CompactTextString(m) }
func (*UpgradeMembershipReply) ProtoMessage()               {}
func (*UpgradeMembershipReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{15} }

func (m *UpgradeMembershipReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RevokeMembershipRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *RevokeMembershipRequest) Reset()                    { *m = RevokeMembershipRequest{} }
func (m *RevokeMembershipRequest) String() string            { return proto.CompactTextString(m) }
func (*RevokeMembershipRequest) ProtoMessage()               {}
func (*RevokeMembershipRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{16} }

func (m *RevokeMembershipRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type RevokeMembershipReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RevokeMembershipReply) Reset()                    { *m = RevokeMembershipReply{} }
func (m *RevokeMembershipReply) String() string            { return proto.CompactTextString(m) }
func (*RevokeMembershipReply) ProtoMessage()               {}
func (*RevokeMembershipReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{17} }

func (m *RevokeMembershipReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BanUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *BanUserRequest) Reset()                    { *m = BanUserRequest{} }
func (m *BanUserRequest) String() string            { return proto.CompactTextString(m) }
func (*BanUserRequest) ProtoMessage()               {}
func (*BanUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{18} }

func (m *BanUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type BanUserReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *BanUserReply) Reset()                    { *m = BanUserReply{} }
func (m *BanUserReply) String() string            { return proto.CompactTextString(m) }
func (*BanUserReply) ProtoMessage()               {}
func (*BanUserReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{19} }

func (m *BanUserReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type HiddenUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *HiddenUserRequest) Reset()                    { *m = HiddenUserRequest{} }
func (m *HiddenUserRequest) String() string            { return proto.CompactTextString(m) }
func (*HiddenUserRequest) ProtoMessage()               {}
func (*HiddenUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{20} }

func (m *HiddenUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type HiddenUserReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *HiddenUserReply) Reset()                    { *m = HiddenUserReply{} }
func (m *HiddenUserReply) String() string            { return proto.CompactTextString(m) }
func (*HiddenUserReply) ProtoMessage()               {}
func (*HiddenUserReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{21} }

func (m *HiddenUserReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type InappropriateUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *InappropriateUserRequest) Reset()                    { *m = InappropriateUserRequest{} }
func (m *InappropriateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*InappropriateUserRequest) ProtoMessage()               {}
func (*InappropriateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{22} }

func (m *InappropriateUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type InappropriateUserReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *InappropriateUserReply) Reset()                    { *m = InappropriateUserReply{} }
func (m *InappropriateUserReply) String() string            { return proto.CompactTextString(m) }
func (*InappropriateUserReply) ProtoMessage()               {}
func (*InappropriateUserReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{23} }

func (m *InappropriateUserReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PassUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *PassUserRequest) Reset()                    { *m = PassUserRequest{} }
func (m *PassUserRequest) String() string            { return proto.CompactTextString(m) }
func (*PassUserRequest) ProtoMessage()               {}
func (*PassUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{24} }

func (m *PassUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type PassUserReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *PassUserReply) Reset()                    { *m = PassUserReply{} }
func (m *PassUserReply) String() string            { return proto.CompactTextString(m) }
func (*PassUserReply) ProtoMessage()               {}
func (*PassUserReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{25} }

func (m *PassUserReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type InActivateUsersByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *InActivateUsersByIDsRequest) Reset()                    { *m = InActivateUsersByIDsRequest{} }
func (m *InActivateUsersByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*InActivateUsersByIDsRequest) ProtoMessage()               {}
func (*InActivateUsersByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{26} }

func (m *InActivateUsersByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type InActivateUsersByIDsReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *InActivateUsersByIDsReply) Reset()                    { *m = InActivateUsersByIDsReply{} }
func (m *InActivateUsersByIDsReply) String() string            { return proto.CompactTextString(m) }
func (*InActivateUsersByIDsReply) ProtoMessage()               {}
func (*InActivateUsersByIDsReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{27} }

func (m *InActivateUsersByIDsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ActivateUsersByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *ActivateUsersByIDsRequest) Reset()                    { *m = ActivateUsersByIDsRequest{} }
func (m *ActivateUsersByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateUsersByIDsRequest) ProtoMessage()               {}
func (*ActivateUsersByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{28} }

func (m *ActivateUsersByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ActivateUsersByIDsReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ActivateUsersByIDsReply) Reset()                    { *m = ActivateUsersByIDsReply{} }
func (m *ActivateUsersByIDsReply) String() string            { return proto.CompactTextString(m) }
func (*ActivateUsersByIDsReply) ProtoMessage()               {}
func (*ActivateUsersByIDsReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{29} }

func (m *ActivateUsersByIDsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateUserActivityRequest struct {
	Activity *UserActivity `protobuf:"bytes,1,opt,name=activity" json:"activity,omitempty"`
}

func (m *UpdateUserActivityRequest) Reset()                    { *m = UpdateUserActivityRequest{} }
func (m *UpdateUserActivityRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserActivityRequest) ProtoMessage()               {}
func (*UpdateUserActivityRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{30} }

func (m *UpdateUserActivityRequest) GetActivity() *UserActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

type UpdateUserActivityReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *UpdateUserActivityReply) Reset()                    { *m = UpdateUserActivityReply{} }
func (m *UpdateUserActivityReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserActivityReply) ProtoMessage()               {}
func (*UpdateUserActivityReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{31} }

func (m *UpdateUserActivityReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SelectUserMobileWithCountryCodeRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Mobile string `protobuf:"bytes,2,opt,name=mobile" json:"mobile,omitempty"`
}

func (m *SelectUserMobileWithCountryCodeRequest) Reset() {
	*m = SelectUserMobileWithCountryCodeRequest{}
}
func (m *SelectUserMobileWithCountryCodeRequest) String() string { return proto.CompactTextString(m) }
func (*SelectUserMobileWithCountryCodeRequest) ProtoMessage()    {}
func (*SelectUserMobileWithCountryCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{32}
}

func (m *SelectUserMobileWithCountryCodeRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SelectUserMobileWithCountryCodeRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

type ApproveUserProfileMediasRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *ApproveUserProfileMediasRequest) Reset()         { *m = ApproveUserProfileMediasRequest{} }
func (m *ApproveUserProfileMediasRequest) String() string { return proto.CompactTextString(m) }
func (*ApproveUserProfileMediasRequest) ProtoMessage()    {}
func (*ApproveUserProfileMediasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{33}
}

func (m *ApproveUserProfileMediasRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type ApproveUserProfileMediasReply struct {
	Medias []*common.Media `protobuf:"bytes,1,rep,name=medias" json:"medias,omitempty"`
}

func (m *ApproveUserProfileMediasReply) Reset()                    { *m = ApproveUserProfileMediasReply{} }
func (m *ApproveUserProfileMediasReply) String() string            { return proto.CompactTextString(m) }
func (*ApproveUserProfileMediasReply) ProtoMessage()               {}
func (*ApproveUserProfileMediasReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{34} }

func (m *ApproveUserProfileMediasReply) GetMedias() []*common.Media {
	if m != nil {
		return m.Medias
	}
	return nil
}

type UpdateUserStatusRequest struct {
	UserID    string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	NewStatus string `protobuf:"bytes,3,opt,name=newStatus" json:"newStatus,omitempty"`
	OldStatus string `protobuf:"bytes,2,opt,name=oldStatus" json:"oldStatus,omitempty"`
	Checked   bool   `protobuf:"varint,4,opt,name=checked" json:"checked,omitempty"`
}

func (m *UpdateUserStatusRequest) Reset()                    { *m = UpdateUserStatusRequest{} }
func (m *UpdateUserStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserStatusRequest) ProtoMessage()               {}
func (*UpdateUserStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{35} }

func (m *UpdateUserStatusRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateUserStatusRequest) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *UpdateUserStatusRequest) GetOldStatus() string {
	if m != nil {
		return m.OldStatus
	}
	return ""
}

func (m *UpdateUserStatusRequest) GetChecked() bool {
	if m != nil {
		return m.Checked
	}
	return false
}

type ChangeUserGenderRequest struct {
	UserID string         `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Gender UserGenderEnum `protobuf:"varint,2,opt,name=gender,enum=user.UserGenderEnum" json:"gender,omitempty"`
}

func (m *ChangeUserGenderRequest) Reset()                    { *m = ChangeUserGenderRequest{} }
func (m *ChangeUserGenderRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeUserGenderRequest) ProtoMessage()               {}
func (*ChangeUserGenderRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{36} }

func (m *ChangeUserGenderRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ChangeUserGenderRequest) GetGender() UserGenderEnum {
	if m != nil {
		return m.Gender
	}
	return UserGenderEnum_male
}

type DeleteUserProfileMediasRequest struct {
	UserID   string   `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	MediaIDs []string `protobuf:"bytes,2,rep,name=mediaIDs" json:"mediaIDs,omitempty"`
}

func (m *DeleteUserProfileMediasRequest) Reset()         { *m = DeleteUserProfileMediasRequest{} }
func (m *DeleteUserProfileMediasRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteUserProfileMediasRequest) ProtoMessage()    {}
func (*DeleteUserProfileMediasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{37}
}

func (m *DeleteUserProfileMediasRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *DeleteUserProfileMediasRequest) GetMediaIDs() []string {
	if m != nil {
		return m.MediaIDs
	}
	return nil
}

type EmptyReply struct {
}

func (m *EmptyReply) Reset()                    { *m = EmptyReply{} }
func (m *EmptyReply) String() string            { return proto.CompactTextString(m) }
func (*EmptyReply) ProtoMessage()               {}
func (*EmptyReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{38} }

func init() {
	proto.RegisterType((*FindUserByIDRequest)(nil), "user.FindUserByIDRequest")
	proto.RegisterType((*UserReply)(nil), "user.UserReply")
	proto.RegisterType((*FindUsersByIDsRequest)(nil), "user.FindUsersByIDsRequest")
	proto.RegisterType((*UsersReply)(nil), "user.UsersReply")
	proto.RegisterType((*FindUserActivitiesByIDsRequest)(nil), "user.FindUserActivitiesByIDsRequest")
	proto.RegisterType((*UserActivitiesReply)(nil), "user.UserActivitiesReply")
	proto.RegisterType((*InsertUserRequest)(nil), "user.InsertUserRequest")
	proto.RegisterType((*UpdateUserProfileMediasRequest)(nil), "user.UpdateUserProfileMediasRequest")
	proto.RegisterType((*UpdateUserProfileMediasReply)(nil), "user.UpdateUserProfileMediasReply")
	proto.RegisterType((*UpdateUserRequest)(nil), "user.UpdateUserRequest")
	proto.RegisterType((*ResetPhoneRequest)(nil), "user.ResetPhoneRequest")
	proto.RegisterType((*ResetPhoneReply)(nil), "user.ResetPhoneReply")
	proto.RegisterType((*ResetPasswordRequest)(nil), "user.ResetPasswordRequest")
	proto.RegisterType((*ResetPasswordReply)(nil), "user.ResetPasswordReply")
	proto.RegisterType((*UpgradeMembershipRequest)(nil), "user.UpgradeMembershipRequest")
	proto.RegisterType((*UpgradeMembershipReply)(nil), "user.UpgradeMembershipReply")
	proto.RegisterType((*RevokeMembershipRequest)(nil), "user.RevokeMembershipRequest")
	proto.RegisterType((*RevokeMembershipReply)(nil), "user.RevokeMembershipReply")
	proto.RegisterType((*BanUserRequest)(nil), "user.BanUserRequest")
	proto.RegisterType((*BanUserReply)(nil), "user.BanUserReply")
	proto.RegisterType((*HiddenUserRequest)(nil), "user.HiddenUserRequest")
	proto.RegisterType((*HiddenUserReply)(nil), "user.HiddenUserReply")
	proto.RegisterType((*InappropriateUserRequest)(nil), "user.InappropriateUserRequest")
	proto.RegisterType((*InappropriateUserReply)(nil), "user.InappropriateUserReply")
	proto.RegisterType((*PassUserRequest)(nil), "user.PassUserRequest")
	proto.RegisterType((*PassUserReply)(nil), "user.PassUserReply")
	proto.RegisterType((*InActivateUsersByIDsRequest)(nil), "user.InActivateUsersByIDsRequest")
	proto.RegisterType((*InActivateUsersByIDsReply)(nil), "user.InActivateUsersByIDsReply")
	proto.RegisterType((*ActivateUsersByIDsRequest)(nil), "user.ActivateUsersByIDsRequest")
	proto.RegisterType((*ActivateUsersByIDsReply)(nil), "user.ActivateUsersByIDsReply")
	proto.RegisterType((*UpdateUserActivityRequest)(nil), "user.UpdateUserActivityRequest")
	proto.RegisterType((*UpdateUserActivityReply)(nil), "user.UpdateUserActivityReply")
	proto.RegisterType((*SelectUserMobileWithCountryCodeRequest)(nil), "user.SelectUserMobileWithCountryCodeRequest")
	proto.RegisterType((*ApproveUserProfileMediasRequest)(nil), "user.ApproveUserProfileMediasRequest")
	proto.RegisterType((*ApproveUserProfileMediasReply)(nil), "user.ApproveUserProfileMediasReply")
	proto.RegisterType((*UpdateUserStatusRequest)(nil), "user.UpdateUserStatusRequest")
	proto.RegisterType((*ChangeUserGenderRequest)(nil), "user.ChangeUserGenderRequest")
	proto.RegisterType((*DeleteUserProfileMediasRequest)(nil), "user.DeleteUserProfileMediasRequest")
	proto.RegisterType((*EmptyReply)(nil), "user.EmptyReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	// 根据用户ID获取单个用户信息
	FindUserByID(ctx context.Context, in *FindUserByIDRequest, opts ...grpc.CallOption) (*UserReply, error)
	// 根据用户ID获取单个用户信息,不返回profile信息
	FindUserByIDWithoutProfile(ctx context.Context, in *FindUserByIDRequest, opts ...grpc.CallOption) (*UserReply, error)
	// 根据用户IDs批量获取用户信息
	FindUsersByIDs(ctx context.Context, in *FindUsersByIDsRequest, opts ...grpc.CallOption) (*UsersReply, error)
	// 创建一个新用户
	InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*UserReply, error)
	// 更新用户资料图片
	UpdateUserProfileMedias(ctx context.Context, in *UpdateUserProfileMediasRequest, opts ...grpc.CallOption) (*UpdateUserProfileMediasReply, error)
	// 审核用户资料图片
	ApproveUserProfileMedias(ctx context.Context, in *ApproveUserProfileMediasRequest, opts ...grpc.CallOption) (*ApproveUserProfileMediasReply, error)
	// 更新用户信息
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserReply, error)
	// 修改手机号
	ResetPhone(ctx context.Context, in *ResetPhoneRequest, opts ...grpc.CallOption) (*ResetPhoneReply, error)
	// 修改密码
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error)
	// 升级用户为会员
	UpgradeMembership(ctx context.Context, in *UpgradeMembershipRequest, opts ...grpc.CallOption) (*UpgradeMembershipReply, error)
	// 撤销用户的会员
	RevokeMembership(ctx context.Context, in *RevokeMembershipRequest, opts ...grpc.CallOption) (*RevokeMembershipReply, error)
	// 封禁用户
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserReply, error)
	// fake用户
	HiddenUser(ctx context.Context, in *HiddenUserRequest, opts ...grpc.CallOption) (*HiddenUserReply, error)
	// ugly用户
	InappropriateUser(ctx context.Context, in *InappropriateUserRequest, opts ...grpc.CallOption) (*InappropriateUserReply, error)
	// 审核通过
	PassUser(ctx context.Context, in *PassUserRequest, opts ...grpc.CallOption) (*PassUserReply, error)
	// 注销用户
	InActivateUsersByIDs(ctx context.Context, in *InActivateUsersByIDsRequest, opts ...grpc.CallOption) (*InActivateUsersByIDsReply, error)
	// 激活用户
	ActivateUsersByIDs(ctx context.Context, in *ActivateUsersByIDsRequest, opts ...grpc.CallOption) (*ActivateUsersByIDsReply, error)
	// 更新用户的活跃信息
	UpdateUserActivity(ctx context.Context, in *UpdateUserActivityRequest, opts ...grpc.CallOption) (*UpdateUserActivityReply, error)
	// 获取用户的完整手机号（包含国家编码，此方法比较鸡肋，后面考虑去掉）
	SelectUserMobileWithCountryCode(ctx context.Context, in *SelectUserMobileWithCountryCodeRequest, opts ...grpc.CallOption) (*Mobile, error)
	// 更新用户状态
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 更改用户性别
	ChangeUserGender(ctx context.Context, in *ChangeUserGenderRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 删除用户头像
	DeleteUserProfileMedias(ctx context.Context, in *DeleteUserProfileMediasRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) FindUserByID(ctx context.Context, in *FindUserByIDRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := grpc.Invoke(ctx, "/user.UserService/FindUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUserByIDWithoutProfile(ctx context.Context, in *FindUserByIDRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := grpc.Invoke(ctx, "/user.UserService/FindUserByIDWithoutProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUsersByIDs(ctx context.Context, in *FindUsersByIDsRequest, opts ...grpc.CallOption) (*UsersReply, error) {
	out := new(UsersReply)
	err := grpc.Invoke(ctx, "/user.UserService/FindUsersByIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := grpc.Invoke(ctx, "/user.UserService/InsertUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfileMedias(ctx context.Context, in *UpdateUserProfileMediasRequest, opts ...grpc.CallOption) (*UpdateUserProfileMediasReply, error) {
	out := new(UpdateUserProfileMediasReply)
	err := grpc.Invoke(ctx, "/user.UserService/UpdateUserProfileMedias", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ApproveUserProfileMedias(ctx context.Context, in *ApproveUserProfileMediasRequest, opts ...grpc.CallOption) (*ApproveUserProfileMediasReply, error) {
	out := new(ApproveUserProfileMediasReply)
	err := grpc.Invoke(ctx, "/user.UserService/ApproveUserProfileMedias", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := grpc.Invoke(ctx, "/user.UserService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPhone(ctx context.Context, in *ResetPhoneRequest, opts ...grpc.CallOption) (*ResetPhoneReply, error) {
	out := new(ResetPhoneReply)
	err := grpc.Invoke(ctx, "/user.UserService/ResetPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error) {
	out := new(ResetPasswordReply)
	err := grpc.Invoke(ctx, "/user.UserService/ResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpgradeMembership(ctx context.Context, in *UpgradeMembershipRequest, opts ...grpc.CallOption) (*UpgradeMembershipReply, error) {
	out := new(UpgradeMembershipReply)
	err := grpc.Invoke(ctx, "/user.UserService/UpgradeMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RevokeMembership(ctx context.Context, in *RevokeMembershipRequest, opts ...grpc.CallOption) (*RevokeMembershipReply, error) {
	out := new(RevokeMembershipReply)
	err := grpc.Invoke(ctx, "/user.UserService/RevokeMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserReply, error) {
	out := new(BanUserReply)
	err := grpc.Invoke(ctx, "/user.UserService/BanUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) HiddenUser(ctx context.Context, in *HiddenUserRequest, opts ...grpc.CallOption) (*HiddenUserReply, error) {
	out := new(HiddenUserReply)
	err := grpc.Invoke(ctx, "/user.UserService/HiddenUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) InappropriateUser(ctx context.Context, in *InappropriateUserRequest, opts ...grpc.CallOption) (*InappropriateUserReply, error) {
	out := new(InappropriateUserReply)
	err := grpc.Invoke(ctx, "/user.UserService/InappropriateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PassUser(ctx context.Context, in *PassUserRequest, opts ...grpc.CallOption) (*PassUserReply, error) {
	out := new(PassUserReply)
	err := grpc.Invoke(ctx, "/user.UserService/PassUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) InActivateUsersByIDs(ctx context.Context, in *InActivateUsersByIDsRequest, opts ...grpc.CallOption) (*InActivateUsersByIDsReply, error) {
	out := new(InActivateUsersByIDsReply)
	err := grpc.Invoke(ctx, "/user.UserService/InActivateUsersByIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ActivateUsersByIDs(ctx context.Context, in *ActivateUsersByIDsRequest, opts ...grpc.CallOption) (*ActivateUsersByIDsReply, error) {
	out := new(ActivateUsersByIDsReply)
	err := grpc.Invoke(ctx, "/user.UserService/ActivateUsersByIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserActivity(ctx context.Context, in *UpdateUserActivityRequest, opts ...grpc.CallOption) (*UpdateUserActivityReply, error) {
	out := new(UpdateUserActivityReply)
	err := grpc.Invoke(ctx, "/user.UserService/UpdateUserActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SelectUserMobileWithCountryCode(ctx context.Context, in *SelectUserMobileWithCountryCodeRequest, opts ...grpc.CallOption) (*Mobile, error) {
	out := new(Mobile)
	err := grpc.Invoke(ctx, "/user.UserService/SelectUserMobileWithCountryCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/user.UserService/UpdateUserStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserGender(ctx context.Context, in *ChangeUserGenderRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/user.UserService/ChangeUserGender", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserProfileMedias(ctx context.Context, in *DeleteUserProfileMediasRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/user.UserService/DeleteUserProfileMedias", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	// 根据用户ID获取单个用户信息
	FindUserByID(context.Context, *FindUserByIDRequest) (*UserReply, error)
	// 根据用户ID获取单个用户信息,不返回profile信息
	FindUserByIDWithoutProfile(context.Context, *FindUserByIDRequest) (*UserReply, error)
	// 根据用户IDs批量获取用户信息
	FindUsersByIDs(context.Context, *FindUsersByIDsRequest) (*UsersReply, error)
	// 创建一个新用户
	InsertUser(context.Context, *InsertUserRequest) (*UserReply, error)
	// 更新用户资料图片
	UpdateUserProfileMedias(context.Context, *UpdateUserProfileMediasRequest) (*UpdateUserProfileMediasReply, error)
	// 审核用户资料图片
	ApproveUserProfileMedias(context.Context, *ApproveUserProfileMediasRequest) (*ApproveUserProfileMediasReply, error)
	// 更新用户信息
	UpdateUser(context.Context, *UpdateUserRequest) (*UserReply, error)
	// 修改手机号
	ResetPhone(context.Context, *ResetPhoneRequest) (*ResetPhoneReply, error)
	// 修改密码
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error)
	// 升级用户为会员
	UpgradeMembership(context.Context, *UpgradeMembershipRequest) (*UpgradeMembershipReply, error)
	// 撤销用户的会员
	RevokeMembership(context.Context, *RevokeMembershipRequest) (*RevokeMembershipReply, error)
	// 封禁用户
	BanUser(context.Context, *BanUserRequest) (*BanUserReply, error)
	// fake用户
	HiddenUser(context.Context, *HiddenUserRequest) (*HiddenUserReply, error)
	// ugly用户
	InappropriateUser(context.Context, *InappropriateUserRequest) (*InappropriateUserReply, error)
	// 审核通过
	PassUser(context.Context, *PassUserRequest) (*PassUserReply, error)
	// 注销用户
	InActivateUsersByIDs(context.Context, *InActivateUsersByIDsRequest) (*InActivateUsersByIDsReply, error)
	// 激活用户
	ActivateUsersByIDs(context.Context, *ActivateUsersByIDsRequest) (*ActivateUsersByIDsReply, error)
	// 更新用户的活跃信息
	UpdateUserActivity(context.Context, *UpdateUserActivityRequest) (*UpdateUserActivityReply, error)
	// 获取用户的完整手机号（包含国家编码，此方法比较鸡肋，后面考虑去掉）
	SelectUserMobileWithCountryCode(context.Context, *SelectUserMobileWithCountryCodeRequest) (*Mobile, error)
	// 更新用户状态
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*EmptyReply, error)
	// 更改用户性别
	ChangeUserGender(context.Context, *ChangeUserGenderRequest) (*EmptyReply, error)
	// 删除用户头像
	DeleteUserProfileMedias(context.Context, *DeleteUserProfileMediasRequest) (*EmptyReply, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_FindUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/FindUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUserByID(ctx, req.(*FindUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindUserByIDWithoutProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUserByIDWithoutProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/FindUserByIDWithoutProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUserByIDWithoutProfile(ctx, req.(*FindUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUsersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/FindUsersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUsersByIDs(ctx, req.(*FindUsersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).InsertUser(ctx, req.(*InsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfileMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfileMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpdateUserProfileMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfileMedias(ctx, req.(*UpdateUserProfileMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ApproveUserProfileMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveUserProfileMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ApproveUserProfileMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ApproveUserProfileMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ApproveUserProfileMedias(ctx, req.(*ApproveUserProfileMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ResetPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPhone(ctx, req.(*ResetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpgradeMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpgradeMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpgradeMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpgradeMembership(ctx, req.(*UpgradeMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RevokeMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RevokeMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/RevokeMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RevokeMembership(ctx, req.(*RevokeMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_HiddenUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiddenUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).HiddenUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/HiddenUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).HiddenUser(ctx, req.(*HiddenUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_InappropriateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InappropriateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).InappropriateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/InappropriateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).InappropriateUser(ctx, req.(*InappropriateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PassUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PassUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/PassUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PassUser(ctx, req.(*PassUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_InActivateUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InActivateUsersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).InActivateUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/InActivateUsersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).InActivateUsersByIDs(ctx, req.(*InActivateUsersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ActivateUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateUsersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ActivateUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ActivateUsersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ActivateUsersByIDs(ctx, req.(*ActivateUsersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpdateUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserActivity(ctx, req.(*UpdateUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SelectUserMobileWithCountryCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserMobileWithCountryCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SelectUserMobileWithCountryCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/SelectUserMobileWithCountryCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SelectUserMobileWithCountryCode(ctx, req.(*SelectUserMobileWithCountryCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserGenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ChangeUserGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserGender(ctx, req.(*ChangeUserGenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserProfileMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserProfileMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserProfileMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/DeleteUserProfileMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserProfileMedias(ctx, req.(*DeleteUserProfileMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserByID",
			Handler:    _UserService_FindUserByID_Handler,
		},
		{
			MethodName: "FindUserByIDWithoutProfile",
			Handler:    _UserService_FindUserByIDWithoutProfile_Handler,
		},
		{
			MethodName: "FindUsersByIDs",
			Handler:    _UserService_FindUsersByIDs_Handler,
		},
		{
			MethodName: "InsertUser",
			Handler:    _UserService_InsertUser_Handler,
		},
		{
			MethodName: "UpdateUserProfileMedias",
			Handler:    _UserService_UpdateUserProfileMedias_Handler,
		},
		{
			MethodName: "ApproveUserProfileMedias",
			Handler:    _UserService_ApproveUserProfileMedias_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "ResetPhone",
			Handler:    _UserService_ResetPhone_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserService_ResetPassword_Handler,
		},
		{
			MethodName: "UpgradeMembership",
			Handler:    _UserService_UpgradeMembership_Handler,
		},
		{
			MethodName: "RevokeMembership",
			Handler:    _UserService_RevokeMembership_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _UserService_BanUser_Handler,
		},
		{
			MethodName: "HiddenUser",
			Handler:    _UserService_HiddenUser_Handler,
		},
		{
			MethodName: "InappropriateUser",
			Handler:    _UserService_InappropriateUser_Handler,
		},
		{
			MethodName: "PassUser",
			Handler:    _UserService_PassUser_Handler,
		},
		{
			MethodName: "InActivateUsersByIDs",
			Handler:    _UserService_InActivateUsersByIDs_Handler,
		},
		{
			MethodName: "ActivateUsersByIDs",
			Handler:    _UserService_ActivateUsersByIDs_Handler,
		},
		{
			MethodName: "UpdateUserActivity",
			Handler:    _UserService_UpdateUserActivity_Handler,
		},
		{
			MethodName: "SelectUserMobileWithCountryCode",
			Handler:    _UserService_SelectUserMobileWithCountryCode_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "ChangeUserGender",
			Handler:    _UserService_ChangeUserGender_Handler,
		},
		{
			MethodName: "DeleteUserProfileMedias",
			Handler:    _UserService_DeleteUserProfileMedias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.service.proto",
}

func init() { proto.RegisterFile("user/user.service.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 1155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xfd, 0x4f, 0xdb, 0x66,
	0x10, 0x56, 0xa0, 0xa4, 0xc9, 0x11, 0x08, 0xbc, 0x7c, 0xc4, 0x18, 0x08, 0x99, 0x57, 0xa6, 0x20,
	0x4a, 0x32, 0x82, 0x56, 0x6d, 0xd3, 0xa4, 0xa9, 0x7c, 0x74, 0xcd, 0x26, 0xaa, 0x62, 0x8a, 0x36,
	0x55, 0x9a, 0x2a, 0x63, 0xbf, 0x4d, 0xac, 0x26, 0xb6, 0x6b, 0x3b, 0x74, 0xf9, 0x0b, 0xf6, 0x47,
	0xef, 0x97, 0xe9, 0xfd, 0x8a, 0xbf, 0xed, 0xd0, 0x5f, 0x10, 0xbe, 0x7b, 0xee, 0xb9, 0x7b, 0xcf,
	0xaf, 0xef, 0xb9, 0x40, 0x63, 0xe2, 0x61, 0xb7, 0x4b, 0xfe, 0x74, 0x3c, 0xec, 0x3e, 0x98, 0x3a,
	0xee, 0x38, 0xae, 0xed, 0xdb, 0xe8, 0x09, 0xb1, 0xc9, 0x48, 0xb7, 0xc7, 0x63, 0xdb, 0xea, 0x8e,
	0xb1, 0x61, 0x6a, 0xcc, 0x23, 0xd7, 0x83, 0x10, 0x66, 0x58, 0xa7, 0x06, 0x86, 0xe4, 0x26, 0x69,
	0x86, 0x39, 0xd1, 0x74, 0xdf, 0x7c, 0x30, 0xfd, 0x29, 0xf3, 0x28, 0x87, 0xb0, 0xf1, 0xca, 0xb4,
	0x8c, 0x3b, 0x0f, 0xbb, 0xe7, 0xd3, 0xfe, 0xa5, 0x8a, 0x3f, 0x4f, 0xb0, 0xe7, 0xa3, 0x55, 0x58,
	0x30, 0x0d, 0xa9, 0xd4, 0x2a, 0xb5, 0xab, 0xea, 0x82, 0x69, 0x28, 0xc7, 0x50, 0x25, 0x10, 0x15,
	0x3b, 0xa3, 0x29, 0x6a, 0x02, 0xad, 0x86, 0xba, 0x97, 0x7b, 0xd0, 0xa1, 0xb9, 0xa9, 0x9b, 0xda,
	0x95, 0x23, 0xd8, 0x12, 0x9c, 0x1e, 0x21, 0xf5, 0x04, 0xeb, 0x1a, 0x2c, 0x9a, 0x86, 0x27, 0x95,
	0x5a, 0x8b, 0xed, 0xaa, 0x4a, 0xfe, 0x55, 0x3a, 0x00, 0x14, 0xc6, 0x88, 0x5b, 0xb0, 0x44, 0x08,
	0x18, 0x22, 0xca, 0xcc, 0x1c, 0x4a, 0x0f, 0x9a, 0x82, 0xfa, 0x25, 0x3b, 0x88, 0x89, 0x8b, 0x72,
	0xf4, 0x61, 0x23, 0x8a, 0x67, 0xc9, 0x7a, 0x00, 0xda, 0xcc, 0xc4, 0x33, 0xa2, 0x20, 0x23, 0x87,
	0x4f, 0xd5, 0x10, 0x4a, 0x39, 0x83, 0xf5, 0xbe, 0xe5, 0x61, 0xd7, 0x67, 0xcd, 0x60, 0x19, 0x8b,
	0xda, 0xf1, 0x01, 0x9a, 0x77, 0x8e, 0xa1, 0xf9, 0x98, 0xd8, 0xde, 0xba, 0xf6, 0x47, 0x73, 0x84,
	0xaf, 0xc9, 0x0b, 0x9c, 0xd5, 0xbc, 0x0d, 0x65, 0x82, 0xec, 0x5f, 0xf2, 0x8e, 0xf3, 0x27, 0x74,
	0x08, 0x65, 0xfa, 0xa6, 0x3d, 0x69, 0x81, 0x96, 0xb7, 0xd2, 0xe1, 0x6f, 0x95, 0x86, 0xab, 0xdc,
	0xa9, 0xfc, 0x08, 0x7b, 0x99, 0x09, 0xc8, 0x49, 0x25, 0x78, 0xea, 0x4d, 0x74, 0x1d, 0x7b, 0x1e,
	0xe5, 0xaf, 0xa8, 0xe2, 0x91, 0x9c, 0x27, 0x88, 0x9c, 0xf7, 0x3c, 0x9f, 0x61, 0x5d, 0xc5, 0x1e,
	0xf6, 0xdf, 0x0e, 0x6d, 0x0b, 0x17, 0x1d, 0xa1, 0x05, 0xcb, 0xba, 0x3d, 0xb1, 0x7c, 0x77, 0x7a,
	0x61, 0x1b, 0x58, 0x5a, 0x68, 0x95, 0xda, 0x4b, 0x6a, 0xd8, 0x84, 0x14, 0xa8, 0x8d, 0xed, 0x7b,
	0x73, 0x84, 0xdf, 0x4c, 0xc6, 0xf7, 0xd8, 0x95, 0x16, 0x69, 0x7c, 0xc4, 0xa6, 0x1c, 0x43, 0x3d,
	0x9c, 0x32, 0xff, 0x50, 0xbf, 0xc3, 0x26, 0x03, 0x6b, 0x9e, 0xf7, 0xc5, 0x76, 0x8d, 0xa2, 0x12,
	0x65, 0xa8, 0x38, 0x1c, 0x4a, 0xeb, 0xab, 0xaa, 0xb3, 0x67, 0xa5, 0x03, 0x28, 0xc6, 0x95, 0x9f,
	0xfb, 0x2f, 0x90, 0xee, 0x9c, 0x81, 0xab, 0x19, 0xf8, 0x1a, 0x93, 0xca, 0xbd, 0xa1, 0xe9, 0x14,
	0xe5, 0x7f, 0x06, 0x2b, 0xf8, 0x1f, 0xc7, 0x74, 0xf1, 0x2d, 0xd6, 0x6d, 0xcb, 0xf0, 0x68, 0x07,
	0x96, 0xd4, 0xa8, 0x51, 0xe9, 0xc1, 0x76, 0x0a, 0x73, 0x7e, 0x35, 0xa7, 0xd0, 0x50, 0xf1, 0x83,
	0xfd, 0x69, 0xfe, 0x62, 0x94, 0x53, 0xd8, 0x4a, 0x86, 0xe4, 0x67, 0x69, 0xc3, 0xea, 0xb9, 0x66,
	0x85, 0x6f, 0x50, 0x16, 0x79, 0x1b, 0x6a, 0x33, 0x64, 0x3e, 0xe7, 0x31, 0xac, 0xbf, 0x36, 0x0d,
	0x03, 0xcf, 0x45, 0x7b, 0x0c, 0xf5, 0x30, 0x38, 0x9f, 0xb9, 0x07, 0x52, 0xdf, 0xd2, 0x1c, 0xc7,
	0xb5, 0x1d, 0xd7, 0x8c, 0xdd, 0xfc, 0xac, 0x04, 0x3d, 0xd8, 0x4e, 0x89, 0xc9, 0xcf, 0x73, 0x04,
	0x75, 0x72, 0x69, 0xe6, 0xa1, 0x3f, 0x82, 0x95, 0x00, 0x9a, 0xcf, 0xda, 0x85, 0xdd, 0xbe, 0x45,
	0x47, 0x13, 0x2f, 0xa3, 0x68, 0xf8, 0xfd, 0x00, 0x3b, 0xe9, 0x01, 0xf9, 0x79, 0x4e, 0x60, 0xe7,
	0x31, 0x59, 0xce, 0xa0, 0xf1, 0xf8, 0x1c, 0x7f, 0xc0, 0x4e, 0x30, 0x7c, 0x66, 0xe3, 0x96, 0xe7,
	0xe8, 0x40, 0x45, 0x28, 0x15, 0x1f, 0x44, 0x69, 0xb3, 0x79, 0x86, 0x21, 0x15, 0xa4, 0x91, 0x15,
	0x7d, 0xad, 0xdf, 0xdd, 0xe2, 0x11, 0xd6, 0xe9, 0x38, 0xbf, 0xa6, 0x03, 0xe7, 0x4f, 0xd3, 0x1f,
	0x5e, 0x04, 0xd3, 0xa9, 0xe8, 0xdb, 0xdd, 0x86, 0x32, 0x1b, 0x54, 0x7c, 0x72, 0xf0, 0x27, 0xe5,
	0x27, 0x38, 0x78, 0x49, 0xee, 0xcb, 0xc3, 0xa3, 0x87, 0xbe, 0xf2, 0x0a, 0xf6, 0xb3, 0x43, 0xc9,
	0x79, 0x02, 0x55, 0x28, 0xe5, 0xa9, 0xc2, 0xbf, 0xa5, 0x70, 0x4b, 0x6e, 0x7d, 0xcd, 0x9f, 0x14,
	0x0a, 0xce, 0x1e, 0x54, 0x2d, 0xfc, 0x85, 0x61, 0xf9, 0x20, 0x0e, 0x0c, 0xc4, 0x6b, 0x8f, 0x0c,
	0xee, 0x65, 0xe7, 0x0d, 0x0c, 0xa4, 0xcd, 0xfa, 0x10, 0xeb, 0x9f, 0xb0, 0x21, 0x3d, 0x61, 0x6d,
	0xe6, 0x8f, 0xca, 0x07, 0x68, 0x5c, 0x0c, 0x35, 0x6b, 0x40, 0x0b, 0xf9, 0x0d, 0x5b, 0x46, 0xe1,
	0x27, 0x81, 0x9e, 0x43, 0x79, 0x40, 0x81, 0x34, 0xcf, 0x6a, 0x6f, 0x33, 0x78, 0xf9, 0x8c, 0xe0,
	0xca, 0x9a, 0x8c, 0x55, 0x8e, 0x51, 0xde, 0x41, 0xf3, 0x12, 0x8f, 0xf0, 0x57, 0x28, 0xac, 0x0c,
	0x15, 0xda, 0xae, 0xfe, 0x25, 0xd3, 0xd8, 0xaa, 0x3a, 0x7b, 0x56, 0x6a, 0x00, 0x57, 0x63, 0x87,
	0xdf, 0xa2, 0xde, 0x7f, 0x35, 0x58, 0xa6, 0x8d, 0x64, 0x6b, 0x19, 0xfa, 0x19, 0x6a, 0xe1, 0xc5,
	0x09, 0xed, 0xb0, 0x0a, 0x53, 0x96, 0x29, 0xb9, 0x1e, 0x92, 0x50, 0xfa, 0x06, 0x5f, 0x83, 0x1c,
	0xc6, 0x91, 0x3b, 0x67, 0x4f, 0x7c, 0x5e, 0xf8, 0xa3, 0x98, 0x7e, 0x85, 0xd5, 0xe8, 0xaa, 0x85,
	0x76, 0xa3, 0xd1, 0x91, 0x2f, 0x57, 0x5e, 0x0b, 0xe2, 0xf9, 0x65, 0x7a, 0x01, 0x10, 0x6c, 0x34,
	0xa8, 0xc1, 0xfc, 0x89, 0x1d, 0x27, 0x99, 0x58, 0x0f, 0x5f, 0xae, 0x48, 0xcb, 0xd1, 0x33, 0x8e,
	0xcd, 0xdd, 0x79, 0x64, 0xa5, 0x00, 0x45, 0x92, 0x7c, 0x04, 0x29, 0xeb, 0x53, 0x40, 0x87, 0x2c,
	0xbe, 0xe0, 0x2b, 0x93, 0xbf, 0x2d, 0x82, 0xf1, 0x26, 0x04, 0x75, 0x88, 0x26, 0x24, 0x16, 0xa3,
	0x64, 0x13, 0x7e, 0x01, 0x08, 0xd6, 0x12, 0x11, 0x97, 0xd8, 0x8d, 0xe4, 0xad, 0xa4, 0x83, 0x44,
	0x5f, 0xc1, 0x4a, 0x64, 0xb7, 0x40, 0x72, 0x18, 0x17, 0x5d, 0x5e, 0x64, 0x29, 0xd5, 0x47, 0x68,
	0x6e, 0xc8, 0x0e, 0x17, 0x5b, 0x0c, 0x50, 0x53, 0x9c, 0x21, 0x7d, 0x17, 0x91, 0xf7, 0x32, 0xfd,
	0x84, 0xf2, 0x0d, 0xac, 0xc5, 0x97, 0x00, 0xb4, 0x2f, 0x0a, 0x48, 0xdd, 0x27, 0xe4, 0xdd, 0x2c,
	0x37, 0xe1, 0x3b, 0x83, 0xa7, 0x5c, 0xf7, 0x11, 0xff, 0x90, 0xa3, 0x0b, 0x83, 0x8c, 0x62, 0x56,
	0xde, 0xdc, 0x40, 0xd5, 0x45, 0x73, 0x13, 0x4b, 0x81, 0x68, 0x6e, 0x7c, 0x01, 0xb8, 0x21, 0x9b,
	0x7a, 0x4c, 0xb2, 0x45, 0x57, 0xb2, 0xf4, 0x5f, 0x74, 0x25, 0x43, 0xeb, 0x5f, 0x40, 0x45, 0xc8,
	0x34, 0xe2, 0x59, 0x63, 0x0a, 0x2f, 0x6f, 0xc4, 0xcd, 0x24, 0xee, 0x3d, 0x6c, 0xa6, 0x49, 0x30,
	0xfa, 0x46, 0x64, 0xcb, 0x54, 0x5a, 0xf9, 0x20, 0x0f, 0x42, 0xb8, 0xdf, 0x01, 0x4a, 0x61, 0xe6,
	0x61, 0xd9, 0xbc, 0xfb, 0xd9, 0x00, 0xce, 0x9a, 0x14, 0x53, 0xc1, 0x9a, 0xa9, 0xd9, 0x82, 0x35,
	0x4b, 0x87, 0xff, 0x86, 0x83, 0x02, 0xb5, 0x45, 0xcf, 0x19, 0xc3, 0x7c, 0xa2, 0x2c, 0xd7, 0x18,
	0x9a, 0x61, 0xd0, 0x05, 0xac, 0xc5, 0xe5, 0x0e, 0x25, 0x2a, 0x8a, 0xc8, 0xa0, 0x18, 0x87, 0xc1,
	0x94, 0x27, 0x24, 0x71, 0xa9, 0x12, 0x24, 0x19, 0x12, 0x96, 0x42, 0x72, 0x03, 0x8d, 0x0c, 0x39,
	0x12, 0xb3, 0x31, 0x5f, 0xad, 0x92, 0x94, 0xe7, 0xbd, 0xf7, 0xdf, 0x0f, 0x4c, 0x7f, 0x38, 0xb9,
	0x27, 0x5a, 0xdf, 0x75, 0x4e, 0x75, 0xab, 0xeb, 0x6b, 0x96, 0xaf, 0x59, 0x27, 0x86, 0x3d, 0xd6,
	0x4c, 0xeb, 0xc4, 0xd3, 0x87, 0x78, 0xac, 0x75, 0x07, 0xf6, 0x48, 0xb3, 0x06, 0xf4, 0x97, 0xfe,
	0x7d, 0x99, 0xfe, 0xc2, 0x3f, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x32, 0x93, 0xe7, 0x36, 0x54,
	0x10, 0x00, 0x00,
}
