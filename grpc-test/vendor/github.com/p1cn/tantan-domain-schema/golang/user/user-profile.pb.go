// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user-profile.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserProfile struct {
	UserID      string                       `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Description string                       `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Hometown    string                       `protobuf:"bytes,3,opt,name=hometown" json:"hometown,omitempty"`
	Hangouts    string                       `protobuf:"bytes,4,opt,name=hangouts" json:"hangouts,omitempty"`
	Tags        []*UserProfileTag            `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Answers     []*UserProfileQuestionAnswer `protobuf:"bytes,6,rep,name=answers" json:"answers,omitempty"`
	Medias      []*common.Media              `protobuf:"bytes,7,rep,name=medias" json:"medias,omitempty"`
	Work        *UserProfileWork             `protobuf:"bytes,8,opt,name=work" json:"work,omitempty"`
	Education   *UserProfileEducation        `protobuf:"bytes,9,opt,name=education" json:"education,omitempty"`
	Social      []*UserSocialAccount         `protobuf:"bytes,10,rep,name=social" json:"social,omitempty"`
}

func (m *UserProfile) Reset()                    { *m = UserProfile{} }
func (m *UserProfile) String() string            { return proto.CompactTextString(m) }
func (*UserProfile) ProtoMessage()               {}
func (*UserProfile) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *UserProfile) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserProfile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UserProfile) GetHometown() string {
	if m != nil {
		return m.Hometown
	}
	return ""
}

func (m *UserProfile) GetHangouts() string {
	if m != nil {
		return m.Hangouts
	}
	return ""
}

func (m *UserProfile) GetTags() []*UserProfileTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UserProfile) GetAnswers() []*UserProfileQuestionAnswer {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *UserProfile) GetMedias() []*common.Media {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *UserProfile) GetWork() *UserProfileWork {
	if m != nil {
		return m.Work
	}
	return nil
}

func (m *UserProfile) GetEducation() *UserProfileEducation {
	if m != nil {
		return m.Education
	}
	return nil
}

func (m *UserProfile) GetSocial() []*UserSocialAccount {
	if m != nil {
		return m.Social
	}
	return nil
}

type UserProfileTag struct {
	Value    string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
}

func (m *UserProfileTag) Reset()                    { *m = UserProfileTag{} }
func (m *UserProfileTag) String() string            { return proto.CompactTextString(m) }
func (*UserProfileTag) ProtoMessage()               {}
func (*UserProfileTag) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *UserProfileTag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UserProfileTag) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type UserProfileQuestionAnswer struct {
	QuestionID string `protobuf:"bytes,1,opt,name=questionID" json:"questionID,omitempty"`
	Answer     string `protobuf:"bytes,2,opt,name=answer" json:"answer,omitempty"`
}

func (m *UserProfileQuestionAnswer) Reset()                    { *m = UserProfileQuestionAnswer{} }
func (m *UserProfileQuestionAnswer) String() string            { return proto.CompactTextString(m) }
func (*UserProfileQuestionAnswer) ProtoMessage()               {}
func (*UserProfileQuestionAnswer) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *UserProfileQuestionAnswer) GetQuestionID() string {
	if m != nil {
		return m.QuestionID
	}
	return ""
}

func (m *UserProfileQuestionAnswer) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type UserProfileWork struct {
	Company    string `protobuf:"bytes,1,opt,name=company" json:"company,omitempty"`
	Industry   string `protobuf:"bytes,2,opt,name=industry" json:"industry,omitempty"`
	Department string `protobuf:"bytes,3,opt,name=department" json:"department,omitempty"`
	Verified   bool   `protobuf:"varint,4,opt,name=verified" json:"verified,omitempty"`
	Active     bool   `protobuf:"varint,5,opt,name=active" json:"active,omitempty"`
}

func (m *UserProfileWork) Reset()                    { *m = UserProfileWork{} }
func (m *UserProfileWork) String() string            { return proto.CompactTextString(m) }
func (*UserProfileWork) ProtoMessage()               {}
func (*UserProfileWork) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *UserProfileWork) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *UserProfileWork) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

func (m *UserProfileWork) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *UserProfileWork) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserProfileWork) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type UserProfileEducation struct {
	School   string `protobuf:"bytes,1,opt,name=school" json:"school,omitempty"`
	Major    string `protobuf:"bytes,2,opt,name=major" json:"major,omitempty"`
	Verified bool   `protobuf:"varint,3,opt,name=verified" json:"verified,omitempty"`
	Active   bool   `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
}

func (m *UserProfileEducation) Reset()                    { *m = UserProfileEducation{} }
func (m *UserProfileEducation) String() string            { return proto.CompactTextString(m) }
func (*UserProfileEducation) ProtoMessage()               {}
func (*UserProfileEducation) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *UserProfileEducation) GetSchool() string {
	if m != nil {
		return m.School
	}
	return ""
}

func (m *UserProfileEducation) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *UserProfileEducation) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *UserProfileEducation) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type UserSocialAccount struct {
	Value   string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
}

func (m *UserSocialAccount) Reset()                    { *m = UserSocialAccount{} }
func (m *UserSocialAccount) String() string            { return proto.CompactTextString(m) }
func (*UserSocialAccount) ProtoMessage()               {}
func (*UserSocialAccount) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *UserSocialAccount) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UserSocialAccount) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func init() {
	proto.RegisterType((*UserProfile)(nil), "user.UserProfile")
	proto.RegisterType((*UserProfileTag)(nil), "user.UserProfileTag")
	proto.RegisterType((*UserProfileQuestionAnswer)(nil), "user.UserProfileQuestionAnswer")
	proto.RegisterType((*UserProfileWork)(nil), "user.UserProfileWork")
	proto.RegisterType((*UserProfileEducation)(nil), "user.UserProfileEducation")
	proto.RegisterType((*UserSocialAccount)(nil), "user.UserSocialAccount")
}

func init() { proto.RegisterFile("user/user-profile.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x86, 0x55, 0xfa, 0x3d, 0x15, 0x20, 0xac, 0xc2, 0x9a, 0x1e, 0xa0, 0xaa, 0x84, 0x54, 0x0e,
	0x4d, 0xa0, 0x5c, 0xe0, 0xb8, 0x0b, 0x1c, 0x38, 0x20, 0x41, 0x16, 0x84, 0xc4, 0xcd, 0xeb, 0x78,
	0x53, 0xb3, 0x89, 0x27, 0xd8, 0x4e, 0xcb, 0xfe, 0x16, 0x4e, 0xfc, 0x53, 0x64, 0xc7, 0xe9, 0x07,
	0xa5, 0x97, 0x48, 0xef, 0xcc, 0x63, 0xcf, 0xe4, 0x9d, 0x31, 0x9c, 0x55, 0x46, 0xe8, 0xd8, 0x7d,
	0x16, 0xa5, 0xc6, 0x6b, 0x99, 0x8b, 0xa8, 0xd4, 0x68, 0x91, 0x74, 0x5c, 0x6c, 0x42, 0x38, 0x16,
	0x05, 0xaa, 0xb8, 0x10, 0xa9, 0x64, 0x75, 0x66, 0xf6, 0xa7, 0x0d, 0xa3, 0xaf, 0x46, 0xe8, 0x4f,
	0x35, 0x4f, 0x1e, 0x41, 0xcf, 0xb1, 0x1f, 0xde, 0xd1, 0xd6, 0xb4, 0x35, 0x1f, 0x26, 0x41, 0x91,
	0x29, 0x8c, 0x52, 0x61, 0xb8, 0x96, 0xa5, 0x95, 0xa8, 0xe8, 0x1d, 0x9f, 0xdc, 0x0f, 0x91, 0x09,
	0x0c, 0x56, 0x58, 0x08, 0x8b, 0x1b, 0x45, 0xdb, 0x3e, 0xbd, 0xd5, 0x3e, 0xc7, 0x54, 0x86, 0x95,
	0x35, 0xb4, 0x13, 0x72, 0x41, 0x93, 0x39, 0x74, 0x2c, 0xcb, 0x0c, 0xed, 0x4e, 0xdb, 0xf3, 0xd1,
	0x72, 0x1c, 0xb9, 0x82, 0xd1, 0x5e, 0x4b, 0x5f, 0x58, 0x96, 0x78, 0x82, 0xbc, 0x81, 0x3e, 0x53,
	0x66, 0x23, 0xb4, 0xa1, 0x3d, 0x0f, 0x3f, 0x3d, 0x82, 0x3f, 0x57, 0xc2, 0xb8, 0x6e, 0xce, 0x3d,
	0x97, 0x34, 0x3c, 0x79, 0x06, 0x3d, 0xff, 0xd7, 0x86, 0xf6, 0xfd, 0xc9, 0xbb, 0x51, 0xed, 0x45,
	0xf4, 0xd1, 0x45, 0x93, 0x90, 0x24, 0xcf, 0xa1, 0xb3, 0x41, 0x7d, 0x43, 0x07, 0xd3, 0xd6, 0x7c,
	0xb4, 0x7c, 0x78, 0x74, 0xfd, 0x37, 0xd4, 0x37, 0x89, 0x47, 0xc8, 0x6b, 0x18, 0x8a, 0xb4, 0xe2,
	0xcc, 0xdb, 0x31, 0xf4, 0xfc, 0xe4, 0x88, 0x7f, 0xdf, 0x10, 0xc9, 0x0e, 0x26, 0x31, 0xf4, 0x0c,
	0x72, 0xc9, 0x72, 0x0a, 0xbe, 0x97, 0xb3, 0xdd, 0xb1, 0x4b, 0x1f, 0x3f, 0xe7, 0x1c, 0x2b, 0x65,
	0x93, 0x80, 0xcd, 0x2e, 0xe0, 0xde, 0xa1, 0x1f, 0x64, 0x0c, 0xdd, 0x35, 0xcb, 0x2b, 0x11, 0x86,
	0x54, 0x0b, 0xe7, 0x32, 0x67, 0x56, 0x64, 0xa8, 0x6f, 0xc3, 0x80, 0xb6, 0x7a, 0x76, 0x09, 0x8f,
	0x4f, 0xda, 0x44, 0x9e, 0x00, 0xfc, 0x0c, 0x91, 0xed, 0xe0, 0xf7, 0x22, 0x6e, 0x29, 0x6a, 0x23,
	0xc3, 0xb5, 0x41, 0xcd, 0x7e, 0xb7, 0xe0, 0xfe, 0x3f, 0xee, 0x10, 0x0a, 0x7d, 0x8e, 0x45, 0xc9,
	0xd4, 0x6d, 0xb8, 0xa8, 0x91, 0xae, 0x3d, 0xa9, 0xd2, 0xca, 0xd8, 0x5d, 0x7b, 0x8d, 0x76, 0x1d,
	0xa4, 0xa2, 0x64, 0xda, 0x16, 0x42, 0xd9, 0xb0, 0x3e, 0x7b, 0x11, 0x77, 0x76, 0x2d, 0xb4, 0xbc,
	0x96, 0x22, 0xf5, 0x0b, 0x34, 0x48, 0xb6, 0xda, 0x77, 0xc7, 0xad, 0x5c, 0x0b, 0xda, 0xf5, 0x99,
	0xa0, 0x66, 0xbf, 0x60, 0xfc, 0xbf, 0x51, 0x38, 0xde, 0xf0, 0x15, 0x62, 0xde, 0xac, 0x78, 0xad,
	0x9c, 0xa9, 0x05, 0xfb, 0x81, 0xcd, 0x4f, 0xd6, 0xe2, 0xa0, 0x72, 0xfb, 0x64, 0xe5, 0xce, 0x41,
	0xe5, 0xb7, 0xf0, 0xe0, 0x68, 0x9a, 0x27, 0x66, 0x46, 0xa1, 0xaf, 0x84, 0xf5, 0x4b, 0x57, 0x97,
	0x6d, 0xe4, 0xc5, 0xf2, 0xfb, 0x8b, 0x4c, 0xda, 0x55, 0x75, 0xe5, 0x56, 0x35, 0x2e, 0x5f, 0x72,
	0x15, 0x5b, 0xa6, 0x2c, 0x53, 0x8b, 0x14, 0x0b, 0x26, 0xd5, 0xc2, 0xf0, 0x95, 0x28, 0x58, 0x9c,
	0x61, 0xce, 0x54, 0xe6, 0x5f, 0xfd, 0x55, 0xcf, 0x3f, 0xea, 0x57, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xc4, 0x53, 0x1a, 0x3a, 0x09, 0x04, 0x00, 0x00,
}
