// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user-verification.service.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// get user verification
type FindVerificationByUserIDRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *FindVerificationByUserIDRequest) Reset()         { *m = FindVerificationByUserIDRequest{} }
func (m *FindVerificationByUserIDRequest) String() string { return proto.CompactTextString(m) }
func (*FindVerificationByUserIDRequest) ProtoMessage()    {}
func (*FindVerificationByUserIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{0}
}

func (m *FindVerificationByUserIDRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type UserVerificationReply struct {
	Verification *UserVerification `protobuf:"bytes,1,opt,name=verification" json:"verification,omitempty"`
}

func (m *UserVerificationReply) Reset()                    { *m = UserVerificationReply{} }
func (m *UserVerificationReply) String() string            { return proto.CompactTextString(m) }
func (*UserVerificationReply) ProtoMessage()               {}
func (*UserVerificationReply) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *UserVerificationReply) GetVerification() *UserVerification {
	if m != nil {
		return m.Verification
	}
	return nil
}

// insert user verification
type InsertVerificationRequest struct {
	Verification *UserVerification `protobuf:"bytes,1,opt,name=verification" json:"verification,omitempty"`
}

func (m *InsertVerificationRequest) Reset()                    { *m = InsertVerificationRequest{} }
func (m *InsertVerificationRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertVerificationRequest) ProtoMessage()               {}
func (*InsertVerificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *InsertVerificationRequest) GetVerification() *UserVerification {
	if m != nil {
		return m.Verification
	}
	return nil
}

// update user verification
type UpdateVerificationStatusRequest struct {
	UserID           string                        `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Status           VerificationStatus            `protobuf:"varint,2,opt,name=status,enum=user.VerificationStatus" json:"status,omitempty"`
	RejectionReasons []VerificationRejectionReason `protobuf:"varint,3,rep,packed,name=rejectionReasons,enum=user.VerificationRejectionReason" json:"rejectionReasons,omitempty"`
}

func (m *UpdateVerificationStatusRequest) Reset()         { *m = UpdateVerificationStatusRequest{} }
func (m *UpdateVerificationStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateVerificationStatusRequest) ProtoMessage()    {}
func (*UpdateVerificationStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{3}
}

func (m *UpdateVerificationStatusRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateVerificationStatusRequest) GetStatus() VerificationStatus {
	if m != nil {
		return m.Status
	}
	return VerificationStatus_VERIFICATION_STATUS_DEFAULT
}

func (m *UpdateVerificationStatusRequest) GetRejectionReasons() []VerificationRejectionReason {
	if m != nil {
		return m.RejectionReasons
	}
	return nil
}

// get verified info
type FindVerifiedUserByUserIDsRequest struct {
	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs" json:"userIDs,omitempty"`
}

func (m *FindVerifiedUserByUserIDsRequest) Reset()         { *m = FindVerifiedUserByUserIDsRequest{} }
func (m *FindVerifiedUserByUserIDsRequest) String() string { return proto.CompactTextString(m) }
func (*FindVerifiedUserByUserIDsRequest) ProtoMessage()    {}
func (*FindVerifiedUserByUserIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{4}
}

func (m *FindVerifiedUserByUserIDsRequest) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type VerifiedUsersReply struct {
	VerifiedUsers []*VerifiedUser `protobuf:"bytes,1,rep,name=verifiedUsers" json:"verifiedUsers,omitempty"`
}

func (m *VerifiedUsersReply) Reset()                    { *m = VerifiedUsersReply{} }
func (m *VerifiedUsersReply) String() string            { return proto.CompactTextString(m) }
func (*VerifiedUsersReply) ProtoMessage()               {}
func (*VerifiedUsersReply) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *VerifiedUsersReply) GetVerifiedUsers() []*VerifiedUser {
	if m != nil {
		return m.VerifiedUsers
	}
	return nil
}

// insert verified info
type InsertVerifiedUserRequest struct {
	VerifiedUser *VerifiedUser `protobuf:"bytes,1,opt,name=verifiedUser" json:"verifiedUser,omitempty"`
}

func (m *InsertVerifiedUserRequest) Reset()                    { *m = InsertVerifiedUserRequest{} }
func (m *InsertVerifiedUserRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertVerifiedUserRequest) ProtoMessage()               {}
func (*InsertVerifiedUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *InsertVerifiedUserRequest) GetVerifiedUser() *VerifiedUser {
	if m != nil {
		return m.VerifiedUser
	}
	return nil
}

type VerifiedUserReply struct {
	VerifiedUser *VerifiedUser `protobuf:"bytes,1,opt,name=verifiedUser" json:"verifiedUser,omitempty"`
}

func (m *VerifiedUserReply) Reset()                    { *m = VerifiedUserReply{} }
func (m *VerifiedUserReply) String() string            { return proto.CompactTextString(m) }
func (*VerifiedUserReply) ProtoMessage()               {}
func (*VerifiedUserReply) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

func (m *VerifiedUserReply) GetVerifiedUser() *VerifiedUser {
	if m != nil {
		return m.VerifiedUser
	}
	return nil
}

// set hide verified school name
type HideVerifiedSchoolNameRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Hide   bool   `protobuf:"varint,2,opt,name=hide" json:"hide,omitempty"`
}

func (m *HideVerifiedSchoolNameRequest) Reset()                    { *m = HideVerifiedSchoolNameRequest{} }
func (m *HideVerifiedSchoolNameRequest) String() string            { return proto.CompactTextString(m) }
func (*HideVerifiedSchoolNameRequest) ProtoMessage()               {}
func (*HideVerifiedSchoolNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

func (m *HideVerifiedSchoolNameRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *HideVerifiedSchoolNameRequest) GetHide() bool {
	if m != nil {
		return m.Hide
	}
	return false
}

// delete verified user record
type DeleteVerifiedUserByUserIDRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *DeleteVerifiedUserByUserIDRequest) Reset()         { *m = DeleteVerifiedUserByUserIDRequest{} }
func (m *DeleteVerifiedUserByUserIDRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVerifiedUserByUserIDRequest) ProtoMessage()    {}
func (*DeleteVerifiedUserByUserIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{9}
}

func (m *DeleteVerifiedUserByUserIDRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// FindSchoolValidationByUserID
type FindSchoolValidationByUserIDRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *FindSchoolValidationByUserIDRequest) Reset()         { *m = FindSchoolValidationByUserIDRequest{} }
func (m *FindSchoolValidationByUserIDRequest) String() string { return proto.CompactTextString(m) }
func (*FindSchoolValidationByUserIDRequest) ProtoMessage()    {}
func (*FindSchoolValidationByUserIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{10}
}

func (m *FindSchoolValidationByUserIDRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type SchoolValidationReply struct {
	SchoolValidation *SchoolValidation `protobuf:"bytes,1,opt,name=schoolValidation" json:"schoolValidation,omitempty"`
}

func (m *SchoolValidationReply) Reset()                    { *m = SchoolValidationReply{} }
func (m *SchoolValidationReply) String() string            { return proto.CompactTextString(m) }
func (*SchoolValidationReply) ProtoMessage()               {}
func (*SchoolValidationReply) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

func (m *SchoolValidationReply) GetSchoolValidation() *SchoolValidation {
	if m != nil {
		return m.SchoolValidation
	}
	return nil
}

// IncreaseSchoolValidationTimes
type IncreaseSchoolValidationTimesRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *IncreaseSchoolValidationTimesRequest) Reset()         { *m = IncreaseSchoolValidationTimesRequest{} }
func (m *IncreaseSchoolValidationTimesRequest) String() string { return proto.CompactTextString(m) }
func (*IncreaseSchoolValidationTimesRequest) ProtoMessage()    {}
func (*IncreaseSchoolValidationTimesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{12}
}

func (m *IncreaseSchoolValidationTimesRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// FindPredictedSchoolByUserID
type FindPredictedSchoolByUserIDRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *FindPredictedSchoolByUserIDRequest) Reset()         { *m = FindPredictedSchoolByUserIDRequest{} }
func (m *FindPredictedSchoolByUserIDRequest) String() string { return proto.CompactTextString(m) }
func (*FindPredictedSchoolByUserIDRequest) ProtoMessage()    {}
func (*FindPredictedSchoolByUserIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{13}
}

func (m *FindPredictedSchoolByUserIDRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type PredictedSchoolReply struct {
	PredictedSchool *PredictedSchool `protobuf:"bytes,1,opt,name=predictedSchool" json:"predictedSchool,omitempty"`
}

func (m *PredictedSchoolReply) Reset()                    { *m = PredictedSchoolReply{} }
func (m *PredictedSchoolReply) String() string            { return proto.CompactTextString(m) }
func (*PredictedSchoolReply) ProtoMessage()               {}
func (*PredictedSchoolReply) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{14} }

func (m *PredictedSchoolReply) GetPredictedSchool() *PredictedSchool {
	if m != nil {
		return m.PredictedSchool
	}
	return nil
}

func init() {
	proto.RegisterType((*FindVerificationByUserIDRequest)(nil), "user.FindVerificationByUserIDRequest")
	proto.RegisterType((*UserVerificationReply)(nil), "user.UserVerificationReply")
	proto.RegisterType((*InsertVerificationRequest)(nil), "user.InsertVerificationRequest")
	proto.RegisterType((*UpdateVerificationStatusRequest)(nil), "user.UpdateVerificationStatusRequest")
	proto.RegisterType((*FindVerifiedUserByUserIDsRequest)(nil), "user.FindVerifiedUserByUserIDsRequest")
	proto.RegisterType((*VerifiedUsersReply)(nil), "user.VerifiedUsersReply")
	proto.RegisterType((*InsertVerifiedUserRequest)(nil), "user.InsertVerifiedUserRequest")
	proto.RegisterType((*VerifiedUserReply)(nil), "user.VerifiedUserReply")
	proto.RegisterType((*HideVerifiedSchoolNameRequest)(nil), "user.HideVerifiedSchoolNameRequest")
	proto.RegisterType((*DeleteVerifiedUserByUserIDRequest)(nil), "user.DeleteVerifiedUserByUserIDRequest")
	proto.RegisterType((*FindSchoolValidationByUserIDRequest)(nil), "user.FindSchoolValidationByUserIDRequest")
	proto.RegisterType((*SchoolValidationReply)(nil), "user.SchoolValidationReply")
	proto.RegisterType((*IncreaseSchoolValidationTimesRequest)(nil), "user.IncreaseSchoolValidationTimesRequest")
	proto.RegisterType((*FindPredictedSchoolByUserIDRequest)(nil), "user.FindPredictedSchoolByUserIDRequest")
	proto.RegisterType((*PredictedSchoolReply)(nil), "user.PredictedSchoolReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VerificationService service

type VerificationServiceClient interface {
	FindVerificationByUserID(ctx context.Context, in *FindVerificationByUserIDRequest, opts ...grpc.CallOption) (*UserVerificationReply, error)
	InsertVerification(ctx context.Context, in *InsertVerificationRequest, opts ...grpc.CallOption) (*UserVerificationReply, error)
	UpdateVerificationStatus(ctx context.Context, in *UpdateVerificationStatusRequest, opts ...grpc.CallOption) (*UserVerificationReply, error)
	FindVerifiedUserByUserIDs(ctx context.Context, in *FindVerifiedUserByUserIDsRequest, opts ...grpc.CallOption) (*VerifiedUsersReply, error)
	InsertVerifiedUser(ctx context.Context, in *InsertVerifiedUserRequest, opts ...grpc.CallOption) (*VerifiedUserReply, error)
	HideVerifiedUserSchoolName(ctx context.Context, in *HideVerifiedSchoolNameRequest, opts ...grpc.CallOption) (*VerifiedUserReply, error)
	DeleteVerifiedUserByUserID(ctx context.Context, in *DeleteVerifiedUserByUserIDRequest, opts ...grpc.CallOption) (*VerifiedUserReply, error)
	FindSchoolValidationByUserID(ctx context.Context, in *FindSchoolValidationByUserIDRequest, opts ...grpc.CallOption) (*SchoolValidationReply, error)
	IncreaseSchoolValidationTimes(ctx context.Context, in *IncreaseSchoolValidationTimesRequest, opts ...grpc.CallOption) (*SchoolValidationReply, error)
	FindPredictedSchoolByUserID(ctx context.Context, in *FindPredictedSchoolByUserIDRequest, opts ...grpc.CallOption) (*PredictedSchoolReply, error)
}

type verificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewVerificationServiceClient(cc *grpc.ClientConn) VerificationServiceClient {
	return &verificationServiceClient{cc}
}

func (c *verificationServiceClient) FindVerificationByUserID(ctx context.Context, in *FindVerificationByUserIDRequest, opts ...grpc.CallOption) (*UserVerificationReply, error) {
	out := new(UserVerificationReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/FindVerificationByUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) InsertVerification(ctx context.Context, in *InsertVerificationRequest, opts ...grpc.CallOption) (*UserVerificationReply, error) {
	out := new(UserVerificationReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/InsertVerification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) UpdateVerificationStatus(ctx context.Context, in *UpdateVerificationStatusRequest, opts ...grpc.CallOption) (*UserVerificationReply, error) {
	out := new(UserVerificationReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/UpdateVerificationStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) FindVerifiedUserByUserIDs(ctx context.Context, in *FindVerifiedUserByUserIDsRequest, opts ...grpc.CallOption) (*VerifiedUsersReply, error) {
	out := new(VerifiedUsersReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/FindVerifiedUserByUserIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) InsertVerifiedUser(ctx context.Context, in *InsertVerifiedUserRequest, opts ...grpc.CallOption) (*VerifiedUserReply, error) {
	out := new(VerifiedUserReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/InsertVerifiedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) HideVerifiedUserSchoolName(ctx context.Context, in *HideVerifiedSchoolNameRequest, opts ...grpc.CallOption) (*VerifiedUserReply, error) {
	out := new(VerifiedUserReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/HideVerifiedUserSchoolName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) DeleteVerifiedUserByUserID(ctx context.Context, in *DeleteVerifiedUserByUserIDRequest, opts ...grpc.CallOption) (*VerifiedUserReply, error) {
	out := new(VerifiedUserReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/DeleteVerifiedUserByUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) FindSchoolValidationByUserID(ctx context.Context, in *FindSchoolValidationByUserIDRequest, opts ...grpc.CallOption) (*SchoolValidationReply, error) {
	out := new(SchoolValidationReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/FindSchoolValidationByUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) IncreaseSchoolValidationTimes(ctx context.Context, in *IncreaseSchoolValidationTimesRequest, opts ...grpc.CallOption) (*SchoolValidationReply, error) {
	out := new(SchoolValidationReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/IncreaseSchoolValidationTimes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationServiceClient) FindPredictedSchoolByUserID(ctx context.Context, in *FindPredictedSchoolByUserIDRequest, opts ...grpc.CallOption) (*PredictedSchoolReply, error) {
	out := new(PredictedSchoolReply)
	err := grpc.Invoke(ctx, "/user.VerificationService/FindPredictedSchoolByUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerificationService service

type VerificationServiceServer interface {
	FindVerificationByUserID(context.Context, *FindVerificationByUserIDRequest) (*UserVerificationReply, error)
	InsertVerification(context.Context, *InsertVerificationRequest) (*UserVerificationReply, error)
	UpdateVerificationStatus(context.Context, *UpdateVerificationStatusRequest) (*UserVerificationReply, error)
	FindVerifiedUserByUserIDs(context.Context, *FindVerifiedUserByUserIDsRequest) (*VerifiedUsersReply, error)
	InsertVerifiedUser(context.Context, *InsertVerifiedUserRequest) (*VerifiedUserReply, error)
	HideVerifiedUserSchoolName(context.Context, *HideVerifiedSchoolNameRequest) (*VerifiedUserReply, error)
	DeleteVerifiedUserByUserID(context.Context, *DeleteVerifiedUserByUserIDRequest) (*VerifiedUserReply, error)
	FindSchoolValidationByUserID(context.Context, *FindSchoolValidationByUserIDRequest) (*SchoolValidationReply, error)
	IncreaseSchoolValidationTimes(context.Context, *IncreaseSchoolValidationTimesRequest) (*SchoolValidationReply, error)
	FindPredictedSchoolByUserID(context.Context, *FindPredictedSchoolByUserIDRequest) (*PredictedSchoolReply, error)
}

func RegisterVerificationServiceServer(s *grpc.Server, srv VerificationServiceServer) {
	s.RegisterService(&_VerificationService_serviceDesc, srv)
}

func _VerificationService_FindVerificationByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVerificationByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).FindVerificationByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/FindVerificationByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).FindVerificationByUserID(ctx, req.(*FindVerificationByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_InsertVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).InsertVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/InsertVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).InsertVerification(ctx, req.(*InsertVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_UpdateVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).UpdateVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/UpdateVerificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).UpdateVerificationStatus(ctx, req.(*UpdateVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_FindVerifiedUserByUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVerifiedUserByUserIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).FindVerifiedUserByUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/FindVerifiedUserByUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).FindVerifiedUserByUserIDs(ctx, req.(*FindVerifiedUserByUserIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_InsertVerifiedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertVerifiedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).InsertVerifiedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/InsertVerifiedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).InsertVerifiedUser(ctx, req.(*InsertVerifiedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_HideVerifiedUserSchoolName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HideVerifiedSchoolNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).HideVerifiedUserSchoolName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/HideVerifiedUserSchoolName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).HideVerifiedUserSchoolName(ctx, req.(*HideVerifiedSchoolNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_DeleteVerifiedUserByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVerifiedUserByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).DeleteVerifiedUserByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/DeleteVerifiedUserByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).DeleteVerifiedUserByUserID(ctx, req.(*DeleteVerifiedUserByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_FindSchoolValidationByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSchoolValidationByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).FindSchoolValidationByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/FindSchoolValidationByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).FindSchoolValidationByUserID(ctx, req.(*FindSchoolValidationByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_IncreaseSchoolValidationTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSchoolValidationTimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).IncreaseSchoolValidationTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/IncreaseSchoolValidationTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).IncreaseSchoolValidationTimes(ctx, req.(*IncreaseSchoolValidationTimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerificationService_FindPredictedSchoolByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPredictedSchoolByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServiceServer).FindPredictedSchoolByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VerificationService/FindPredictedSchoolByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServiceServer).FindPredictedSchoolByUserID(ctx, req.(*FindPredictedSchoolByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VerificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.VerificationService",
	HandlerType: (*VerificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindVerificationByUserID",
			Handler:    _VerificationService_FindVerificationByUserID_Handler,
		},
		{
			MethodName: "InsertVerification",
			Handler:    _VerificationService_InsertVerification_Handler,
		},
		{
			MethodName: "UpdateVerificationStatus",
			Handler:    _VerificationService_UpdateVerificationStatus_Handler,
		},
		{
			MethodName: "FindVerifiedUserByUserIDs",
			Handler:    _VerificationService_FindVerifiedUserByUserIDs_Handler,
		},
		{
			MethodName: "InsertVerifiedUser",
			Handler:    _VerificationService_InsertVerifiedUser_Handler,
		},
		{
			MethodName: "HideVerifiedUserSchoolName",
			Handler:    _VerificationService_HideVerifiedUserSchoolName_Handler,
		},
		{
			MethodName: "DeleteVerifiedUserByUserID",
			Handler:    _VerificationService_DeleteVerifiedUserByUserID_Handler,
		},
		{
			MethodName: "FindSchoolValidationByUserID",
			Handler:    _VerificationService_FindSchoolValidationByUserID_Handler,
		},
		{
			MethodName: "IncreaseSchoolValidationTimes",
			Handler:    _VerificationService_IncreaseSchoolValidationTimes_Handler,
		},
		{
			MethodName: "FindPredictedSchoolByUserID",
			Handler:    _VerificationService_FindPredictedSchoolByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user-verification.service.proto",
}

func init() { proto.RegisterFile("user/user-verification.service.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x7d, 0x4f, 0xd3, 0x40,
	0x1c, 0xce, 0x84, 0x80, 0xfc, 0x50, 0xc4, 0x53, 0xb0, 0x14, 0x08, 0xa3, 0xa0, 0x4e, 0x13, 0x36,
	0xac, 0x89, 0xf1, 0x05, 0x35, 0x21, 0xc4, 0x48, 0x8c, 0x8b, 0xe9, 0x04, 0x12, 0x8c, 0x4b, 0x8e,
	0xf6, 0xc7, 0x76, 0x66, 0x6b, 0x67, 0xef, 0xb6, 0x84, 0xaf, 0xe6, 0x57, 0xf0, 0x4b, 0x99, 0xf6,
	0x5a, 0xd7, 0xeb, 0xab, 0x2f, 0xff, 0x10, 0x76, 0xf7, 0x3c, 0xcf, 0xfd, 0x5e, 0xf2, 0x3c, 0x29,
	0xec, 0x8e, 0x39, 0xfa, 0xad, 0xe0, 0xcf, 0xde, 0x04, 0x7d, 0x76, 0xc9, 0x6c, 0x2a, 0x98, 0xe7,
	0x36, 0x39, 0xfa, 0x13, 0x66, 0x63, 0x73, 0xe4, 0x7b, 0xc2, 0x23, 0xb3, 0x01, 0x40, 0xdf, 0x28,
	0xc0, 0x86, 0x18, 0xe3, 0x05, 0x6c, 0xbd, 0x63, 0xae, 0x73, 0x9a, 0xb8, 0x39, 0xbc, 0x3a, 0xe1,
	0xe8, 0x1f, 0x1f, 0x59, 0xf8, 0x7d, 0x8c, 0x5c, 0x90, 0x55, 0x98, 0x1b, 0x87, 0x07, 0x5a, 0xad,
	0x5e, 0x6b, 0x2c, 0x58, 0xd1, 0x2f, 0xa3, 0x03, 0x2b, 0x01, 0x30, 0x49, 0xb5, 0x70, 0x34, 0xb8,
	0x22, 0x2f, 0xe1, 0x46, 0xf2, 0xa5, 0x90, 0xb6, 0x68, 0xae, 0x36, 0x03, 0x5e, 0x33, 0x43, 0x51,
	0xb0, 0xc6, 0x19, 0xac, 0x1d, 0xbb, 0x1c, 0x7d, 0xa1, 0xca, 0xca, 0x4a, 0xfe, 0x47, 0xf8, 0x47,
	0x0d, 0xb6, 0x4e, 0x46, 0x0e, 0x15, 0x98, 0x04, 0x75, 0x04, 0x15, 0x63, 0x5e, 0xd1, 0x29, 0xd9,
	0x87, 0x39, 0x1e, 0x02, 0xb5, 0x6b, 0xf5, 0x5a, 0x63, 0xc9, 0xd4, 0xe4, 0x8b, 0x39, 0x42, 0x11,
	0x8e, 0x7c, 0x84, 0x65, 0x1f, 0xbf, 0xa1, 0x2d, 0xab, 0xa7, 0xdc, 0x73, 0xb9, 0x36, 0x53, 0x9f,
	0x69, 0x2c, 0x99, 0xdb, 0x59, 0xae, 0xa5, 0x22, 0xad, 0x0c, 0xd5, 0x38, 0x80, 0xfa, 0x74, 0x4b,
	0xe8, 0x04, 0xad, 0xc6, 0x5b, 0xfa, 0x5d, 0xbc, 0x06, 0xf3, 0xb2, 0x5c, 0xae, 0xd5, 0xea, 0x33,
	0x8d, 0x05, 0x2b, 0xfe, 0x69, 0xb4, 0x81, 0x24, 0x99, 0x5c, 0x6e, 0xe9, 0x39, 0xdc, 0x9c, 0x24,
	0x4f, 0x43, 0xd6, 0xa2, 0x49, 0x92, 0xf5, 0xc9, 0x2b, 0x4b, 0x05, 0x1a, 0x1d, 0x75, 0x47, 0x11,
	0x28, 0x2a, 0xe3, 0x59, 0xbc, 0x23, 0x79, 0x1c, 0xed, 0x28, 0x4f, 0x55, 0xc1, 0x19, 0x1f, 0xe0,
	0xb6, 0x2a, 0x17, 0xd4, 0xf8, 0xef, 0x62, 0x9b, 0xef, 0x99, 0x83, 0x31, 0xa2, 0x63, 0xf7, 0x3d,
	0x6f, 0xd0, 0xa6, 0x43, 0xac, 0xda, 0x34, 0x81, 0xd9, 0x3e, 0x73, 0x30, 0xdc, 0xf3, 0x75, 0x2b,
	0xfc, 0xdf, 0x78, 0x05, 0xdb, 0x47, 0x38, 0x40, 0x81, 0x79, 0xe3, 0xaf, 0x32, 0xc9, 0x6b, 0xd8,
	0x09, 0x36, 0x27, 0x2b, 0x38, 0xa5, 0x03, 0xe6, 0xfc, 0x95, 0xc7, 0xbe, 0xc0, 0x4a, 0x9a, 0x2a,
	0x27, 0x73, 0x08, 0xcb, 0x3c, 0x75, 0xa1, 0xda, 0x21, 0x43, 0xcb, 0xe0, 0x8d, 0x37, 0xb0, 0x7b,
	0xec, 0xda, 0x3e, 0x52, 0x8e, 0x69, 0xf4, 0x67, 0x36, 0xc4, 0x2a, 0x5b, 0x18, 0x07, 0x60, 0x04,
	0xbd, 0x7d, 0xf2, 0xd1, 0x61, 0xb6, 0x88, 0xc7, 0xfc, 0xa7, 0xad, 0x9d, 0xc1, 0xdd, 0x14, 0x53,
	0x76, 0xf6, 0x16, 0x6e, 0x8d, 0xd4, 0xf3, 0xa8, 0xb1, 0x15, 0xd9, 0x58, 0x9a, 0x94, 0x46, 0x9b,
	0x3f, 0xe7, 0xe1, 0x8e, 0x62, 0x4d, 0x19, 0x8a, 0xa4, 0x0b, 0x5a, 0x51, 0xd4, 0x91, 0xfb, 0x52,
	0xbb, 0x22, 0x0a, 0xf5, 0xf5, 0x82, 0xa8, 0x09, 0x0b, 0xb7, 0x80, 0x64, 0xa3, 0x8b, 0x6c, 0x49,
	0x4a, 0x61, 0xa8, 0x95, 0x6b, 0x76, 0x41, 0x2b, 0x0a, 0xad, 0xb8, 0xe6, 0x8a, 0x50, 0x2b, 0xd7,
	0xff, 0x0a, 0x6b, 0x85, 0xc1, 0x42, 0x1e, 0xa4, 0x87, 0x92, 0x9f, 0x3c, 0xba, 0x96, 0xf5, 0x63,
	0x94, 0x31, 0x6d, 0x75, 0x24, 0xf2, 0x2e, 0x6f, 0x24, 0x4a, 0x86, 0xe8, 0xf7, 0x72, 0x0c, 0x1e,
	0xea, 0x9d, 0x83, 0x9e, 0xf4, 0x75, 0x70, 0x31, 0xf5, 0x36, 0xd9, 0x91, 0xb4, 0x52, 0xe7, 0x17,
	0x6b, 0x77, 0x41, 0x2f, 0xb6, 0x39, 0x79, 0x28, 0x69, 0x95, 0x41, 0x50, 0xac, 0x7f, 0x09, 0x1b,
	0x65, 0x49, 0x40, 0x1e, 0x4d, 0xa7, 0x5d, 0x91, 0x16, 0xf1, 0x4a, 0xf3, 0x93, 0xa1, 0x0f, 0x9b,
	0xa5, 0xae, 0x26, 0x8f, 0xe3, 0xf1, 0x57, 0x5b, 0xbf, 0xfc, 0x25, 0x1b, 0xd6, 0x4b, 0xfc, 0x4f,
	0x1a, 0xd3, 0x86, 0xca, 0x23, 0x42, 0xd7, 0xf3, 0x9d, 0x1d, 0x3c, 0x72, 0x68, 0x9e, 0xef, 0xf7,
	0x98, 0xe8, 0x8f, 0x2f, 0x9a, 0xb6, 0x37, 0x6c, 0x8d, 0x9e, 0xd8, 0x6e, 0x4b, 0x50, 0x57, 0x50,
	0x77, 0xcf, 0xf1, 0x86, 0x94, 0xb9, 0x7b, 0xdc, 0xee, 0xe3, 0x90, 0xb6, 0x7a, 0xde, 0x80, 0xba,
	0xbd, 0xf0, 0x3b, 0xe7, 0x62, 0x2e, 0xfc, 0xb6, 0x79, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb9,
	0x17, 0x0d, 0xda, 0x27, 0x09, 0x00, 0x00,
}
