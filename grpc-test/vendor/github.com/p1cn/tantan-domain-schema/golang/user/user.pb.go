// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Id          string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Gender      UserGenderEnum  `protobuf:"varint,3,opt,name=gender,enum=user.UserGenderEnum" json:"gender,omitempty"`
	Birthdate   int64           `protobuf:"varint,4,opt,name=birthdate" json:"birthdate,omitempty"`
	CreatedTime int64           `protobuf:"varint,5,opt,name=createdTime" json:"createdTime,omitempty"`
	Status      *UserStatus     `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	Settings    *UserSettings   `protobuf:"bytes,7,opt,name=settings" json:"settings,omitempty"`
	Profile     *UserProfile    `protobuf:"bytes,8,opt,name=profile" json:"profile,omitempty"`
	Membership  *UserMembership `protobuf:"bytes,9,opt,name=membership" json:"membership,omitempty"`
	Activity    *UserActivity   `protobuf:"bytes,10,opt,name=activity" json:"activity,omitempty"`
	Mobile      *Mobile         `protobuf:"bytes,11,opt,name=mobile" json:"mobile,omitempty"`
	Password    string          `protobuf:"bytes,12,opt,name=password" json:"password,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetGender() UserGenderEnum {
	if m != nil {
		return m.Gender
	}
	return UserGenderEnum_male
}

func (m *User) GetBirthdate() int64 {
	if m != nil {
		return m.Birthdate
	}
	return 0
}

func (m *User) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *User) GetStatus() *UserStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *User) GetSettings() *UserSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *User) GetProfile() *UserProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *User) GetMembership() *UserMembership {
	if m != nil {
		return m.Membership
	}
	return nil
}

func (m *User) GetActivity() *UserActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (m *User) GetMobile() *Mobile {
	if m != nil {
		return m.Mobile
	}
	return nil
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Mobile struct {
	CountryCode int32  `protobuf:"varint,1,opt,name=countryCode" json:"countryCode,omitempty"`
	Number      string `protobuf:"bytes,2,opt,name=number" json:"number,omitempty"`
}

func (m *Mobile) Reset()                    { *m = Mobile{} }
func (m *Mobile) String() string            { return proto.CompactTextString(m) }
func (*Mobile) ProtoMessage()               {}
func (*Mobile) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *Mobile) GetCountryCode() int32 {
	if m != nil {
		return m.CountryCode
	}
	return 0
}

func (m *Mobile) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*Mobile)(nil), "user.Mobile")
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x95, 0xb6, 0x9b, 0x6d, 0xa7, 0xab, 0x85, 0xb5, 0xd0, 0x62, 0x55, 0x1c, 0xa2, 0x15,
	0x87, 0x48, 0xd0, 0x06, 0x0a, 0x2f, 0xc0, 0x22, 0xc4, 0x69, 0x25, 0x64, 0xe0, 0xc2, 0xcd, 0x89,
	0x4d, 0x62, 0x69, 0x6d, 0x47, 0xb6, 0x03, 0xea, 0x13, 0xf2, 0x5a, 0x28, 0x13, 0x37, 0x89, 0xe0,
	0x12, 0xd9, 0xff, 0xf7, 0x25, 0x99, 0xf1, 0x18, 0x9e, 0x74, 0x5e, 0xba, 0xa2, 0x7f, 0x1c, 0x5a,
	0x67, 0x83, 0x25, 0xab, 0x7e, 0xbd, 0xbb, 0xc1, 0xb8, 0xb2, 0x5a, 0x5b, 0x33, 0x80, 0x1d, 0x1d,
	0xcd, 0x3d, 0xaf, 0x82, 0xfa, 0xa5, 0xc2, 0x29, 0x92, 0xdd, 0x44, 0xb4, 0xd4, 0xa5, 0x74, 0xbe,
	0x51, 0x6d, 0x64, 0xcf, 0x27, 0xd6, 0x3a, 0xfb, 0x53, 0x3d, 0xca, 0xff, 0x3f, 0xe7, 0x65, 0x08,
	0xca, 0xd4, 0x3e, 0x92, 0xdb, 0x19, 0x09, 0x3c, 0x74, 0x31, 0xbf, 0xfb, 0xb3, 0x84, 0xd5, 0x77,
	0x2f, 0x1d, 0xb9, 0x86, 0x85, 0x12, 0x34, 0xc9, 0x92, 0x7c, 0xc3, 0x16, 0x4a, 0x10, 0x02, 0x2b,
	0xc3, 0xb5, 0xa4, 0x0b, 0x4c, 0x70, 0x4d, 0x5e, 0x43, 0x5a, 0x4b, 0x23, 0xa4, 0xa3, 0xcb, 0x2c,
	0xc9, 0xaf, 0x8f, 0xcf, 0x0e, 0xd8, 0x63, 0xff, 0xfe, 0x67, 0xcc, 0x3f, 0x99, 0x4e, 0xb3, 0xe8,
	0x90, 0x17, 0xb0, 0x29, 0x95, 0x0b, 0x8d, 0xe0, 0x41, 0xd2, 0x55, 0x96, 0xe4, 0x4b, 0x36, 0x05,
	0x24, 0x83, 0x6d, 0xe5, 0x24, 0x0f, 0x52, 0x7c, 0x53, 0x5a, 0xd2, 0x0b, 0xe4, 0xf3, 0x88, 0xe4,
	0x90, 0x0e, 0xa5, 0xd2, 0x34, 0x4b, 0xf2, 0xed, 0xf1, 0xe9, 0xf4, 0xb7, 0xaf, 0x98, 0xb3, 0xc8,
	0xc9, 0x01, 0xd6, 0xe7, 0x76, 0xe9, 0x25, 0xba, 0x64, 0xe6, 0x46, 0xc2, 0x46, 0x87, 0xbc, 0x82,
	0xcb, 0x78, 0x6e, 0x74, 0x8d, 0xfa, 0xcd, 0xa4, 0x7f, 0x19, 0x00, 0x3b, 0x1b, 0xe4, 0x3d, 0xc0,
	0x34, 0x00, 0xba, 0x41, 0x7f, 0xd6, 0xf8, 0xc3, 0xc8, 0xd8, 0xcc, 0xeb, 0x4b, 0x3a, 0x0f, 0x94,
	0xc2, 0xbf, 0x25, 0x7d, 0x88, 0x84, 0x8d, 0x0e, 0x79, 0x09, 0xa9, 0xb6, 0x65, 0x5f, 0xd1, 0x16,
	0xed, 0xab, 0xc1, 0x7e, 0xc0, 0x8c, 0x45, 0x46, 0x76, 0xb0, 0x6e, 0xb9, 0xf7, 0xbf, 0xad, 0x13,
	0xf4, 0x0a, 0x07, 0x33, 0xee, 0xef, 0xee, 0x21, 0x1d, 0x6c, 0x3c, 0x5a, 0xdb, 0x99, 0xe0, 0x4e,
	0x1f, 0xad, 0x90, 0x38, 0xd3, 0x0b, 0x36, 0x8f, 0xc8, 0x2d, 0xa4, 0xa6, 0xeb, 0x6b, 0x8d, 0xe3,
	0x8d, 0xbb, 0xfb, 0xe3, 0x8f, 0x37, 0xb5, 0x0a, 0x4d, 0x57, 0x1e, 0x2a, 0xab, 0x8b, 0xf6, 0x6d,
	0x65, 0x8a, 0xc0, 0x4d, 0xe0, 0x66, 0x2f, 0xac, 0xe6, 0xca, 0xec, 0x7d, 0xd5, 0x48, 0xcd, 0x8b,
	0xda, 0x3e, 0x72, 0x53, 0xe3, 0x75, 0x2a, 0x53, 0xbc, 0x48, 0xef, 0xfe, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x5c, 0xf7, 0xae, 0xf7, 0xf5, 0x02, 0x00, 0x00,
}
