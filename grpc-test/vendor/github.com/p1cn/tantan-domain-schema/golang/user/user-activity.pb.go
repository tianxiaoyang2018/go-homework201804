// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user-activity.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserActivity struct {
	UserID         string       `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Timestamp      int64        `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Location       *GeoLocation `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Region         *Region      `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	DurationSecond int32        `protobuf:"varint,5,opt,name=durationSecond" json:"durationSecond,omitempty"`
	FirstTime      bool         `protobuf:"varint,6,opt,name=firstTime" json:"firstTime,omitempty"`
}

func (m *UserActivity) Reset()                    { *m = UserActivity{} }
func (m *UserActivity) String() string            { return proto.CompactTextString(m) }
func (*UserActivity) ProtoMessage()               {}
func (*UserActivity) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *UserActivity) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserActivity) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UserActivity) GetLocation() *GeoLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UserActivity) GetRegion() *Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *UserActivity) GetDurationSecond() int32 {
	if m != nil {
		return m.DurationSecond
	}
	return 0
}

func (m *UserActivity) GetFirstTime() bool {
	if m != nil {
		return m.FirstTime
	}
	return false
}

type GeoLocation struct {
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *GeoLocation) Reset()                    { *m = GeoLocation{} }
func (m *GeoLocation) String() string            { return proto.CompactTextString(m) }
func (*GeoLocation) ProtoMessage()               {}
func (*GeoLocation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GeoLocation) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GeoLocation) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

type Region struct {
	Country    *Translation `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Province   *Translation `protobuf:"bytes,2,opt,name=province" json:"province,omitempty"`
	City       *Translation `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	District   *Translation `protobuf:"bytes,4,opt,name=district" json:"district,omitempty"`
	CountryID  string       `protobuf:"bytes,5,opt,name=countryID" json:"countryID,omitempty"`
	ProvinceID string       `protobuf:"bytes,6,opt,name=provinceID" json:"provinceID,omitempty"`
	CityID     string       `protobuf:"bytes,7,opt,name=cityID" json:"cityID,omitempty"`
	DistrictID string       `protobuf:"bytes,8,opt,name=districtID" json:"districtID,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Region) GetCountry() *Translation {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Region) GetProvince() *Translation {
	if m != nil {
		return m.Province
	}
	return nil
}

func (m *Region) GetCity() *Translation {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *Region) GetDistrict() *Translation {
	if m != nil {
		return m.District
	}
	return nil
}

func (m *Region) GetCountryID() string {
	if m != nil {
		return m.CountryID
	}
	return ""
}

func (m *Region) GetProvinceID() string {
	if m != nil {
		return m.ProvinceID
	}
	return ""
}

func (m *Region) GetCityID() string {
	if m != nil {
		return m.CityID
	}
	return ""
}

func (m *Region) GetDistrictID() string {
	if m != nil {
		return m.DistrictID
	}
	return ""
}

type Translation struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	En   string `protobuf:"bytes,2,opt,name=en" json:"en,omitempty"`
	Zh   string `protobuf:"bytes,3,opt,name=zh" json:"zh,omitempty"`
	Ko   string `protobuf:"bytes,4,opt,name=ko" json:"ko,omitempty"`
	Ja   string `protobuf:"bytes,5,opt,name=ja" json:"ja,omitempty"`
}

func (m *Translation) Reset()                    { *m = Translation{} }
func (m *Translation) String() string            { return proto.CompactTextString(m) }
func (*Translation) ProtoMessage()               {}
func (*Translation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Translation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Translation) GetEn() string {
	if m != nil {
		return m.En
	}
	return ""
}

func (m *Translation) GetZh() string {
	if m != nil {
		return m.Zh
	}
	return ""
}

func (m *Translation) GetKo() string {
	if m != nil {
		return m.Ko
	}
	return ""
}

func (m *Translation) GetJa() string {
	if m != nil {
		return m.Ja
	}
	return ""
}

func init() {
	proto.RegisterType((*UserActivity)(nil), "user.UserActivity")
	proto.RegisterType((*GeoLocation)(nil), "user.GeoLocation")
	proto.RegisterType((*Region)(nil), "user.Region")
	proto.RegisterType((*Translation)(nil), "user.Translation")
}

func init() { proto.RegisterFile("user/user-activity.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0xc5, 0x6e, 0xea, 0xc6, 0x37, 0xa5, 0x30, 0x3d, 0x0c, 0x33, 0xc6, 0x30, 0x61, 0x1b, 0x86,
	0x91, 0x64, 0xeb, 0xbe, 0x60, 0xc3, 0x50, 0x0c, 0x7b, 0xd2, 0xba, 0x97, 0xbd, 0xa9, 0xb2, 0xe6,
	0xa8, 0xb5, 0xa5, 0x20, 0x5f, 0x17, 0xd2, 0xaf, 0xda, 0x1f, 0xed, 0x57, 0xc6, 0x95, 0x95, 0x38,
	0x1b, 0x7d, 0x31, 0xbe, 0xe7, 0x9c, 0x7b, 0x75, 0xcf, 0x41, 0x82, 0x6c, 0xe8, 0x95, 0xdb, 0xd0,
	0x67, 0x25, 0x24, 0xea, 0x47, 0x8d, 0xfb, 0xf5, 0xce, 0x59, 0xb4, 0x6c, 0x46, 0xe0, 0xf2, 0x4f,
	0x04, 0x97, 0x3f, 0x7a, 0xe5, 0xbe, 0x04, 0x92, 0xbd, 0x84, 0x84, 0x88, 0xaa, 0xcc, 0xa2, 0x3c,
	0x2a, 0x52, 0x1e, 0x2a, 0xf6, 0x1a, 0x52, 0xd4, 0x9d, 0xea, 0x51, 0x74, 0xbb, 0x2c, 0xce, 0xa3,
	0xe2, 0x8c, 0x4f, 0x00, 0x5b, 0xc1, 0xbc, 0xb5, 0x52, 0xa0, 0xb6, 0x26, 0x3b, 0xcb, 0xa3, 0x62,
	0x71, 0xfd, 0x62, 0x4d, 0x8d, 0xeb, 0x1b, 0x65, 0xbf, 0x05, 0x82, 0x1f, 0x25, 0xec, 0x2d, 0x24,
	0x4e, 0x35, 0x24, 0x9e, 0x79, 0xf1, 0xe5, 0x28, 0xe6, 0x1e, 0xe3, 0x81, 0x63, 0xef, 0xe1, 0xaa,
	0x1e, 0x9c, 0xef, 0xf8, 0xae, 0xa4, 0x35, 0x75, 0x76, 0x9e, 0x47, 0xc5, 0x39, 0xff, 0x0f, 0xa5,
	0xd5, 0x7e, 0x69, 0xd7, 0xe3, 0xad, 0xee, 0x54, 0x96, 0xe4, 0x51, 0x31, 0xe7, 0x13, 0xb0, 0xbc,
	0x81, 0xc5, 0xc9, 0x12, 0x24, 0x6e, 0xad, 0x69, 0x34, 0x0e, 0xb5, 0xf2, 0x16, 0x23, 0x3e, 0x01,
	0xec, 0x15, 0xcc, 0x5b, 0x81, 0x23, 0x19, 0x7b, 0xf2, 0x58, 0x2f, 0x7f, 0xc7, 0x90, 0x8c, 0x1b,
	0xb2, 0x0f, 0x70, 0x21, 0xed, 0x60, 0xd0, 0xed, 0xfd, 0x88, 0xa3, 0xdb, 0x5b, 0x27, 0x4c, 0xdf,
	0x8e, 0x6e, 0x0f, 0x0a, 0xca, 0x66, 0xe7, 0xec, 0xa3, 0x36, 0x72, 0x9c, 0xf9, 0xac, 0xfa, 0x28,
	0x61, 0xef, 0x60, 0x26, 0x35, 0xee, 0xff, 0x8d, 0xf1, 0x54, 0xea, 0x69, 0x9a, 0x5a, 0xeb, 0x1e,
	0x9d, 0x96, 0x18, 0x42, 0x7c, 0x6e, 0xea, 0x41, 0x42, 0xb6, 0xc3, 0x3e, 0x55, 0xe9, 0x63, 0x4c,
	0xf9, 0x04, 0xb0, 0x37, 0x00, 0x87, 0xf3, 0xab, 0xd2, 0x47, 0x98, 0xf2, 0x13, 0x84, 0x2e, 0x05,
	0x1d, 0x5a, 0x95, 0xd9, 0xc5, 0x78, 0x29, 0xc6, 0x8a, 0xfa, 0x0e, 0x27, 0x54, 0x65, 0x36, 0x1f,
	0xfb, 0x26, 0x64, 0x29, 0x60, 0x71, 0xb2, 0x0e, 0x63, 0x30, 0x33, 0xa2, 0x53, 0xe1, 0x66, 0xf9,
	0x7f, 0x76, 0x05, 0xb1, 0x32, 0x3e, 0x97, 0x94, 0xc7, 0xca, 0x50, 0xfd, 0xb4, 0xf5, 0xe6, 0x53,
	0x1e, 0x3f, 0x6d, 0xa9, 0x7e, 0xb0, 0xde, 0x61, 0xca, 0xe3, 0x07, 0x4b, 0xf5, 0xbd, 0x08, 0x0e,
	0xe2, 0x7b, 0xf1, 0xf5, 0xfa, 0xe7, 0xc7, 0x46, 0xe3, 0x76, 0xb8, 0x5b, 0x4b, 0xdb, 0x6d, 0x76,
	0x9f, 0xa4, 0xd9, 0xa0, 0x30, 0x28, 0xcc, 0xaa, 0xb6, 0x9d, 0xd0, 0x66, 0xd5, 0xcb, 0xad, 0xea,
	0xc4, 0xa6, 0xb1, 0xad, 0x30, 0x8d, 0x7f, 0x09, 0x77, 0x89, 0x7f, 0x01, 0x9f, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x46, 0x39, 0x96, 0x68, 0x1d, 0x03, 0x00, 0x00,
}
