// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user-link.service.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FindUserLinksByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *FindUserLinksByIDsRequest) Reset()                    { *m = FindUserLinksByIDsRequest{} }
func (m *FindUserLinksByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindUserLinksByIDsRequest) ProtoMessage()               {}
func (*FindUserLinksByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *FindUserLinksByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UserLinksReply struct {
	Links []*UserLink `protobuf:"bytes,1,rep,name=links" json:"links,omitempty"`
}

func (m *UserLinksReply) Reset()                    { *m = UserLinksReply{} }
func (m *UserLinksReply) String() string            { return proto.CompactTextString(m) }
func (*UserLinksReply) ProtoMessage()               {}
func (*UserLinksReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *UserLinksReply) GetLinks() []*UserLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type FindUserLinksBySecretsRequest struct {
	Secrets []string `protobuf:"bytes,1,rep,name=secrets" json:"secrets,omitempty"`
}

func (m *FindUserLinksBySecretsRequest) Reset()                    { *m = FindUserLinksBySecretsRequest{} }
func (m *FindUserLinksBySecretsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindUserLinksBySecretsRequest) ProtoMessage()               {}
func (*FindUserLinksBySecretsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *FindUserLinksBySecretsRequest) GetSecrets() []string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type InsertUserLinksRequest struct {
	Links []*UserLink `protobuf:"bytes,1,rep,name=links" json:"links,omitempty"`
}

func (m *InsertUserLinksRequest) Reset()                    { *m = InsertUserLinksRequest{} }
func (m *InsertUserLinksRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertUserLinksRequest) ProtoMessage()               {}
func (*InsertUserLinksRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *InsertUserLinksRequest) GetLinks() []*UserLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type UpdateUserLinksStateRequest struct {
	Links []*UserLink `protobuf:"bytes,1,rep,name=links" json:"links,omitempty"`
}

func (m *UpdateUserLinksStateRequest) Reset()                    { *m = UpdateUserLinksStateRequest{} }
func (m *UpdateUserLinksStateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserLinksStateRequest) ProtoMessage()               {}
func (*UpdateUserLinksStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *UpdateUserLinksStateRequest) GetLinks() []*UserLink {
	if m != nil {
		return m.Links
	}
	return nil
}

func init() {
	proto.RegisterType((*FindUserLinksByIDsRequest)(nil), "user.FindUserLinksByIDsRequest")
	proto.RegisterType((*UserLinksReply)(nil), "user.UserLinksReply")
	proto.RegisterType((*FindUserLinksBySecretsRequest)(nil), "user.FindUserLinksBySecretsRequest")
	proto.RegisterType((*InsertUserLinksRequest)(nil), "user.InsertUserLinksRequest")
	proto.RegisterType((*UpdateUserLinksStateRequest)(nil), "user.UpdateUserLinksStateRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserLinkService service

type UserLinkServiceClient interface {
	FindUserLinksByIDs(ctx context.Context, in *FindUserLinksByIDsRequest, opts ...grpc.CallOption) (*UserLinksReply, error)
	FindUserLinksBySecrets(ctx context.Context, in *FindUserLinksBySecretsRequest, opts ...grpc.CallOption) (*UserLinksReply, error)
	InsertUserLinks(ctx context.Context, in *InsertUserLinksRequest, opts ...grpc.CallOption) (*UserLinksReply, error)
	UpdateUserLinkState(ctx context.Context, in *UpdateUserLinksStateRequest, opts ...grpc.CallOption) (*UserLinksReply, error)
}

type userLinkServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserLinkServiceClient(cc *grpc.ClientConn) UserLinkServiceClient {
	return &userLinkServiceClient{cc}
}

func (c *userLinkServiceClient) FindUserLinksByIDs(ctx context.Context, in *FindUserLinksByIDsRequest, opts ...grpc.CallOption) (*UserLinksReply, error) {
	out := new(UserLinksReply)
	err := grpc.Invoke(ctx, "/user.UserLinkService/FindUserLinksByIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLinkServiceClient) FindUserLinksBySecrets(ctx context.Context, in *FindUserLinksBySecretsRequest, opts ...grpc.CallOption) (*UserLinksReply, error) {
	out := new(UserLinksReply)
	err := grpc.Invoke(ctx, "/user.UserLinkService/FindUserLinksBySecrets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLinkServiceClient) InsertUserLinks(ctx context.Context, in *InsertUserLinksRequest, opts ...grpc.CallOption) (*UserLinksReply, error) {
	out := new(UserLinksReply)
	err := grpc.Invoke(ctx, "/user.UserLinkService/InsertUserLinks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLinkServiceClient) UpdateUserLinkState(ctx context.Context, in *UpdateUserLinksStateRequest, opts ...grpc.CallOption) (*UserLinksReply, error) {
	out := new(UserLinksReply)
	err := grpc.Invoke(ctx, "/user.UserLinkService/UpdateUserLinkState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserLinkService service

type UserLinkServiceServer interface {
	FindUserLinksByIDs(context.Context, *FindUserLinksByIDsRequest) (*UserLinksReply, error)
	FindUserLinksBySecrets(context.Context, *FindUserLinksBySecretsRequest) (*UserLinksReply, error)
	InsertUserLinks(context.Context, *InsertUserLinksRequest) (*UserLinksReply, error)
	UpdateUserLinkState(context.Context, *UpdateUserLinksStateRequest) (*UserLinksReply, error)
}

func RegisterUserLinkServiceServer(s *grpc.Server, srv UserLinkServiceServer) {
	s.RegisterService(&_UserLinkService_serviceDesc, srv)
}

func _UserLinkService_FindUserLinksByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserLinksByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLinkServiceServer).FindUserLinksByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserLinkService/FindUserLinksByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLinkServiceServer).FindUserLinksByIDs(ctx, req.(*FindUserLinksByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLinkService_FindUserLinksBySecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserLinksBySecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLinkServiceServer).FindUserLinksBySecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserLinkService/FindUserLinksBySecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLinkServiceServer).FindUserLinksBySecrets(ctx, req.(*FindUserLinksBySecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLinkService_InsertUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLinkServiceServer).InsertUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserLinkService/InsertUserLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLinkServiceServer).InsertUserLinks(ctx, req.(*InsertUserLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLinkService_UpdateUserLinkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLinksStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLinkServiceServer).UpdateUserLinkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserLinkService/UpdateUserLinkState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLinkServiceServer).UpdateUserLinkState(ctx, req.(*UpdateUserLinksStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserLinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserLinkService",
	HandlerType: (*UserLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserLinksByIDs",
			Handler:    _UserLinkService_FindUserLinksByIDs_Handler,
		},
		{
			MethodName: "FindUserLinksBySecrets",
			Handler:    _UserLinkService_FindUserLinksBySecrets_Handler,
		},
		{
			MethodName: "InsertUserLinks",
			Handler:    _UserLinkService_InsertUserLinks_Handler,
		},
		{
			MethodName: "UpdateUserLinkState",
			Handler:    _UserLinkService_UpdateUserLinkState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user-link.service.proto",
}

func init() { proto.RegisterFile("user/user-link.service.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xd5, 0xf9, 0x03, 0x9f, 0xb0, 0x49, 0x1c, 0x63, 0xce, 0x89, 0x5a, 0x3d, 0x78, 0x69,
	0xab, 0x13, 0x04, 0x2f, 0x1e, 0xa6, 0x28, 0x03, 0x05, 0xe9, 0xd8, 0xc5, 0x5b, 0xd6, 0x3e, 0xb6,
	0xb0, 0x36, 0xad, 0x49, 0x2a, 0xec, 0xdf, 0xf4, 0x2f, 0x92, 0x36, 0x6b, 0xb1, 0xb5, 0x05, 0xbd,
	0x94, 0x26, 0xef, 0x9b, 0xef, 0x07, 0x3e, 0x3c, 0xe8, 0xc7, 0x12, 0x85, 0x9d, 0x7c, 0x4c, 0x9f,
	0xf1, 0x85, 0x25, 0x51, 0x7c, 0x32, 0x17, 0xad, 0x48, 0x84, 0x2a, 0x24, 0x9b, 0xc9, 0xa0, 0xd7,
	0x2e, 0x65, 0xd2, 0x99, 0x61, 0xc2, 0xe1, 0x13, 0xe3, 0xde, 0x44, 0xa2, 0x78, 0x61, 0x7c, 0x21,
	0x87, 0xcb, 0xd1, 0xa3, 0x74, 0xf0, 0x23, 0x46, 0xa9, 0xc8, 0x3e, 0x34, 0x98, 0x27, 0xbb, 0xeb,
	0xa7, 0x8d, 0xcb, 0x5d, 0x27, 0xf9, 0x35, 0x6e, 0xa1, 0x99, 0x47, 0x1d, 0x8c, 0xfc, 0x25, 0xb9,
	0x80, 0xad, 0xa4, 0x4e, 0xa7, 0xf6, 0x06, 0x4d, 0x2b, 0x21, 0x58, 0x59, 0xc8, 0xd1, 0x43, 0xe3,
	0x0e, 0x8e, 0x4b, 0x98, 0x31, 0xba, 0x02, 0x55, 0x8e, 0xea, 0xc2, 0x8e, 0xd4, 0x37, 0x2b, 0x5c,
	0x76, 0x34, 0xee, 0xa1, 0x33, 0xe2, 0x12, 0x85, 0xfa, 0x01, 0xd6, 0x6f, 0xfe, 0x86, 0x7e, 0x80,
	0xa3, 0x49, 0xe4, 0x51, 0x85, 0xf9, 0xfb, 0xb1, 0xa2, 0x0a, 0xff, 0x55, 0x32, 0xf8, 0xda, 0x80,
	0x56, 0x76, 0x37, 0xd6, 0x72, 0xc9, 0x2b, 0x90, 0xdf, 0xea, 0xc8, 0x89, 0x2e, 0xa8, 0x95, 0xda,
	0x6b, 0x17, 0x09, 0x5a, 0xa3, 0xb1, 0x46, 0x26, 0xd0, 0xa9, 0x56, 0x44, 0xce, 0x2b, 0x2b, 0x8b,
	0x02, 0x6b, 0x6b, 0x9f, 0xa1, 0x55, 0xd2, 0x47, 0xfa, 0x3a, 0x5a, 0x6d, 0xb5, 0xb6, 0xe8, 0x0d,
	0x0e, 0x8a, 0x1e, 0x53, 0x8d, 0xe4, 0x6c, 0x15, 0xaf, 0x57, 0x5c, 0xd7, 0x38, 0x1c, 0xbc, 0x5f,
	0xcd, 0x98, 0x9a, 0xc7, 0x53, 0xcb, 0x0d, 0x03, 0x3b, 0xba, 0x76, 0xb9, 0xad, 0x28, 0x57, 0x94,
	0x9b, 0x5e, 0x18, 0x50, 0xc6, 0x4d, 0xe9, 0xce, 0x31, 0xa0, 0xf6, 0x2c, 0xf4, 0x29, 0x9f, 0xa5,
	0xab, 0x3b, 0xdd, 0x4e, 0xd7, 0xf6, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x77, 0xd9, 0x6f, 0x10,
	0xf2, 0x02, 0x00, 0x00,
}
