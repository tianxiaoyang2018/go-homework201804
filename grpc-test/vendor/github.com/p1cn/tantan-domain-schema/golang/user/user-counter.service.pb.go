// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user-counter.service.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *GetRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetReply struct {
	UserCounter *UserCounter `protobuf:"bytes,1,opt,name=userCounter" json:"userCounter,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *GetReply) GetUserCounter() *UserCounter {
	if m != nil {
		return m.UserCounter
	}
	return nil
}

type GetEnvelopeCounterRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *GetEnvelopeCounterRequest) Reset()                    { *m = GetEnvelopeCounterRequest{} }
func (m *GetEnvelopeCounterRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEnvelopeCounterRequest) ProtoMessage()               {}
func (*GetEnvelopeCounterRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *GetEnvelopeCounterRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetEnvelopeCounterReply struct {
	CounterBytes []byte  `protobuf:"bytes,1,opt,name=counterBytes,proto3" json:"counterBytes,omitempty"`
	Popularity   float64 `protobuf:"fixed64,2,opt,name=popularity" json:"popularity,omitempty"`
}

func (m *GetEnvelopeCounterReply) Reset()                    { *m = GetEnvelopeCounterReply{} }
func (m *GetEnvelopeCounterReply) String() string            { return proto.CompactTextString(m) }
func (*GetEnvelopeCounterReply) ProtoMessage()               {}
func (*GetEnvelopeCounterReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *GetEnvelopeCounterReply) GetCounterBytes() []byte {
	if m != nil {
		return m.CounterBytes
	}
	return nil
}

func (m *GetEnvelopeCounterReply) GetPopularity() float64 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

type MGetRequest struct {
	UserIds []string `protobuf:"bytes,1,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *MGetRequest) Reset()                    { *m = MGetRequest{} }
func (m *MGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MGetRequest) ProtoMessage()               {}
func (*MGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *MGetRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type MGetReply struct {
	UserCounters []*UserCounter `protobuf:"bytes,1,rep,name=userCounters" json:"userCounters,omitempty"`
}

func (m *MGetReply) Reset()                    { *m = MGetReply{} }
func (m *MGetReply) String() string            { return proto.CompactTextString(m) }
func (*MGetReply) ProtoMessage()               {}
func (*MGetReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *MGetReply) GetUserCounters() []*UserCounter {
	if m != nil {
		return m.UserCounters
	}
	return nil
}

type GetPopularityRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *GetPopularityRequest) Reset()                    { *m = GetPopularityRequest{} }
func (m *GetPopularityRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPopularityRequest) ProtoMessage()               {}
func (*GetPopularityRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *GetPopularityRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetPopularityReply struct {
	Popularity float64 `protobuf:"fixed64,1,opt,name=popularity" json:"popularity,omitempty"`
}

func (m *GetPopularityReply) Reset()                    { *m = GetPopularityReply{} }
func (m *GetPopularityReply) String() string            { return proto.CompactTextString(m) }
func (*GetPopularityReply) ProtoMessage()               {}
func (*GetPopularityReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *GetPopularityReply) GetPopularity() float64 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

type UpdateUnreadActivitiesRequest struct {
	UserId           string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	UnreadActivities int64  `protobuf:"varint,2,opt,name=unreadActivities" json:"unreadActivities,omitempty"`
}

func (m *UpdateUnreadActivitiesRequest) Reset()                    { *m = UpdateUnreadActivitiesRequest{} }
func (m *UpdateUnreadActivitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUnreadActivitiesRequest) ProtoMessage()               {}
func (*UpdateUnreadActivitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *UpdateUnreadActivitiesRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateUnreadActivitiesRequest) GetUnreadActivities() int64 {
	if m != nil {
		return m.UnreadActivities
	}
	return 0
}

type UpdateUnreadActivitiesReply struct {
}

func (m *UpdateUnreadActivitiesReply) Reset()                    { *m = UpdateUnreadActivitiesReply{} }
func (m *UpdateUnreadActivitiesReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateUnreadActivitiesReply) ProtoMessage()               {}
func (*UpdateUnreadActivitiesReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

type UpdateWithDeltaRequest struct {
	UserCounter *UserCounter `protobuf:"bytes,1,opt,name=userCounter" json:"userCounter,omitempty"`
}

func (m *UpdateWithDeltaRequest) Reset()                    { *m = UpdateWithDeltaRequest{} }
func (m *UpdateWithDeltaRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWithDeltaRequest) ProtoMessage()               {}
func (*UpdateWithDeltaRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *UpdateWithDeltaRequest) GetUserCounter() *UserCounter {
	if m != nil {
		return m.UserCounter
	}
	return nil
}

type UpdateWithDeltaReply struct {
	Popularity float64 `protobuf:"fixed64,1,opt,name=popularity" json:"popularity,omitempty"`
}

func (m *UpdateWithDeltaReply) Reset()                    { *m = UpdateWithDeltaReply{} }
func (m *UpdateWithDeltaReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateWithDeltaReply) ProtoMessage()               {}
func (*UpdateWithDeltaReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *UpdateWithDeltaReply) GetPopularity() float64 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

type UpsertRequest struct {
	UserCounter *UserCounter `protobuf:"bytes,1,opt,name=userCounter" json:"userCounter,omitempty"`
}

func (m *UpsertRequest) Reset()                    { *m = UpsertRequest{} }
func (m *UpsertRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertRequest) ProtoMessage()               {}
func (*UpsertRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *UpsertRequest) GetUserCounter() *UserCounter {
	if m != nil {
		return m.UserCounter
	}
	return nil
}

type UpsertReply struct {
}

func (m *UpsertReply) Reset()                    { *m = UpsertReply{} }
func (m *UpsertReply) String() string            { return proto.CompactTextString(m) }
func (*UpsertReply) ProtoMessage()               {}
func (*UpsertReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

type UpdateSecretCrushRequest struct {
	UserCounter *UserCounter `protobuf:"bytes,1,opt,name=userCounter" json:"userCounter,omitempty"`
}

func (m *UpdateSecretCrushRequest) Reset()                    { *m = UpdateSecretCrushRequest{} }
func (m *UpdateSecretCrushRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSecretCrushRequest) ProtoMessage()               {}
func (*UpdateSecretCrushRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *UpdateSecretCrushRequest) GetUserCounter() *UserCounter {
	if m != nil {
		return m.UserCounter
	}
	return nil
}

type UpdateSecretCrushReply struct {
}

func (m *UpdateSecretCrushReply) Reset()                    { *m = UpdateSecretCrushReply{} }
func (m *UpdateSecretCrushReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateSecretCrushReply) ProtoMessage()               {}
func (*UpdateSecretCrushReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

type UpsertSuperLikeDailyQuotaRequest struct {
	UserCounter *UserCounter `protobuf:"bytes,1,opt,name=userCounter" json:"userCounter,omitempty"`
}

func (m *UpsertSuperLikeDailyQuotaRequest) Reset()         { *m = UpsertSuperLikeDailyQuotaRequest{} }
func (m *UpsertSuperLikeDailyQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertSuperLikeDailyQuotaRequest) ProtoMessage()    {}
func (*UpsertSuperLikeDailyQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{16}
}

func (m *UpsertSuperLikeDailyQuotaRequest) GetUserCounter() *UserCounter {
	if m != nil {
		return m.UserCounter
	}
	return nil
}

type UpsertSuperLikeDailyQuotaReply struct {
}

func (m *UpsertSuperLikeDailyQuotaReply) Reset()                    { *m = UpsertSuperLikeDailyQuotaReply{} }
func (m *UpsertSuperLikeDailyQuotaReply) String() string            { return proto.CompactTextString(m) }
func (*UpsertSuperLikeDailyQuotaReply) ProtoMessage()               {}
func (*UpsertSuperLikeDailyQuotaReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

type UpdateWithDeltaWithReturningRequest struct {
	UserCounter *UserCounter `protobuf:"bytes,1,opt,name=userCounter" json:"userCounter,omitempty"`
}

func (m *UpdateWithDeltaWithReturningRequest) Reset()         { *m = UpdateWithDeltaWithReturningRequest{} }
func (m *UpdateWithDeltaWithReturningRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWithDeltaWithReturningRequest) ProtoMessage()    {}
func (*UpdateWithDeltaWithReturningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{18}
}

func (m *UpdateWithDeltaWithReturningRequest) GetUserCounter() *UserCounter {
	if m != nil {
		return m.UserCounter
	}
	return nil
}

type UpdateWithDeltaWithReturningReply struct {
	CounterBytes []byte  `protobuf:"bytes,1,opt,name=counterBytes,proto3" json:"counterBytes,omitempty"`
	Popularity   float64 `protobuf:"fixed64,2,opt,name=popularity" json:"popularity,omitempty"`
}

func (m *UpdateWithDeltaWithReturningReply) Reset()         { *m = UpdateWithDeltaWithReturningReply{} }
func (m *UpdateWithDeltaWithReturningReply) String() string { return proto.CompactTextString(m) }
func (*UpdateWithDeltaWithReturningReply) ProtoMessage()    {}
func (*UpdateWithDeltaWithReturningReply) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{19}
}

func (m *UpdateWithDeltaWithReturningReply) GetCounterBytes() []byte {
	if m != nil {
		return m.CounterBytes
	}
	return nil
}

func (m *UpdateWithDeltaWithReturningReply) GetPopularity() float64 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "user.GetRequest")
	proto.RegisterType((*GetReply)(nil), "user.GetReply")
	proto.RegisterType((*GetEnvelopeCounterRequest)(nil), "user.GetEnvelopeCounterRequest")
	proto.RegisterType((*GetEnvelopeCounterReply)(nil), "user.GetEnvelopeCounterReply")
	proto.RegisterType((*MGetRequest)(nil), "user.MGetRequest")
	proto.RegisterType((*MGetReply)(nil), "user.MGetReply")
	proto.RegisterType((*GetPopularityRequest)(nil), "user.GetPopularityRequest")
	proto.RegisterType((*GetPopularityReply)(nil), "user.GetPopularityReply")
	proto.RegisterType((*UpdateUnreadActivitiesRequest)(nil), "user.UpdateUnreadActivitiesRequest")
	proto.RegisterType((*UpdateUnreadActivitiesReply)(nil), "user.UpdateUnreadActivitiesReply")
	proto.RegisterType((*UpdateWithDeltaRequest)(nil), "user.UpdateWithDeltaRequest")
	proto.RegisterType((*UpdateWithDeltaReply)(nil), "user.UpdateWithDeltaReply")
	proto.RegisterType((*UpsertRequest)(nil), "user.UpsertRequest")
	proto.RegisterType((*UpsertReply)(nil), "user.UpsertReply")
	proto.RegisterType((*UpdateSecretCrushRequest)(nil), "user.UpdateSecretCrushRequest")
	proto.RegisterType((*UpdateSecretCrushReply)(nil), "user.UpdateSecretCrushReply")
	proto.RegisterType((*UpsertSuperLikeDailyQuotaRequest)(nil), "user.UpsertSuperLikeDailyQuotaRequest")
	proto.RegisterType((*UpsertSuperLikeDailyQuotaReply)(nil), "user.UpsertSuperLikeDailyQuotaReply")
	proto.RegisterType((*UpdateWithDeltaWithReturningRequest)(nil), "user.UpdateWithDeltaWithReturningRequest")
	proto.RegisterType((*UpdateWithDeltaWithReturningReply)(nil), "user.UpdateWithDeltaWithReturningReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserCounterService service

type UserCounterServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	GetEnvelopeCounter(ctx context.Context, in *GetEnvelopeCounterRequest, opts ...grpc.CallOption) (*GetEnvelopeCounterReply, error)
	MGet(ctx context.Context, in *MGetRequest, opts ...grpc.CallOption) (*MGetReply, error)
	GetPopularity(ctx context.Context, in *GetPopularityRequest, opts ...grpc.CallOption) (*GetPopularityReply, error)
	UpdateUnreadActivities(ctx context.Context, in *UpdateUnreadActivitiesRequest, opts ...grpc.CallOption) (*UpdateUnreadActivitiesReply, error)
	UpdateWithDelta(ctx context.Context, in *UpdateWithDeltaRequest, opts ...grpc.CallOption) (*UpdateWithDeltaReply, error)
	UpdateWithDeltaWithReturning(ctx context.Context, in *UpdateWithDeltaWithReturningRequest, opts ...grpc.CallOption) (*UpdateWithDeltaWithReturningReply, error)
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertReply, error)
	UpdateSecretCrush(ctx context.Context, in *UpdateSecretCrushRequest, opts ...grpc.CallOption) (*UpdateSecretCrushReply, error)
	UpsertSuperLikeDailyQuota(ctx context.Context, in *UpsertSuperLikeDailyQuotaRequest, opts ...grpc.CallOption) (*UpsertSuperLikeDailyQuotaReply, error)
}

type userCounterServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserCounterServiceClient(cc *grpc.ClientConn) UserCounterServiceClient {
	return &userCounterServiceClient{cc}
}

func (c *userCounterServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) GetEnvelopeCounter(ctx context.Context, in *GetEnvelopeCounterRequest, opts ...grpc.CallOption) (*GetEnvelopeCounterReply, error) {
	out := new(GetEnvelopeCounterReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/GetEnvelopeCounter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) MGet(ctx context.Context, in *MGetRequest, opts ...grpc.CallOption) (*MGetReply, error) {
	out := new(MGetReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/MGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) GetPopularity(ctx context.Context, in *GetPopularityRequest, opts ...grpc.CallOption) (*GetPopularityReply, error) {
	out := new(GetPopularityReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/GetPopularity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) UpdateUnreadActivities(ctx context.Context, in *UpdateUnreadActivitiesRequest, opts ...grpc.CallOption) (*UpdateUnreadActivitiesReply, error) {
	out := new(UpdateUnreadActivitiesReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/UpdateUnreadActivities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) UpdateWithDelta(ctx context.Context, in *UpdateWithDeltaRequest, opts ...grpc.CallOption) (*UpdateWithDeltaReply, error) {
	out := new(UpdateWithDeltaReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/UpdateWithDelta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) UpdateWithDeltaWithReturning(ctx context.Context, in *UpdateWithDeltaWithReturningRequest, opts ...grpc.CallOption) (*UpdateWithDeltaWithReturningReply, error) {
	out := new(UpdateWithDeltaWithReturningReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/UpdateWithDeltaWithReturning", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertReply, error) {
	out := new(UpsertReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/Upsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) UpdateSecretCrush(ctx context.Context, in *UpdateSecretCrushRequest, opts ...grpc.CallOption) (*UpdateSecretCrushReply, error) {
	out := new(UpdateSecretCrushReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/UpdateSecretCrush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCounterServiceClient) UpsertSuperLikeDailyQuota(ctx context.Context, in *UpsertSuperLikeDailyQuotaRequest, opts ...grpc.CallOption) (*UpsertSuperLikeDailyQuotaReply, error) {
	out := new(UpsertSuperLikeDailyQuotaReply)
	err := grpc.Invoke(ctx, "/user.UserCounterService/UpsertSuperLikeDailyQuota", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserCounterService service

type UserCounterServiceServer interface {
	Get(context.Context, *GetRequest) (*GetReply, error)
	GetEnvelopeCounter(context.Context, *GetEnvelopeCounterRequest) (*GetEnvelopeCounterReply, error)
	MGet(context.Context, *MGetRequest) (*MGetReply, error)
	GetPopularity(context.Context, *GetPopularityRequest) (*GetPopularityReply, error)
	UpdateUnreadActivities(context.Context, *UpdateUnreadActivitiesRequest) (*UpdateUnreadActivitiesReply, error)
	UpdateWithDelta(context.Context, *UpdateWithDeltaRequest) (*UpdateWithDeltaReply, error)
	UpdateWithDeltaWithReturning(context.Context, *UpdateWithDeltaWithReturningRequest) (*UpdateWithDeltaWithReturningReply, error)
	Upsert(context.Context, *UpsertRequest) (*UpsertReply, error)
	UpdateSecretCrush(context.Context, *UpdateSecretCrushRequest) (*UpdateSecretCrushReply, error)
	UpsertSuperLikeDailyQuota(context.Context, *UpsertSuperLikeDailyQuotaRequest) (*UpsertSuperLikeDailyQuotaReply, error)
}

func RegisterUserCounterServiceServer(s *grpc.Server, srv UserCounterServiceServer) {
	s.RegisterService(&_UserCounterService_serviceDesc, srv)
}

func _UserCounterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_GetEnvelopeCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvelopeCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).GetEnvelopeCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/GetEnvelopeCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).GetEnvelopeCounter(ctx, req.(*GetEnvelopeCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_MGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).MGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/MGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).MGet(ctx, req.(*MGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_GetPopularity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPopularityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).GetPopularity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/GetPopularity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).GetPopularity(ctx, req.(*GetPopularityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_UpdateUnreadActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnreadActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).UpdateUnreadActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/UpdateUnreadActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).UpdateUnreadActivities(ctx, req.(*UpdateUnreadActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_UpdateWithDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithDeltaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).UpdateWithDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/UpdateWithDelta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).UpdateWithDelta(ctx, req.(*UpdateWithDeltaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_UpdateWithDeltaWithReturning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithDeltaWithReturningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).UpdateWithDeltaWithReturning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/UpdateWithDeltaWithReturning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).UpdateWithDeltaWithReturning(ctx, req.(*UpdateWithDeltaWithReturningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_UpdateSecretCrush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretCrushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).UpdateSecretCrush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/UpdateSecretCrush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).UpdateSecretCrush(ctx, req.(*UpdateSecretCrushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCounterService_UpsertSuperLikeDailyQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSuperLikeDailyQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCounterServiceServer).UpsertSuperLikeDailyQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserCounterService/UpsertSuperLikeDailyQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCounterServiceServer).UpsertSuperLikeDailyQuota(ctx, req.(*UpsertSuperLikeDailyQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserCounterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserCounterService",
	HandlerType: (*UserCounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserCounterService_Get_Handler,
		},
		{
			MethodName: "GetEnvelopeCounter",
			Handler:    _UserCounterService_GetEnvelopeCounter_Handler,
		},
		{
			MethodName: "MGet",
			Handler:    _UserCounterService_MGet_Handler,
		},
		{
			MethodName: "GetPopularity",
			Handler:    _UserCounterService_GetPopularity_Handler,
		},
		{
			MethodName: "UpdateUnreadActivities",
			Handler:    _UserCounterService_UpdateUnreadActivities_Handler,
		},
		{
			MethodName: "UpdateWithDelta",
			Handler:    _UserCounterService_UpdateWithDelta_Handler,
		},
		{
			MethodName: "UpdateWithDeltaWithReturning",
			Handler:    _UserCounterService_UpdateWithDeltaWithReturning_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _UserCounterService_Upsert_Handler,
		},
		{
			MethodName: "UpdateSecretCrush",
			Handler:    _UserCounterService_UpdateSecretCrush_Handler,
		},
		{
			MethodName: "UpsertSuperLikeDailyQuota",
			Handler:    _UserCounterService_UpsertSuperLikeDailyQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user-counter.service.proto",
}

func init() { proto.RegisterFile("user/user-counter.service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xef, 0x4f, 0xd3, 0x50,
	0x14, 0x75, 0x42, 0xa6, 0xdc, 0x81, 0xc0, 0x93, 0x40, 0x79, 0xf2, 0x63, 0x14, 0x22, 0x60, 0xa4,
	0xd3, 0xa1, 0x7e, 0x35, 0xc2, 0xcc, 0x62, 0xe2, 0xa2, 0x76, 0x99, 0x24, 0x24, 0x7e, 0xe8, 0xba,
	0x9b, 0xad, 0xa1, 0x6b, 0x6b, 0xfb, 0xba, 0x64, 0x7f, 0x94, 0xff, 0xa3, 0x79, 0x7d, 0xeb, 0x78,
	0xfd, 0xb5, 0x11, 0xe7, 0x97, 0x65, 0xbd, 0xf7, 0xdc, 0x73, 0xde, 0xbd, 0x7d, 0xf7, 0xa4, 0x70,
	0x18, 0x06, 0xe8, 0xd7, 0xf8, 0xcf, 0x85, 0xe9, 0x86, 0x0e, 0x43, 0x5f, 0x0b, 0xd0, 0x1f, 0x59,
	0x26, 0x6a, 0x9e, 0xef, 0x32, 0x97, 0x2c, 0xf3, 0x1c, 0xdd, 0xc9, 0xc2, 0xa2, 0xb4, 0x7a, 0x02,
	0xd0, 0x44, 0xa6, 0xe3, 0xef, 0x10, 0x03, 0x46, 0xb6, 0xa1, 0xcc, 0x31, 0x5f, 0x7a, 0x4a, 0xa9,
	0x5a, 0x3a, 0x5b, 0xd1, 0x27, 0x4f, 0xea, 0x47, 0x78, 0x1a, 0xa1, 0x3c, 0x7b, 0x4c, 0x2e, 0xa1,
	0xc2, 0xa3, 0xd7, 0x82, 0x26, 0x02, 0x56, 0xea, 0x9b, 0x1a, 0x8f, 0x69, 0x9d, 0xfb, 0x84, 0x2e,
	0xa3, 0xd4, 0x4b, 0xd8, 0x6d, 0x22, 0xfb, 0xec, 0x8c, 0xd0, 0x76, 0x3d, 0x8c, 0x21, 0x73, 0x54,
	0x7f, 0xc1, 0x4e, 0x5e, 0x11, 0x3f, 0x84, 0x0a, 0xab, 0x93, 0x3e, 0xae, 0xc6, 0x0c, 0x83, 0xa8,
	0x70, 0x55, 0x4f, 0xc4, 0xc8, 0x01, 0x80, 0xe7, 0x7a, 0xa1, 0x6d, 0xf8, 0x16, 0x1b, 0x2b, 0x8f,
	0xab, 0xa5, 0xb3, 0x92, 0x2e, 0x45, 0xd4, 0x53, 0xa8, 0xb4, 0xa4, 0xde, 0x15, 0x78, 0x22, 0x74,
	0x39, 0xdb, 0xd2, 0xd9, 0x8a, 0x1e, 0x3f, 0xaa, 0x57, 0xb0, 0xd2, 0x9a, 0xb6, 0xff, 0x1e, 0x56,
	0xa5, 0xc6, 0x04, 0x36, 0xb7, 0xff, 0x04, 0x4c, 0xd5, 0x60, 0xab, 0x89, 0xec, 0xfb, 0x54, 0x7d,
	0x5e, 0xef, 0xef, 0x80, 0xa4, 0xf0, 0x5c, 0x3c, 0xd9, 0x52, 0x29, 0xd3, 0x92, 0x09, 0xfb, 0x1d,
	0xaf, 0x67, 0x30, 0xec, 0x38, 0x3e, 0x1a, 0xbd, 0x4f, 0x26, 0xb3, 0x46, 0x16, 0xb3, 0x30, 0x98,
	0x23, 0x47, 0x5e, 0xc1, 0x46, 0x98, 0x2a, 0x89, 0x26, 0xb6, 0xa4, 0x67, 0xe2, 0xea, 0x3e, 0xbc,
	0x28, 0x12, 0xf1, 0xec, 0xb1, 0xda, 0x82, 0x6d, 0x91, 0xbe, 0xb1, 0xd8, 0xa0, 0x81, 0x36, 0x33,
	0x62, 0xf1, 0x7f, 0xba, 0x39, 0x1f, 0x60, 0x2b, 0x43, 0xf7, 0x90, 0x51, 0x34, 0x60, 0xad, 0xe3,
	0x05, 0xe8, 0xb3, 0x85, 0xd4, 0xd7, 0xa0, 0x12, 0xb3, 0xf0, 0xde, 0xbe, 0x81, 0x22, 0x0e, 0xd3,
	0x46, 0xd3, 0x47, 0x76, 0xed, 0x87, 0xc1, 0x60, 0x21, 0x7e, 0x25, 0x1e, 0x56, 0x82, 0x90, 0x4b,
	0xdd, 0x40, 0x55, 0x28, 0xb7, 0x43, 0x0f, 0xfd, 0xaf, 0xd6, 0x1d, 0x36, 0x0c, 0xcb, 0x1e, 0xff,
	0x08, 0xdd, 0x05, 0x07, 0x5a, 0x85, 0x83, 0x19, 0xc4, 0x5c, 0xfa, 0x16, 0x8e, 0x53, 0x23, 0xe7,
	0x7f, 0x74, 0x64, 0xa1, 0xef, 0x58, 0x4e, 0x7f, 0x21, 0xf5, 0x3e, 0x1c, 0xcd, 0xe6, 0xfe, 0x4f,
	0xdb, 0x5d, 0xff, 0x53, 0x06, 0x22, 0x9d, 0xa2, 0x2d, 0x4c, 0x91, 0x9c, 0xc3, 0x52, 0x13, 0x19,
	0xd9, 0x10, 0xc7, 0xbc, 0x5f, 0x7f, 0xfa, 0x4c, 0x8a, 0xf0, 0x21, 0x3c, 0x22, 0x3f, 0xa3, 0x15,
	0x4c, 0xd9, 0x0f, 0x39, 0x9c, 0xe2, 0xf2, 0xdd, 0x8c, 0xee, 0x17, 0x03, 0x04, 0xef, 0x6b, 0x58,
	0xe6, 0x76, 0x42, 0x26, 0xa3, 0x92, 0x3c, 0x88, 0xae, 0xcb, 0x21, 0x81, 0x6e, 0xc2, 0x5a, 0xc2,
	0x08, 0x08, 0x9d, 0xf2, 0x67, 0xdc, 0x84, 0x2a, 0xb9, 0x39, 0x41, 0xd4, 0x8d, 0xaf, 0x5a, 0x7a,
	0x6d, 0xc9, 0xf1, 0xe4, 0x9d, 0xcd, 0x72, 0x0e, 0x7a, 0x34, 0x1b, 0x24, 0x34, 0x5a, 0xb0, 0x9e,
	0x7a, 0xbb, 0x64, 0x4f, 0xae, 0x4b, 0x5b, 0x02, 0xa5, 0x05, 0x59, 0x41, 0xc7, 0x60, 0x6f, 0xd6,
	0x65, 0x21, 0xe7, 0xb9, 0xd5, 0x79, 0x97, 0x95, 0x9e, 0x3e, 0x04, 0x2a, 0x54, 0xeb, 0x50, 0x16,
	0x0b, 0x42, 0x9e, 0xc7, 0x45, 0x92, 0x8f, 0xd0, 0xcd, 0x64, 0x50, 0xd4, 0xb4, 0x61, 0x33, 0xb3,
	0xc7, 0xe4, 0x40, 0xd6, 0xcc, 0x3a, 0x06, 0xdd, 0x2b, 0xcc, 0x0b, 0xd2, 0x3b, 0xd8, 0x2d, 0xdc,
	0x54, 0xf2, 0x52, 0x3e, 0x46, 0xb1, 0x47, 0xd0, 0x93, 0xb9, 0xb8, 0x48, 0xec, 0xaa, 0x7e, 0xfb,
	0xa6, 0x6f, 0xb1, 0x41, 0xd8, 0xd5, 0x4c, 0x77, 0x58, 0xf3, 0xde, 0x9a, 0x4e, 0x8d, 0x19, 0x0e,
	0x33, 0x9c, 0x8b, 0x9e, 0x3b, 0x34, 0x2c, 0xe7, 0x22, 0x30, 0x07, 0x38, 0x34, 0x6a, 0x7d, 0xd7,
	0x36, 0x9c, 0x7e, 0xf4, 0x29, 0xd1, 0x2d, 0x47, 0xdf, 0x10, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x43, 0x58, 0x33, 0x0e, 0x85, 0x08, 0x00, 0x00,
}
