// Code generated by protoc-gen-go. DO NOT EDIT.
// source: membership/user_total_privilege.service.proto

package membership

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetUserPrivilegesForCountersRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetUserPrivilegesForCountersRequest) Reset()         { *m = GetUserPrivilegesForCountersRequest{} }
func (m *GetUserPrivilegesForCountersRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserPrivilegesForCountersRequest) ProtoMessage()    {}
func (*GetUserPrivilegesForCountersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0}
}

func (m *GetUserPrivilegesForCountersRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetUserPrivilegesForCountersReply struct {
	BoostLimits []*BoostLimit `protobuf:"bytes,1,rep,name=boostLimits" json:"boostLimits,omitempty"`
	BoostBadge  *BoostBadge   `protobuf:"bytes,2,opt,name=boostBadge" json:"boostBadge,omitempty"`
	WhoLikedMe  *WhoLikedMe   `protobuf:"bytes,3,opt,name=whoLikedMe" json:"whoLikedMe,omitempty"`
}

func (m *GetUserPrivilegesForCountersReply) Reset()         { *m = GetUserPrivilegesForCountersReply{} }
func (m *GetUserPrivilegesForCountersReply) String() string { return proto.CompactTextString(m) }
func (*GetUserPrivilegesForCountersReply) ProtoMessage()    {}
func (*GetUserPrivilegesForCountersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{1}
}

func (m *GetUserPrivilegesForCountersReply) GetBoostLimits() []*BoostLimit {
	if m != nil {
		return m.BoostLimits
	}
	return nil
}

func (m *GetUserPrivilegesForCountersReply) GetBoostBadge() *BoostBadge {
	if m != nil {
		return m.BoostBadge
	}
	return nil
}

func (m *GetUserPrivilegesForCountersReply) GetWhoLikedMe() *WhoLikedMe {
	if m != nil {
		return m.WhoLikedMe
	}
	return nil
}

type GiveBoostOnceByItemIDRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	ItemID string `protobuf:"bytes,2,opt,name=itemID" json:"itemID,omitempty"`
}

func (m *GiveBoostOnceByItemIDRequest) Reset()                    { *m = GiveBoostOnceByItemIDRequest{} }
func (m *GiveBoostOnceByItemIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GiveBoostOnceByItemIDRequest) ProtoMessage()               {}
func (*GiveBoostOnceByItemIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *GiveBoostOnceByItemIDRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GiveBoostOnceByItemIDRequest) GetItemID() string {
	if m != nil {
		return m.ItemID
	}
	return ""
}

type GiveBoostOnceByItemIDReply struct {
	UserTotalPrivilege []*UserTotalPrivilege `protobuf:"bytes,1,rep,name=UserTotalPrivilege" json:"UserTotalPrivilege,omitempty"`
}

func (m *GiveBoostOnceByItemIDReply) Reset()                    { *m = GiveBoostOnceByItemIDReply{} }
func (m *GiveBoostOnceByItemIDReply) String() string            { return proto.CompactTextString(m) }
func (*GiveBoostOnceByItemIDReply) ProtoMessage()               {}
func (*GiveBoostOnceByItemIDReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *GiveBoostOnceByItemIDReply) GetUserTotalPrivilege() []*UserTotalPrivilege {
	if m != nil {
		return m.UserTotalPrivilege
	}
	return nil
}

type FindUserTotalPrivilegeByAttributionRequest struct {
	UserID          string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	AttributionID   string `protobuf:"bytes,2,opt,name=attributionID" json:"attributionID,omitempty"`
	AttributionType string `protobuf:"bytes,3,opt,name=attributionType" json:"attributionType,omitempty"`
}

func (m *FindUserTotalPrivilegeByAttributionRequest) Reset() {
	*m = FindUserTotalPrivilegeByAttributionRequest{}
}
func (m *FindUserTotalPrivilegeByAttributionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*FindUserTotalPrivilegeByAttributionRequest) ProtoMessage() {}
func (*FindUserTotalPrivilegeByAttributionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{4}
}

func (m *FindUserTotalPrivilegeByAttributionRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *FindUserTotalPrivilegeByAttributionRequest) GetAttributionID() string {
	if m != nil {
		return m.AttributionID
	}
	return ""
}

func (m *FindUserTotalPrivilegeByAttributionRequest) GetAttributionType() string {
	if m != nil {
		return m.AttributionType
	}
	return ""
}

type FindUserTotalPrivilegeByAttributionReply struct {
	UserTotalPrivilege []*UserTotalPrivilege `protobuf:"bytes,1,rep,name=UserTotalPrivilege" json:"UserTotalPrivilege,omitempty"`
}

func (m *FindUserTotalPrivilegeByAttributionReply) Reset() {
	*m = FindUserTotalPrivilegeByAttributionReply{}
}
func (m *FindUserTotalPrivilegeByAttributionReply) String() string { return proto.CompactTextString(m) }
func (*FindUserTotalPrivilegeByAttributionReply) ProtoMessage()    {}
func (*FindUserTotalPrivilegeByAttributionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{5}
}

func (m *FindUserTotalPrivilegeByAttributionReply) GetUserTotalPrivilege() []*UserTotalPrivilege {
	if m != nil {
		return m.UserTotalPrivilege
	}
	return nil
}

type GetBoostRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetBoostRequest) Reset()                    { *m = GetBoostRequest{} }
func (m *GetBoostRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBoostRequest) ProtoMessage()               {}
func (*GetBoostRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *GetBoostRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetBoostReply struct {
	BoostLimit []*BoostLimit `protobuf:"bytes,1,rep,name=boostLimit" json:"boostLimit,omitempty"`
	BoostBadge *BoostBadge   `protobuf:"bytes,2,opt,name=boostBadge" json:"boostBadge,omitempty"`
}

func (m *GetBoostReply) Reset()                    { *m = GetBoostReply{} }
func (m *GetBoostReply) String() string            { return proto.CompactTextString(m) }
func (*GetBoostReply) ProtoMessage()               {}
func (*GetBoostReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *GetBoostReply) GetBoostLimit() []*BoostLimit {
	if m != nil {
		return m.BoostLimit
	}
	return nil
}

func (m *GetBoostReply) GetBoostBadge() *BoostBadge {
	if m != nil {
		return m.BoostBadge
	}
	return nil
}

type GetBoostLimitRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetBoostLimitRequest) Reset()                    { *m = GetBoostLimitRequest{} }
func (m *GetBoostLimitRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBoostLimitRequest) ProtoMessage()               {}
func (*GetBoostLimitRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *GetBoostLimitRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetBoostLimitReply struct {
	BoostLimit []*BoostLimit `protobuf:"bytes,1,rep,name=boostLimit" json:"boostLimit,omitempty"`
}

func (m *GetBoostLimitReply) Reset()                    { *m = GetBoostLimitReply{} }
func (m *GetBoostLimitReply) String() string            { return proto.CompactTextString(m) }
func (*GetBoostLimitReply) ProtoMessage()               {}
func (*GetBoostLimitReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *GetBoostLimitReply) GetBoostLimit() []*BoostLimit {
	if m != nil {
		return m.BoostLimit
	}
	return nil
}

type GetBoostVipRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetBoostVipRequest) Reset()                    { *m = GetBoostVipRequest{} }
func (m *GetBoostVipRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBoostVipRequest) ProtoMessage()               {}
func (*GetBoostVipRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *GetBoostVipRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetBoostVipReply struct {
	Name        string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Duration    int64  `protobuf:"varint,2,opt,name=Duration" json:"Duration,omitempty"`
	Active      bool   `protobuf:"varint,3,opt,name=Active" json:"Active,omitempty"`
	ExpiresTime int64  `protobuf:"varint,4,opt,name=ExpiresTime" json:"ExpiresTime,omitempty"`
}

func (m *GetBoostVipReply) Reset()                    { *m = GetBoostVipReply{} }
func (m *GetBoostVipReply) String() string            { return proto.CompactTextString(m) }
func (*GetBoostVipReply) ProtoMessage()               {}
func (*GetBoostVipReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *GetBoostVipReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetBoostVipReply) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GetBoostVipReply) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *GetBoostVipReply) GetExpiresTime() int64 {
	if m != nil {
		return m.ExpiresTime
	}
	return 0
}

type GetBoostBadgeRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetBoostBadgeRequest) Reset()                    { *m = GetBoostBadgeRequest{} }
func (m *GetBoostBadgeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBoostBadgeRequest) ProtoMessage()               {}
func (*GetBoostBadgeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *GetBoostBadgeRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetBoostBadgeReply struct {
	Identifier  string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Multiplier  int32  `protobuf:"varint,2,opt,name=Multiplier" json:"Multiplier,omitempty"`
	Duration    int32  `protobuf:"varint,3,opt,name=Duration" json:"Duration,omitempty"`
	Total       int32  `protobuf:"varint,4,opt,name=Total" json:"Total,omitempty"`
	Remaining   int32  `protobuf:"varint,5,opt,name=Remaining" json:"Remaining,omitempty"`
	ExpiresTime int64  `protobuf:"varint,6,opt,name=ExpiresTime" json:"ExpiresTime,omitempty"`
}

func (m *GetBoostBadgeReply) Reset()                    { *m = GetBoostBadgeReply{} }
func (m *GetBoostBadgeReply) String() string            { return proto.CompactTextString(m) }
func (*GetBoostBadgeReply) ProtoMessage()               {}
func (*GetBoostBadgeReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *GetBoostBadgeReply) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *GetBoostBadgeReply) GetMultiplier() int32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *GetBoostBadgeReply) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GetBoostBadgeReply) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetBoostBadgeReply) GetRemaining() int32 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

func (m *GetBoostBadgeReply) GetExpiresTime() int64 {
	if m != nil {
		return m.ExpiresTime
	}
	return 0
}

type GetWhoLikedMeRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetWhoLikedMeRequest) Reset()                    { *m = GetWhoLikedMeRequest{} }
func (m *GetWhoLikedMeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWhoLikedMeRequest) ProtoMessage()               {}
func (*GetWhoLikedMeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *GetWhoLikedMeRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetWhoLikedMeReply struct {
	Identifier string `protobuf:"bytes,1,opt,name=Identifier" json:"Identifier,omitempty"`
	Total      int32  `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
	Remaining  int32  `protobuf:"varint,3,opt,name=Remaining" json:"Remaining,omitempty"`
	Reset_     int32  `protobuf:"varint,4,opt,name=Reset" json:"Reset,omitempty"`
}

func (m *GetWhoLikedMeReply) Reset()                    { *m = GetWhoLikedMeReply{} }
func (m *GetWhoLikedMeReply) String() string            { return proto.CompactTextString(m) }
func (*GetWhoLikedMeReply) ProtoMessage()               {}
func (*GetWhoLikedMeReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *GetWhoLikedMeReply) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *GetWhoLikedMeReply) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetWhoLikedMeReply) GetRemaining() int32 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

func (m *GetWhoLikedMeReply) GetReset_() int32 {
	if m != nil {
		return m.Reset_
	}
	return 0
}

type UpdateUserTotalPrivilegeRequest struct {
	UserID        string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	PrivilegeType string `protobuf:"bytes,2,opt,name=privilegeType" json:"privilegeType,omitempty"`
	Identifier    string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	Used          int32  `protobuf:"varint,4,opt,name=used" json:"used,omitempty"`
}

func (m *UpdateUserTotalPrivilegeRequest) Reset()         { *m = UpdateUserTotalPrivilegeRequest{} }
func (m *UpdateUserTotalPrivilegeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserTotalPrivilegeRequest) ProtoMessage()    {}
func (*UpdateUserTotalPrivilegeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{16}
}

func (m *UpdateUserTotalPrivilegeRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateUserTotalPrivilegeRequest) GetPrivilegeType() string {
	if m != nil {
		return m.PrivilegeType
	}
	return ""
}

func (m *UpdateUserTotalPrivilegeRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *UpdateUserTotalPrivilegeRequest) GetUsed() int32 {
	if m != nil {
		return m.Used
	}
	return 0
}

type UpdateUserTotalPrivilegeReply struct {
	UserTotalPrivilege []*UserTotalPrivilege `protobuf:"bytes,1,rep,name=UserTotalPrivilege" json:"UserTotalPrivilege,omitempty"`
}

func (m *UpdateUserTotalPrivilegeReply) Reset()                    { *m = UpdateUserTotalPrivilegeReply{} }
func (m *UpdateUserTotalPrivilegeReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserTotalPrivilegeReply) ProtoMessage()               {}
func (*UpdateUserTotalPrivilegeReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *UpdateUserTotalPrivilegeReply) GetUserTotalPrivilege() []*UserTotalPrivilege {
	if m != nil {
		return m.UserTotalPrivilege
	}
	return nil
}

func init() {
	proto.RegisterType((*GetUserPrivilegesForCountersRequest)(nil), "membership.GetUserPrivilegesForCountersRequest")
	proto.RegisterType((*GetUserPrivilegesForCountersReply)(nil), "membership.GetUserPrivilegesForCountersReply")
	proto.RegisterType((*GiveBoostOnceByItemIDRequest)(nil), "membership.GiveBoostOnceByItemIDRequest")
	proto.RegisterType((*GiveBoostOnceByItemIDReply)(nil), "membership.GiveBoostOnceByItemIDReply")
	proto.RegisterType((*FindUserTotalPrivilegeByAttributionRequest)(nil), "membership.FindUserTotalPrivilegeByAttributionRequest")
	proto.RegisterType((*FindUserTotalPrivilegeByAttributionReply)(nil), "membership.FindUserTotalPrivilegeByAttributionReply")
	proto.RegisterType((*GetBoostRequest)(nil), "membership.GetBoostRequest")
	proto.RegisterType((*GetBoostReply)(nil), "membership.GetBoostReply")
	proto.RegisterType((*GetBoostLimitRequest)(nil), "membership.GetBoostLimitRequest")
	proto.RegisterType((*GetBoostLimitReply)(nil), "membership.GetBoostLimitReply")
	proto.RegisterType((*GetBoostVipRequest)(nil), "membership.GetBoostVipRequest")
	proto.RegisterType((*GetBoostVipReply)(nil), "membership.GetBoostVipReply")
	proto.RegisterType((*GetBoostBadgeRequest)(nil), "membership.GetBoostBadgeRequest")
	proto.RegisterType((*GetBoostBadgeReply)(nil), "membership.GetBoostBadgeReply")
	proto.RegisterType((*GetWhoLikedMeRequest)(nil), "membership.GetWhoLikedMeRequest")
	proto.RegisterType((*GetWhoLikedMeReply)(nil), "membership.GetWhoLikedMeReply")
	proto.RegisterType((*UpdateUserTotalPrivilegeRequest)(nil), "membership.UpdateUserTotalPrivilegeRequest")
	proto.RegisterType((*UpdateUserTotalPrivilegeReply)(nil), "membership.UpdateUserTotalPrivilegeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserTotalPrivilegeService service

type UserTotalPrivilegeServiceClient interface {
	// User Total Privilege
	GetWhoLikedMe(ctx context.Context, in *GetWhoLikedMeRequest, opts ...grpc.CallOption) (*GetWhoLikedMeReply, error)
	GetBoostLimit(ctx context.Context, in *GetBoostLimitRequest, opts ...grpc.CallOption) (*GetBoostLimitReply, error)
	GiveBoostOnceByItemID(ctx context.Context, in *GiveBoostOnceByItemIDRequest, opts ...grpc.CallOption) (*GiveBoostOnceByItemIDReply, error)
	GetBoostBadge(ctx context.Context, in *GetBoostBadgeRequest, opts ...grpc.CallOption) (*GetBoostBadgeReply, error)
	GetBoostVip(ctx context.Context, in *GetBoostVipRequest, opts ...grpc.CallOption) (*GetBoostVipReply, error)
	GetBoost(ctx context.Context, in *GetBoostRequest, opts ...grpc.CallOption) (*GetBoostReply, error)
	GetUserPrivilegesForCounters(ctx context.Context, in *GetUserPrivilegesForCountersRequest, opts ...grpc.CallOption) (*GetUserPrivilegesForCountersReply, error)
	FindUserTotalPrivilegeByAttribution(ctx context.Context, in *FindUserTotalPrivilegeByAttributionRequest, opts ...grpc.CallOption) (*FindUserTotalPrivilegeByAttributionReply, error)
	UpdateUserTotalPrivilegeWithDelta(ctx context.Context, in *UpdateUserTotalPrivilegeRequest, opts ...grpc.CallOption) (*UpdateUserTotalPrivilegeReply, error)
}

type userTotalPrivilegeServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserTotalPrivilegeServiceClient(cc *grpc.ClientConn) UserTotalPrivilegeServiceClient {
	return &userTotalPrivilegeServiceClient{cc}
}

func (c *userTotalPrivilegeServiceClient) GetWhoLikedMe(ctx context.Context, in *GetWhoLikedMeRequest, opts ...grpc.CallOption) (*GetWhoLikedMeReply, error) {
	out := new(GetWhoLikedMeReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/GetWhoLikedMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) GetBoostLimit(ctx context.Context, in *GetBoostLimitRequest, opts ...grpc.CallOption) (*GetBoostLimitReply, error) {
	out := new(GetBoostLimitReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/GetBoostLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) GiveBoostOnceByItemID(ctx context.Context, in *GiveBoostOnceByItemIDRequest, opts ...grpc.CallOption) (*GiveBoostOnceByItemIDReply, error) {
	out := new(GiveBoostOnceByItemIDReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/GiveBoostOnceByItemID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) GetBoostBadge(ctx context.Context, in *GetBoostBadgeRequest, opts ...grpc.CallOption) (*GetBoostBadgeReply, error) {
	out := new(GetBoostBadgeReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/GetBoostBadge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) GetBoostVip(ctx context.Context, in *GetBoostVipRequest, opts ...grpc.CallOption) (*GetBoostVipReply, error) {
	out := new(GetBoostVipReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/GetBoostVip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) GetBoost(ctx context.Context, in *GetBoostRequest, opts ...grpc.CallOption) (*GetBoostReply, error) {
	out := new(GetBoostReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/GetBoost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) GetUserPrivilegesForCounters(ctx context.Context, in *GetUserPrivilegesForCountersRequest, opts ...grpc.CallOption) (*GetUserPrivilegesForCountersReply, error) {
	out := new(GetUserPrivilegesForCountersReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/GetUserPrivilegesForCounters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) FindUserTotalPrivilegeByAttribution(ctx context.Context, in *FindUserTotalPrivilegeByAttributionRequest, opts ...grpc.CallOption) (*FindUserTotalPrivilegeByAttributionReply, error) {
	out := new(FindUserTotalPrivilegeByAttributionReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/FindUserTotalPrivilegeByAttribution", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTotalPrivilegeServiceClient) UpdateUserTotalPrivilegeWithDelta(ctx context.Context, in *UpdateUserTotalPrivilegeRequest, opts ...grpc.CallOption) (*UpdateUserTotalPrivilegeReply, error) {
	out := new(UpdateUserTotalPrivilegeReply)
	err := grpc.Invoke(ctx, "/membership.UserTotalPrivilegeService/UpdateUserTotalPrivilegeWithDelta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserTotalPrivilegeService service

type UserTotalPrivilegeServiceServer interface {
	// User Total Privilege
	GetWhoLikedMe(context.Context, *GetWhoLikedMeRequest) (*GetWhoLikedMeReply, error)
	GetBoostLimit(context.Context, *GetBoostLimitRequest) (*GetBoostLimitReply, error)
	GiveBoostOnceByItemID(context.Context, *GiveBoostOnceByItemIDRequest) (*GiveBoostOnceByItemIDReply, error)
	GetBoostBadge(context.Context, *GetBoostBadgeRequest) (*GetBoostBadgeReply, error)
	GetBoostVip(context.Context, *GetBoostVipRequest) (*GetBoostVipReply, error)
	GetBoost(context.Context, *GetBoostRequest) (*GetBoostReply, error)
	GetUserPrivilegesForCounters(context.Context, *GetUserPrivilegesForCountersRequest) (*GetUserPrivilegesForCountersReply, error)
	FindUserTotalPrivilegeByAttribution(context.Context, *FindUserTotalPrivilegeByAttributionRequest) (*FindUserTotalPrivilegeByAttributionReply, error)
	UpdateUserTotalPrivilegeWithDelta(context.Context, *UpdateUserTotalPrivilegeRequest) (*UpdateUserTotalPrivilegeReply, error)
}

func RegisterUserTotalPrivilegeServiceServer(s *grpc.Server, srv UserTotalPrivilegeServiceServer) {
	s.RegisterService(&_UserTotalPrivilegeService_serviceDesc, srv)
}

func _UserTotalPrivilegeService_GetWhoLikedMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhoLikedMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).GetWhoLikedMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/GetWhoLikedMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).GetWhoLikedMe(ctx, req.(*GetWhoLikedMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_GetBoostLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoostLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).GetBoostLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/GetBoostLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).GetBoostLimit(ctx, req.(*GetBoostLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_GiveBoostOnceByItemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveBoostOnceByItemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).GiveBoostOnceByItemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/GiveBoostOnceByItemID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).GiveBoostOnceByItemID(ctx, req.(*GiveBoostOnceByItemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_GetBoostBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoostBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).GetBoostBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/GetBoostBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).GetBoostBadge(ctx, req.(*GetBoostBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_GetBoostVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoostVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).GetBoostVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/GetBoostVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).GetBoostVip(ctx, req.(*GetBoostVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_GetBoost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).GetBoost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/GetBoost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).GetBoost(ctx, req.(*GetBoostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_GetUserPrivilegesForCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPrivilegesForCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).GetUserPrivilegesForCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/GetUserPrivilegesForCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).GetUserPrivilegesForCounters(ctx, req.(*GetUserPrivilegesForCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_FindUserTotalPrivilegeByAttribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserTotalPrivilegeByAttributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).FindUserTotalPrivilegeByAttribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/FindUserTotalPrivilegeByAttribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).FindUserTotalPrivilegeByAttribution(ctx, req.(*FindUserTotalPrivilegeByAttributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTotalPrivilegeService_UpdateUserTotalPrivilegeWithDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTotalPrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTotalPrivilegeServiceServer).UpdateUserTotalPrivilegeWithDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membership.UserTotalPrivilegeService/UpdateUserTotalPrivilegeWithDelta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTotalPrivilegeServiceServer).UpdateUserTotalPrivilegeWithDelta(ctx, req.(*UpdateUserTotalPrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserTotalPrivilegeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "membership.UserTotalPrivilegeService",
	HandlerType: (*UserTotalPrivilegeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWhoLikedMe",
			Handler:    _UserTotalPrivilegeService_GetWhoLikedMe_Handler,
		},
		{
			MethodName: "GetBoostLimit",
			Handler:    _UserTotalPrivilegeService_GetBoostLimit_Handler,
		},
		{
			MethodName: "GiveBoostOnceByItemID",
			Handler:    _UserTotalPrivilegeService_GiveBoostOnceByItemID_Handler,
		},
		{
			MethodName: "GetBoostBadge",
			Handler:    _UserTotalPrivilegeService_GetBoostBadge_Handler,
		},
		{
			MethodName: "GetBoostVip",
			Handler:    _UserTotalPrivilegeService_GetBoostVip_Handler,
		},
		{
			MethodName: "GetBoost",
			Handler:    _UserTotalPrivilegeService_GetBoost_Handler,
		},
		{
			MethodName: "GetUserPrivilegesForCounters",
			Handler:    _UserTotalPrivilegeService_GetUserPrivilegesForCounters_Handler,
		},
		{
			MethodName: "FindUserTotalPrivilegeByAttribution",
			Handler:    _UserTotalPrivilegeService_FindUserTotalPrivilegeByAttribution_Handler,
		},
		{
			MethodName: "UpdateUserTotalPrivilegeWithDelta",
			Handler:    _UserTotalPrivilegeService_UpdateUserTotalPrivilegeWithDelta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "membership/user_total_privilege.service.proto",
}

func init() { proto.RegisterFile("membership/user_total_privilege.service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5f, 0x4f, 0xdb, 0x48,
	0x10, 0xc7, 0x84, 0x70, 0x64, 0x22, 0xc4, 0x69, 0xc5, 0xa1, 0xe0, 0xcb, 0x71, 0xc1, 0xdc, 0x9d,
	0xc2, 0xdd, 0x25, 0x51, 0x69, 0x85, 0x78, 0xe9, 0x03, 0x69, 0x0a, 0x8a, 0x04, 0xb4, 0x32, 0x50,
	0xa4, 0xbe, 0x20, 0x27, 0x99, 0x26, 0x2b, 0xfc, 0xaf, 0xf6, 0x3a, 0x6d, 0xaa, 0xfe, 0xfb, 0x0e,
	0x6d, 0xbf, 0x4a, 0x3f, 0x42, 0xdf, 0xfa, 0x9d, 0x2a, 0xaf, 0x9d, 0x78, 0x13, 0x3b, 0x71, 0xda,
	0x8a, 0x37, 0xef, 0xcc, 0x6f, 0xc6, 0xbf, 0xdf, 0xec, 0xec, 0xec, 0x42, 0xc5, 0x40, 0xa3, 0x85,
	0x8e, 0xdb, 0xa3, 0x76, 0xcd, 0x73, 0xd1, 0xb9, 0x66, 0x16, 0xd3, 0xf4, 0x6b, 0xdb, 0xa1, 0x7d,
	0xaa, 0x63, 0x17, 0xab, 0x2e, 0x3a, 0x7d, 0xda, 0xc6, 0xaa, 0xed, 0x58, 0xcc, 0x22, 0x10, 0xc1,
	0xe5, 0xbf, 0xd3, 0x42, 0x79, 0x88, 0x72, 0x1f, 0x76, 0x8e, 0x91, 0x5d, 0xba, 0xe8, 0x3c, 0x1e,
	0x7a, 0xdc, 0x23, 0xcb, 0x79, 0x60, 0x79, 0x26, 0x43, 0xc7, 0x55, 0xf1, 0xb9, 0x87, 0x2e, 0x23,
	0x1b, 0xb0, 0xec, 0x27, 0x69, 0x36, 0x0a, 0x52, 0x49, 0x2a, 0xe7, 0xd4, 0x70, 0xa5, 0x7c, 0x95,
	0x60, 0x7b, 0x76, 0xbc, 0xad, 0x0f, 0xc8, 0x01, 0xe4, 0x5b, 0x96, 0xe5, 0xb2, 0x13, 0x6a, 0x50,
	0xe6, 0x16, 0xa4, 0x52, 0xa6, 0x9c, 0xdf, 0xdb, 0xa8, 0x46, 0x0c, 0xab, 0xf5, 0x91, 0x5b, 0x15,
	0xa1, 0x64, 0x1f, 0x80, 0x2f, 0xeb, 0x5a, 0xa7, 0x8b, 0x85, 0xc5, 0x92, 0x94, 0x18, 0xc8, 0xbd,
	0xaa, 0x80, 0xf4, 0xe3, 0x5e, 0xf4, 0xac, 0x13, 0x7a, 0x83, 0x9d, 0x53, 0x2c, 0x64, 0xe2, 0x71,
	0x57, 0x23, 0xaf, 0x2a, 0x20, 0x95, 0x33, 0x28, 0x1e, 0xd3, 0x3e, 0xf2, 0xac, 0x8f, 0xcc, 0x36,
	0xd6, 0x07, 0x4d, 0x86, 0x46, 0xb3, 0x91, 0x52, 0x07, 0xdf, 0x4e, 0x39, 0x90, 0x73, 0xcc, 0xa9,
	0xe1, 0x4a, 0xd1, 0x41, 0x9e, 0x92, 0xcf, 0xaf, 0xcb, 0x19, 0x10, 0xbf, 0x72, 0x17, 0xfe, 0xce,
	0x8c, 0xca, 0x17, 0x96, 0x67, 0x4b, 0x64, 0x1b, 0x47, 0xa9, 0x09, 0x91, 0xca, 0x47, 0x09, 0xfe,
	0x3d, 0xa2, 0x66, 0x27, 0xee, 0xaa, 0x0f, 0x0e, 0x19, 0x73, 0x68, 0xcb, 0x63, 0xd4, 0x32, 0xd3,
	0xc4, 0xfc, 0x05, 0xab, 0x5a, 0x84, 0x1e, 0x69, 0x1a, 0x37, 0x92, 0x32, 0xac, 0x09, 0x86, 0x8b,
	0x81, 0x1d, 0xd4, 0x39, 0xa7, 0x4e, 0x9a, 0x95, 0x57, 0x50, 0x9e, 0x8b, 0xd5, 0x6d, 0x94, 0x64,
	0x17, 0xd6, 0x8e, 0x91, 0xf1, 0xfa, 0xa7, 0xf5, 0xf2, 0x3b, 0x58, 0x8d, 0xa0, 0x3e, 0x97, 0x61,
	0xf3, 0xf1, 0x5e, 0x4c, 0xe9, 0x5a, 0x01, 0xf9, 0xa3, 0x4d, 0xab, 0x54, 0x61, 0x7d, 0x48, 0x20,
	0x48, 0x9a, 0x42, 0xf8, 0x04, 0xc8, 0x04, 0xfe, 0x27, 0x58, 0x2b, 0xff, 0x47, 0xd9, 0x9e, 0x50,
	0x3b, 0xed, 0xdf, 0xaf, 0xe1, 0xd7, 0x31, 0xb4, 0xff, 0x67, 0x02, 0x4b, 0x67, 0x9a, 0x81, 0x21,
	0x92, 0x7f, 0x13, 0x19, 0x56, 0x1a, 0x9e, 0xa3, 0xf9, 0x1b, 0xcc, 0x2b, 0x91, 0x51, 0x47, 0x6b,
	0x3f, 0xf7, 0x61, 0x9b, 0xd1, 0x7e, 0xd0, 0x38, 0x2b, 0x6a, 0xb8, 0x22, 0x25, 0xc8, 0x3f, 0x7c,
	0x69, 0x53, 0x07, 0xdd, 0x0b, 0x6a, 0x60, 0x61, 0x89, 0x87, 0x89, 0x26, 0xb1, 0x52, 0x41, 0x19,
	0x53, 0xd8, 0x7e, 0x91, 0x22, 0x71, 0x61, 0x80, 0x4f, 0x78, 0x0b, 0x80, 0x76, 0xd0, 0x64, 0xf4,
	0x19, 0x45, 0x27, 0x0c, 0x11, 0x2c, 0xbe, 0xff, 0xd4, 0xd3, 0x19, 0xb5, 0x75, 0xdf, 0xef, 0xd3,
	0xcf, 0xaa, 0x82, 0x65, 0x4c, 0x5c, 0x86, 0x7b, 0x23, 0x71, 0xeb, 0x90, 0xe5, 0xad, 0xc8, 0xe9,
	0x67, 0xd5, 0x60, 0x41, 0x8a, 0x90, 0x53, 0xd1, 0xd0, 0xa8, 0x49, 0xcd, 0x6e, 0x21, 0xcb, 0x3d,
	0x91, 0x61, 0x52, 0xf8, 0xf2, 0x34, 0xe1, 0xc2, 0xf0, 0x4a, 0x11, 0xfe, 0x96, 0xeb, 0x16, 0xf1,
	0xa1, 0xee, 0x66, 0x4c, 0x77, 0x64, 0x89, 0xb8, 0x2f, 0x4e, 0xe5, 0x9e, 0x99, 0xe4, 0xbe, 0x0e,
	0x59, 0x15, 0x5d, 0x64, 0x43, 0xbd, 0x7c, 0xa1, 0x7c, 0x90, 0xe0, 0xcf, 0x4b, 0xbb, 0xa3, 0x31,
	0x4c, 0x38, 0xaf, 0xe9, 0x63, 0x68, 0x74, 0x5b, 0xf1, 0xf1, 0x12, 0x8e, 0xa1, 0x31, 0xe3, 0xc4,
	0x1e, 0x66, 0x62, 0x7b, 0x48, 0x60, 0xc9, 0x73, 0xb1, 0x13, 0xd2, 0xe2, 0xdf, 0x8a, 0x05, 0x7f,
	0x4c, 0x27, 0x75, 0x0b, 0x53, 0x68, 0xef, 0xf3, 0x2f, 0xb0, 0x19, 0x37, 0x9f, 0x07, 0x97, 0x37,
	0x39, 0xe7, 0x83, 0x27, 0xda, 0x24, 0x52, 0x12, 0x7f, 0x91, 0xb4, 0xdf, 0xf2, 0xd6, 0x0c, 0x84,
	0xad, 0x0f, 0x94, 0x85, 0x30, 0x69, 0x74, 0xd6, 0x63, 0x49, 0x63, 0x73, 0x26, 0x96, 0x74, 0x62,
	0xb2, 0x28, 0x0b, 0xe4, 0x06, 0x7e, 0x4b, 0xbc, 0xce, 0x48, 0x79, 0x2c, 0x74, 0xc6, 0x0d, 0x2a,
	0xff, 0x33, 0x07, 0x32, 0xa6, 0x20, 0xb8, 0xd4, 0x13, 0x15, 0x88, 0xe7, 0x3f, 0x59, 0x41, 0x74,
	0xe0, 0x95, 0x05, 0x72, 0x0a, 0x79, 0x61, 0x6e, 0x91, 0xc4, 0x80, 0x68, 0xfc, 0xc9, 0xc5, 0xa9,
	0xfe, 0x20, 0x5d, 0x03, 0x56, 0x86, 0x56, 0xf2, 0x7b, 0x12, 0x76, 0x98, 0x68, 0x33, 0xd9, 0x19,
	0x64, 0x79, 0x2f, 0x41, 0x71, 0xd6, 0x2b, 0x8a, 0xd4, 0x26, 0xa2, 0xd3, 0xde, 0x6b, 0x72, 0x65,
	0xfe, 0x80, 0x80, 0xc2, 0x27, 0x09, 0x76, 0xe6, 0xb8, 0xa4, 0xc9, 0xbe, 0x98, 0x78, 0xfe, 0xb7,
	0x86, 0x7c, 0xef, 0xbb, 0xe3, 0x02, 0x5e, 0x6f, 0x60, 0x7b, 0xda, 0x51, 0xbd, 0xa2, 0xac, 0xd7,
	0x40, 0x9d, 0x69, 0xe4, 0xbf, 0xb1, 0x23, 0x39, 0x7b, 0xdc, 0xc8, 0xbb, 0xf3, 0x81, 0xf9, 0xef,
	0xeb, 0x07, 0x4f, 0xf7, 0xbb, 0x94, 0xf5, 0xbc, 0x56, 0xb5, 0x6d, 0x19, 0x35, 0xfb, 0x4e, 0xdb,
	0xac, 0x31, 0xcd, 0x64, 0x9a, 0x59, 0xe9, 0x58, 0xfe, 0xe4, 0xab, 0xb8, 0xed, 0x1e, 0x1a, 0x5a,
	0xad, 0x6b, 0xe9, 0x9a, 0xd9, 0xad, 0x45, 0x99, 0x5b, 0xcb, 0xfc, 0x7d, 0x7d, 0xf7, 0x5b, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa2, 0x98, 0x8f, 0xbb, 0xc3, 0x0b, 0x00, 0x00,
}
