// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moment/moment.service.proto

package moment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MomentsParam struct {
	Moments []*Moment `protobuf:"bytes,1,rep,name=moments" json:"moments,omitempty"`
}

func (m *MomentsParam) Reset()                    { *m = MomentsParam{} }
func (m *MomentsParam) String() string            { return proto.CompactTextString(m) }
func (*MomentsParam) ProtoMessage()               {}
func (*MomentsParam) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *MomentsParam) GetMoments() []*Moment {
	if m != nil {
		return m.Moments
	}
	return nil
}

type FindByIdsParam struct {
	MomentIds  *common.StringValueArray `protobuf:"bytes,1,opt,name=momentIds" json:"momentIds,omitempty"`
	RequestUid string                   `protobuf:"bytes,2,opt,name=requestUid" json:"requestUid,omitempty"`
}

func (m *FindByIdsParam) Reset()                    { *m = FindByIdsParam{} }
func (m *FindByIdsParam) String() string            { return proto.CompactTextString(m) }
func (*FindByIdsParam) ProtoMessage()               {}
func (*FindByIdsParam) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *FindByIdsParam) GetMomentIds() *common.StringValueArray {
	if m != nil {
		return m.MomentIds
	}
	return nil
}

func (m *FindByIdsParam) GetRequestUid() string {
	if m != nil {
		return m.RequestUid
	}
	return ""
}

type MomentsReply struct {
	Moments []*Moment `protobuf:"bytes,1,rep,name=moments" json:"moments,omitempty"`
}

func (m *MomentsReply) Reset()                    { *m = MomentsReply{} }
func (m *MomentsReply) String() string            { return proto.CompactTextString(m) }
func (*MomentsReply) ProtoMessage()               {}
func (*MomentsReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *MomentsReply) GetMoments() []*Moment {
	if m != nil {
		return m.Moments
	}
	return nil
}

type DeleteParam struct {
	MomentId      string `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	MomentOwnerId string `protobuf:"bytes,2,opt,name=momentOwnerId" json:"momentOwnerId,omitempty"`
}

func (m *DeleteParam) Reset()                    { *m = DeleteParam{} }
func (m *DeleteParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteParam) ProtoMessage()               {}
func (*DeleteParam) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *DeleteParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *DeleteParam) GetMomentOwnerId() string {
	if m != nil {
		return m.MomentOwnerId
	}
	return ""
}

type UpdateParam struct {
	UserId      string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OtherUserId string `protobuf:"bytes,2,opt,name=otherUserId" json:"otherUserId,omitempty"`
}

func (m *UpdateParam) Reset()                    { *m = UpdateParam{} }
func (m *UpdateParam) String() string            { return proto.CompactTextString(m) }
func (*UpdateParam) ProtoMessage()               {}
func (*UpdateParam) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *UpdateParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateParam) GetOtherUserId() string {
	if m != nil {
		return m.OtherUserId
	}
	return ""
}

type FindForUserByIdsParam struct {
	UserId     string   `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	MomentIds  []string `protobuf:"bytes,2,rep,name=momentIds" json:"momentIds,omitempty"`
	RequestUid string   `protobuf:"bytes,3,opt,name=requestUid" json:"requestUid,omitempty"`
}

func (m *FindForUserByIdsParam) Reset()                    { *m = FindForUserByIdsParam{} }
func (m *FindForUserByIdsParam) String() string            { return proto.CompactTextString(m) }
func (*FindForUserByIdsParam) ProtoMessage()               {}
func (*FindForUserByIdsParam) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

func (m *FindForUserByIdsParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindForUserByIdsParam) GetMomentIds() []string {
	if m != nil {
		return m.MomentIds
	}
	return nil
}

func (m *FindForUserByIdsParam) GetRequestUid() string {
	if m != nil {
		return m.RequestUid
	}
	return ""
}

type FindForBrandAccountByIdsParam struct {
	UserId    string   `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	OwnerId   string   `protobuf:"bytes,2,opt,name=ownerId" json:"ownerId,omitempty"`
	MomentIds []string `protobuf:"bytes,3,rep,name=momentIds" json:"momentIds,omitempty"`
}

func (m *FindForBrandAccountByIdsParam) Reset()                    { *m = FindForBrandAccountByIdsParam{} }
func (m *FindForBrandAccountByIdsParam) String() string            { return proto.CompactTextString(m) }
func (*FindForBrandAccountByIdsParam) ProtoMessage()               {}
func (*FindForBrandAccountByIdsParam) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{6} }

func (m *FindForBrandAccountByIdsParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindForBrandAccountByIdsParam) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *FindForBrandAccountByIdsParam) GetMomentIds() []string {
	if m != nil {
		return m.MomentIds
	}
	return nil
}

type MomentCountReply struct {
	MomentCount []*MomentCount `protobuf:"bytes,1,rep,name=momentCount" json:"momentCount,omitempty"`
}

func (m *MomentCountReply) Reset()                    { *m = MomentCountReply{} }
func (m *MomentCountReply) String() string            { return proto.CompactTextString(m) }
func (*MomentCountReply) ProtoMessage()               {}
func (*MomentCountReply) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{7} }

func (m *MomentCountReply) GetMomentCount() []*MomentCount {
	if m != nil {
		return m.MomentCount
	}
	return nil
}

type ChangeStatusByIdsParam struct {
	Status    MomentStatus             `protobuf:"varint,1,opt,name=status,enum=moment.MomentStatus" json:"status,omitempty"`
	MomentIds *common.StringValueArray `protobuf:"bytes,2,opt,name=momentIds" json:"momentIds,omitempty"`
}

func (m *ChangeStatusByIdsParam) Reset()                    { *m = ChangeStatusByIdsParam{} }
func (m *ChangeStatusByIdsParam) String() string            { return proto.CompactTextString(m) }
func (*ChangeStatusByIdsParam) ProtoMessage()               {}
func (*ChangeStatusByIdsParam) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{8} }

func (m *ChangeStatusByIdsParam) GetStatus() MomentStatus {
	if m != nil {
		return m.Status
	}
	return MomentStatus_MOMENT_STATUS_DEFAULT
}

func (m *ChangeStatusByIdsParam) GetMomentIds() *common.StringValueArray {
	if m != nil {
		return m.MomentIds
	}
	return nil
}

func init() {
	proto.RegisterType((*MomentsParam)(nil), "moment.MomentsParam")
	proto.RegisterType((*FindByIdsParam)(nil), "moment.FindByIdsParam")
	proto.RegisterType((*MomentsReply)(nil), "moment.MomentsReply")
	proto.RegisterType((*DeleteParam)(nil), "moment.DeleteParam")
	proto.RegisterType((*UpdateParam)(nil), "moment.UpdateParam")
	proto.RegisterType((*FindForUserByIdsParam)(nil), "moment.FindForUserByIdsParam")
	proto.RegisterType((*FindForBrandAccountByIdsParam)(nil), "moment.FindForBrandAccountByIdsParam")
	proto.RegisterType((*MomentCountReply)(nil), "moment.MomentCountReply")
	proto.RegisterType((*ChangeStatusByIdsParam)(nil), "moment.ChangeStatusByIdsParam")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MomentService service

type MomentServiceClient interface {
	InsertMoments(ctx context.Context, in *MomentsParam, opts ...grpc.CallOption) (*MomentsReply, error)
	FindMoments(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentsReply, error)
	FindByIds(ctx context.Context, in *FindByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error)
	DeleteMoment(ctx context.Context, in *DeleteParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	FindForUser(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentsReply, error)
	FindForUserByIds(ctx context.Context, in *FindForUserByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error)
	FindForModeration(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentsReply, error)
	FindForBrandAccountByIds(ctx context.Context, in *FindForBrandAccountByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error)
	FindByIdsForModeration(ctx context.Context, in *common.StringValueArray, opts ...grpc.CallOption) (*MomentsReply, error)
	FindMomentTotalCountByUserIds(ctx context.Context, in *common.StringValueArray, opts ...grpc.CallOption) (*MomentCountReply, error)
	ChangeStatusByIds(ctx context.Context, in *ChangeStatusByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error)
	GetMomentsWithMedia(ctx context.Context, in *MomentsParam, opts ...grpc.CallOption) (*MomentsReply, error)
}

type momentServiceClient struct {
	cc *grpc.ClientConn
}

func NewMomentServiceClient(cc *grpc.ClientConn) MomentServiceClient {
	return &momentServiceClient{cc}
}

func (c *momentServiceClient) InsertMoments(ctx context.Context, in *MomentsParam, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/InsertMoments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindMoments(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindMoments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindByIds(ctx context.Context, in *FindByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) DeleteMoment(ctx context.Context, in *DeleteParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentService/DeleteMoment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindForUser(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindForUserByIds(ctx context.Context, in *FindForUserByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindForUserByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindForModeration(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindForModeration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindForBrandAccountByIds(ctx context.Context, in *FindForBrandAccountByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindForBrandAccountByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindByIdsForModeration(ctx context.Context, in *common.StringValueArray, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindByIdsForModeration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) FindMomentTotalCountByUserIds(ctx context.Context, in *common.StringValueArray, opts ...grpc.CallOption) (*MomentCountReply, error) {
	out := new(MomentCountReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/FindMomentTotalCountByUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) ChangeStatusByIds(ctx context.Context, in *ChangeStatusByIdsParam, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/ChangeStatusByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) GetMomentsWithMedia(ctx context.Context, in *MomentsParam, opts ...grpc.CallOption) (*MomentsReply, error) {
	out := new(MomentsReply)
	err := grpc.Invoke(ctx, "/moment.MomentService/GetMomentsWithMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MomentService service

type MomentServiceServer interface {
	InsertMoments(context.Context, *MomentsParam) (*MomentsReply, error)
	FindMoments(context.Context, *common.Condition) (*MomentsReply, error)
	FindByIds(context.Context, *FindByIdsParam) (*MomentsReply, error)
	DeleteMoment(context.Context, *DeleteParam) (*common.BoolValue, error)
	FindForUser(context.Context, *common.Condition) (*MomentsReply, error)
	FindForUserByIds(context.Context, *FindForUserByIdsParam) (*MomentsReply, error)
	FindForModeration(context.Context, *common.Condition) (*MomentsReply, error)
	FindForBrandAccountByIds(context.Context, *FindForBrandAccountByIdsParam) (*MomentsReply, error)
	FindByIdsForModeration(context.Context, *common.StringValueArray) (*MomentsReply, error)
	FindMomentTotalCountByUserIds(context.Context, *common.StringValueArray) (*MomentCountReply, error)
	ChangeStatusByIds(context.Context, *ChangeStatusByIdsParam) (*MomentsReply, error)
	GetMomentsWithMedia(context.Context, *MomentsParam) (*MomentsReply, error)
}

func RegisterMomentServiceServer(s *grpc.Server, srv MomentServiceServer) {
	s.RegisterService(&_MomentService_serviceDesc, srv)
}

func _MomentService_InsertMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).InsertMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/InsertMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).InsertMoments(ctx, req.(*MomentsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindMoments(ctx, req.(*common.Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindByIds(ctx, req.(*FindByIdsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_DeleteMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).DeleteMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/DeleteMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).DeleteMoment(ctx, req.(*DeleteParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindForUser(ctx, req.(*common.Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindForUserByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindForUserByIdsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindForUserByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindForUserByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindForUserByIds(ctx, req.(*FindForUserByIdsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindForModeration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindForModeration(ctx, req.(*common.Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindForBrandAccountByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindForBrandAccountByIdsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindForBrandAccountByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindForBrandAccountByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindForBrandAccountByIds(ctx, req.(*FindForBrandAccountByIdsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindByIdsForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.StringValueArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindByIdsForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindByIdsForModeration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindByIdsForModeration(ctx, req.(*common.StringValueArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_FindMomentTotalCountByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.StringValueArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).FindMomentTotalCountByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/FindMomentTotalCountByUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).FindMomentTotalCountByUserIds(ctx, req.(*common.StringValueArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_ChangeStatusByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusByIdsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).ChangeStatusByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/ChangeStatusByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).ChangeStatusByIds(ctx, req.(*ChangeStatusByIdsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_GetMomentsWithMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).GetMomentsWithMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentService/GetMomentsWithMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).GetMomentsWithMedia(ctx, req.(*MomentsParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _MomentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.MomentService",
	HandlerType: (*MomentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertMoments",
			Handler:    _MomentService_InsertMoments_Handler,
		},
		{
			MethodName: "FindMoments",
			Handler:    _MomentService_FindMoments_Handler,
		},
		{
			MethodName: "FindByIds",
			Handler:    _MomentService_FindByIds_Handler,
		},
		{
			MethodName: "DeleteMoment",
			Handler:    _MomentService_DeleteMoment_Handler,
		},
		{
			MethodName: "FindForUser",
			Handler:    _MomentService_FindForUser_Handler,
		},
		{
			MethodName: "FindForUserByIds",
			Handler:    _MomentService_FindForUserByIds_Handler,
		},
		{
			MethodName: "FindForModeration",
			Handler:    _MomentService_FindForModeration_Handler,
		},
		{
			MethodName: "FindForBrandAccountByIds",
			Handler:    _MomentService_FindForBrandAccountByIds_Handler,
		},
		{
			MethodName: "FindByIdsForModeration",
			Handler:    _MomentService_FindByIdsForModeration_Handler,
		},
		{
			MethodName: "FindMomentTotalCountByUserIds",
			Handler:    _MomentService_FindMomentTotalCountByUserIds_Handler,
		},
		{
			MethodName: "ChangeStatusByIds",
			Handler:    _MomentService_ChangeStatusByIds_Handler,
		},
		{
			MethodName: "GetMomentsWithMedia",
			Handler:    _MomentService_GetMomentsWithMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment/moment.service.proto",
}

func init() { proto.RegisterFile("moment/moment.service.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdf, 0x6b, 0xdb, 0x30,
	0x10, 0x5e, 0x1b, 0x48, 0x97, 0x73, 0x5b, 0x5a, 0x75, 0x0d, 0xc6, 0x5b, 0x4b, 0x30, 0x1b, 0xe4,
	0x61, 0x4d, 0x58, 0xf6, 0x83, 0xc2, 0xd8, 0xa0, 0xc9, 0x68, 0xf1, 0x46, 0xe8, 0x70, 0x97, 0x8d,
	0xed, 0x4d, 0xb5, 0x45, 0x6c, 0xb0, 0x25, 0x4f, 0x92, 0x57, 0xf2, 0xb2, 0xbf, 0x72, 0x7f, 0xd0,
	0xb0, 0x25, 0x27, 0x76, 0x12, 0x97, 0xe6, 0x29, 0xd1, 0xa7, 0xbb, 0xef, 0xbe, 0xdc, 0xdd, 0x17,
	0xc1, 0xd3, 0x98, 0xc5, 0x84, 0xca, 0xbe, 0xfa, 0xe8, 0x09, 0xc2, 0xff, 0x84, 0x1e, 0xe9, 0x25,
	0x9c, 0x49, 0x86, 0x9a, 0x0a, 0xb5, 0x8e, 0xaa, 0x41, 0xf9, 0xa5, 0x65, 0x55, 0xc0, 0x33, 0x8f,
	0xc5, 0x31, 0xa3, 0xfa, 0xee, 0x58, 0x9d, 0xfa, 0x77, 0x1c, 0x27, 0x09, 0xe1, 0x42, 0xc1, 0xf6,
	0x39, 0xec, 0x8e, 0xf3, 0x68, 0xf1, 0x15, 0x73, 0x1c, 0xa3, 0x2e, 0xec, 0xa8, 0x6c, 0x61, 0x6e,
	0x75, 0x1a, 0x5d, 0x63, 0xb0, 0xdf, 0xd3, 0x25, 0x54, 0x98, 0x5b, 0x5c, 0xdb, 0x01, 0xec, 0x5f,
	0x86, 0xd4, 0x1f, 0xce, 0x1c, 0x5f, 0xe7, 0xbe, 0x83, 0x96, 0xba, 0x74, 0xfc, 0x2c, 0x7b, 0xab,
	0x6b, 0x0c, 0xcc, 0x9e, 0x16, 0x71, 0x23, 0x79, 0x48, 0xa7, 0xdf, 0x71, 0x94, 0x92, 0x0b, 0xce,
	0xf1, 0xcc, 0x5d, 0x84, 0xa2, 0x53, 0x00, 0x4e, 0x7e, 0xa7, 0x44, 0xc8, 0x49, 0xe8, 0x9b, 0xdb,
	0x9d, 0xad, 0x6e, 0xcb, 0x2d, 0x21, 0x25, 0x8d, 0x2e, 0x49, 0xa2, 0xd9, 0x06, 0x1a, 0xaf, 0xc1,
	0xf8, 0x44, 0x22, 0x22, 0x89, 0x12, 0x68, 0xc1, 0xe3, 0xa2, 0x6a, 0xae, 0xaf, 0xe5, 0xce, 0xcf,
	0xe8, 0x39, 0xec, 0xa9, 0xef, 0xd7, 0x77, 0x94, 0x70, 0xa7, 0xd0, 0x51, 0x05, 0xed, 0x2b, 0x30,
	0x26, 0x89, 0x8f, 0x0b, 0xc2, 0x36, 0x34, 0x53, 0x91, 0x47, 0x2b, 0x3a, 0x7d, 0x42, 0x1d, 0x30,
	0x98, 0x0c, 0x08, 0x9f, 0x88, 0x12, 0x55, 0x19, 0xb2, 0x63, 0x38, 0xce, 0xba, 0x77, 0xc9, 0x72,
	0xa0, 0xd4, 0xc4, 0x3a, 0xca, 0x67, 0xe5, 0xe6, 0x6e, 0x77, 0x1a, 0xdd, 0x56, 0x7d, 0x0b, 0x1b,
	0x2b, 0x2d, 0x64, 0x70, 0xa2, 0xcb, 0x0d, 0x39, 0xa6, 0xfe, 0x85, 0xe7, 0xb1, 0x94, 0xca, 0x07,
	0x94, 0x35, 0x61, 0x87, 0x55, 0x1a, 0x52, 0x1c, 0xab, 0x82, 0x1a, 0x4b, 0x82, 0x6c, 0x07, 0x0e,
	0xd4, 0x30, 0x46, 0x59, 0x21, 0x35, 0xb7, 0xb7, 0x60, 0xc4, 0x0b, 0x4c, 0xcf, 0xee, 0xa8, 0x3a,
	0x3b, 0x15, 0x5e, 0x8e, 0xb3, 0xff, 0x42, 0x7b, 0x14, 0x60, 0x3a, 0x25, 0x37, 0x12, 0xcb, 0x54,
	0x94, 0x44, 0xbf, 0x84, 0xa6, 0xc8, 0xb1, 0x5c, 0xf4, 0xfe, 0xe0, 0x49, 0x95, 0x4b, 0xc5, 0xbb,
	0x3a, 0xa6, 0xba, 0x9e, 0xdb, 0x0f, 0x5e, 0xcf, 0xc1, 0xbf, 0x26, 0xec, 0x69, 0x42, 0x65, 0x45,
	0xf4, 0x01, 0xf6, 0x1c, 0x2a, 0x08, 0x97, 0x7a, 0x2d, 0xd1, 0x52, 0x61, 0x25, 0xcf, 0x5a, 0x46,
	0xf3, 0x2e, 0xd8, 0x8f, 0xd0, 0x39, 0x18, 0xd9, 0x30, 0x8a, 0xe4, 0xc3, 0x42, 0xc4, 0x88, 0x51,
	0x3f, 0x94, 0x21, 0xa3, 0xb5, 0x99, 0xef, 0xa1, 0x35, 0xf7, 0x1c, 0x6a, 0x17, 0x41, 0x55, 0x1b,
	0xde, 0x53, 0x76, 0x57, 0x99, 0x41, 0xe1, 0x68, 0xde, 0xf9, 0x92, 0x45, 0xac, 0xb9, 0x98, 0x21,
	0x63, 0x51, 0xde, 0x8f, 0x85, 0x60, 0xbd, 0xac, 0x9b, 0x08, 0x76, 0xe0, 0x60, 0x79, 0xcd, 0xd1,
	0x49, 0x59, 0xf7, 0x8a, 0x01, 0x6a, 0xa9, 0x3e, 0xc2, 0xa1, 0x4e, 0x18, 0x33, 0x9f, 0x70, 0x9c,
	0xd5, 0xdd, 0x44, 0xca, 0x4f, 0x30, 0xeb, 0x2c, 0x80, 0x5e, 0x2c, 0x49, 0x5a, 0x6f, 0x92, 0x5a,
	0xea, 0xcf, 0xd0, 0x9e, 0xcf, 0xa0, 0xaa, 0xaf, 0x76, 0xc1, 0x6a, 0xb9, 0x26, 0xca, 0xa9, 0x0a,
	0xfd, 0xc6, 0x24, 0x8e, 0x46, 0x4a, 0x85, 0xfa, 0xe3, 0x10, 0xf7, 0x50, 0x9a, 0xeb, 0xac, 0xa4,
	0x69, 0xbf, 0xc0, 0xe1, 0x8a, 0x89, 0xd0, 0x69, 0x91, 0xb0, 0xde, 0x5f, 0xb5, 0x1a, 0x47, 0x70,
	0x74, 0x45, 0x8a, 0xe5, 0xff, 0x11, 0xca, 0x60, 0x4c, 0xfc, 0x10, 0x6f, 0xe6, 0x82, 0xe1, 0x9b,
	0x5f, 0x83, 0x69, 0x28, 0x83, 0xf4, 0x36, 0xfb, 0x3d, 0xfd, 0xe4, 0x95, 0x47, 0xfb, 0x12, 0x53,
	0x89, 0xe9, 0x99, 0xcf, 0x62, 0x1c, 0xd2, 0x33, 0xe1, 0x05, 0x24, 0xc6, 0xfd, 0x29, 0x8b, 0x30,
	0x9d, 0xea, 0x37, 0xed, 0xb6, 0x99, 0x3f, 0x5b, 0xaf, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x8d,
	0x86, 0xa6, 0x5d, 0x25, 0x07, 0x00, 0x00,
}
