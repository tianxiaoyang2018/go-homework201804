// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moment/moment-like.service.proto

package moment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MomentLikeParam struct {
	MomentLike []*MomentLike `protobuf:"bytes,1,rep,name=momentLike" json:"momentLike,omitempty"`
}

func (m *MomentLikeParam) Reset()                    { *m = MomentLikeParam{} }
func (m *MomentLikeParam) String() string            { return proto.CompactTextString(m) }
func (*MomentLikeParam) ProtoMessage()               {}
func (*MomentLikeParam) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *MomentLikeParam) GetMomentLike() []*MomentLike {
	if m != nil {
		return m.MomentLike
	}
	return nil
}

type MomentLikeReply struct {
	MomentLike []*MomentLike `protobuf:"bytes,1,rep,name=momentLike" json:"momentLike,omitempty"`
}

func (m *MomentLikeReply) Reset()                    { *m = MomentLikeReply{} }
func (m *MomentLikeReply) String() string            { return proto.CompactTextString(m) }
func (*MomentLikeReply) ProtoMessage()               {}
func (*MomentLikeReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *MomentLikeReply) GetMomentLike() []*MomentLike {
	if m != nil {
		return m.MomentLike
	}
	return nil
}

type FindByMomentIdParam struct {
	MomentId  string            `protobuf:"bytes,2,opt,name=momentId" json:"momentId,omitempty"`
	Condition *common.Condition `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
}

func (m *FindByMomentIdParam) Reset()                    { *m = FindByMomentIdParam{} }
func (m *FindByMomentIdParam) String() string            { return proto.CompactTextString(m) }
func (*FindByMomentIdParam) ProtoMessage()               {}
func (*FindByMomentIdParam) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *FindByMomentIdParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *FindByMomentIdParam) GetCondition() *common.Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

type FindByMomentIdForModerationParam struct {
	MomentId      string            `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	MomentOwnerId string            `protobuf:"bytes,2,opt,name=momentOwnerId" json:"momentOwnerId,omitempty"`
	Condition     *common.Condition `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
}

func (m *FindByMomentIdForModerationParam) Reset()         { *m = FindByMomentIdForModerationParam{} }
func (m *FindByMomentIdForModerationParam) String() string { return proto.CompactTextString(m) }
func (*FindByMomentIdForModerationParam) ProtoMessage()    {}
func (*FindByMomentIdForModerationParam) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{3}
}

func (m *FindByMomentIdForModerationParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *FindByMomentIdForModerationParam) GetMomentOwnerId() string {
	if m != nil {
		return m.MomentOwnerId
	}
	return ""
}

func (m *FindByMomentIdForModerationParam) GetCondition() *common.Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

type FindByUserIdsParam struct {
	MomentId string                     `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	UserIds  []*common.StringValueArray `protobuf:"bytes,2,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *FindByUserIdsParam) Reset()                    { *m = FindByUserIdsParam{} }
func (m *FindByUserIdsParam) String() string            { return proto.CompactTextString(m) }
func (*FindByUserIdsParam) ProtoMessage()               {}
func (*FindByUserIdsParam) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *FindByUserIdsParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *FindByUserIdsParam) GetUserIds() []*common.StringValueArray {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type DeleteByUserIdParam struct {
	MomentId string `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
}

func (m *DeleteByUserIdParam) Reset()                    { *m = DeleteByUserIdParam{} }
func (m *DeleteByUserIdParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteByUserIdParam) ProtoMessage()               {}
func (*DeleteByUserIdParam) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *DeleteByUserIdParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *DeleteByUserIdParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type DeleteForBrandAccountParam struct {
	MomentId string `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	LikerId  string `protobuf:"bytes,2,opt,name=likerId" json:"likerId,omitempty"`
}

func (m *DeleteForBrandAccountParam) Reset()                    { *m = DeleteForBrandAccountParam{} }
func (m *DeleteForBrandAccountParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteForBrandAccountParam) ProtoMessage()               {}
func (*DeleteForBrandAccountParam) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *DeleteForBrandAccountParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *DeleteForBrandAccountParam) GetLikerId() string {
	if m != nil {
		return m.LikerId
	}
	return ""
}

func init() {
	proto.RegisterType((*MomentLikeParam)(nil), "moment.MomentLikeParam")
	proto.RegisterType((*MomentLikeReply)(nil), "moment.MomentLikeReply")
	proto.RegisterType((*FindByMomentIdParam)(nil), "moment.FindByMomentIdParam")
	proto.RegisterType((*FindByMomentIdForModerationParam)(nil), "moment.FindByMomentIdForModerationParam")
	proto.RegisterType((*FindByUserIdsParam)(nil), "moment.FindByUserIdsParam")
	proto.RegisterType((*DeleteByUserIdParam)(nil), "moment.DeleteByUserIdParam")
	proto.RegisterType((*DeleteForBrandAccountParam)(nil), "moment.DeleteForBrandAccountParam")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MomentLikeService service

type MomentLikeServiceClient interface {
	InsertMomentLike(ctx context.Context, in *MomentLikeParam, opts ...grpc.CallOption) (*MomentLikeReply, error)
	InsertToModerationForBrandAccount(ctx context.Context, in *MomentLikeParam, opts ...grpc.CallOption) (*MomentLikeReply, error)
	FindByMomentId(ctx context.Context, in *FindByMomentIdParam, opts ...grpc.CallOption) (*MomentLikeReply, error)
	FindByMomentIdForModeration(ctx context.Context, in *FindByMomentIdForModerationParam, opts ...grpc.CallOption) (*MomentLikeReply, error)
	FindByUserIds(ctx context.Context, in *FindByUserIdsParam, opts ...grpc.CallOption) (*MomentLikeReply, error)
	DeleteByUserId(ctx context.Context, in *DeleteByUserIdParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	DeleteForBrandAccount(ctx context.Context, in *DeleteForBrandAccountParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	DeleteModerationLikeForBrandAccount(ctx context.Context, in *DeleteForBrandAccountParam, opts ...grpc.CallOption) (*common.BoolValue, error)
}

type momentLikeServiceClient struct {
	cc *grpc.ClientConn
}

func NewMomentLikeServiceClient(cc *grpc.ClientConn) MomentLikeServiceClient {
	return &momentLikeServiceClient{cc}
}

func (c *momentLikeServiceClient) InsertMomentLike(ctx context.Context, in *MomentLikeParam, opts ...grpc.CallOption) (*MomentLikeReply, error) {
	out := new(MomentLikeReply)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/InsertMomentLike", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentLikeServiceClient) InsertToModerationForBrandAccount(ctx context.Context, in *MomentLikeParam, opts ...grpc.CallOption) (*MomentLikeReply, error) {
	out := new(MomentLikeReply)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/InsertToModerationForBrandAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentLikeServiceClient) FindByMomentId(ctx context.Context, in *FindByMomentIdParam, opts ...grpc.CallOption) (*MomentLikeReply, error) {
	out := new(MomentLikeReply)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/FindByMomentId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentLikeServiceClient) FindByMomentIdForModeration(ctx context.Context, in *FindByMomentIdForModerationParam, opts ...grpc.CallOption) (*MomentLikeReply, error) {
	out := new(MomentLikeReply)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/FindByMomentIdForModeration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentLikeServiceClient) FindByUserIds(ctx context.Context, in *FindByUserIdsParam, opts ...grpc.CallOption) (*MomentLikeReply, error) {
	out := new(MomentLikeReply)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/FindByUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentLikeServiceClient) DeleteByUserId(ctx context.Context, in *DeleteByUserIdParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/DeleteByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentLikeServiceClient) DeleteForBrandAccount(ctx context.Context, in *DeleteForBrandAccountParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/DeleteForBrandAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentLikeServiceClient) DeleteModerationLikeForBrandAccount(ctx context.Context, in *DeleteForBrandAccountParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentLikeService/DeleteModerationLikeForBrandAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MomentLikeService service

type MomentLikeServiceServer interface {
	InsertMomentLike(context.Context, *MomentLikeParam) (*MomentLikeReply, error)
	InsertToModerationForBrandAccount(context.Context, *MomentLikeParam) (*MomentLikeReply, error)
	FindByMomentId(context.Context, *FindByMomentIdParam) (*MomentLikeReply, error)
	FindByMomentIdForModeration(context.Context, *FindByMomentIdForModerationParam) (*MomentLikeReply, error)
	FindByUserIds(context.Context, *FindByUserIdsParam) (*MomentLikeReply, error)
	DeleteByUserId(context.Context, *DeleteByUserIdParam) (*common.BoolValue, error)
	DeleteForBrandAccount(context.Context, *DeleteForBrandAccountParam) (*common.BoolValue, error)
	DeleteModerationLikeForBrandAccount(context.Context, *DeleteForBrandAccountParam) (*common.BoolValue, error)
}

func RegisterMomentLikeServiceServer(s *grpc.Server, srv MomentLikeServiceServer) {
	s.RegisterService(&_MomentLikeService_serviceDesc, srv)
}

func _MomentLikeService_InsertMomentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentLikeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).InsertMomentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/InsertMomentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).InsertMomentLike(ctx, req.(*MomentLikeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentLikeService_InsertToModerationForBrandAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentLikeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).InsertToModerationForBrandAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/InsertToModerationForBrandAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).InsertToModerationForBrandAccount(ctx, req.(*MomentLikeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentLikeService_FindByMomentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByMomentIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).FindByMomentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/FindByMomentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).FindByMomentId(ctx, req.(*FindByMomentIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentLikeService_FindByMomentIdForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByMomentIdForModerationParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).FindByMomentIdForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/FindByMomentIdForModeration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).FindByMomentIdForModeration(ctx, req.(*FindByMomentIdForModerationParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentLikeService_FindByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUserIdsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).FindByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/FindByUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).FindByUserIds(ctx, req.(*FindByUserIdsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentLikeService_DeleteByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByUserIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).DeleteByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/DeleteByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).DeleteByUserId(ctx, req.(*DeleteByUserIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentLikeService_DeleteForBrandAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForBrandAccountParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).DeleteForBrandAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/DeleteForBrandAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).DeleteForBrandAccount(ctx, req.(*DeleteForBrandAccountParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentLikeService_DeleteModerationLikeForBrandAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForBrandAccountParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentLikeServiceServer).DeleteModerationLikeForBrandAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentLikeService/DeleteModerationLikeForBrandAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentLikeServiceServer).DeleteModerationLikeForBrandAccount(ctx, req.(*DeleteForBrandAccountParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _MomentLikeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.MomentLikeService",
	HandlerType: (*MomentLikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertMomentLike",
			Handler:    _MomentLikeService_InsertMomentLike_Handler,
		},
		{
			MethodName: "InsertToModerationForBrandAccount",
			Handler:    _MomentLikeService_InsertToModerationForBrandAccount_Handler,
		},
		{
			MethodName: "FindByMomentId",
			Handler:    _MomentLikeService_FindByMomentId_Handler,
		},
		{
			MethodName: "FindByMomentIdForModeration",
			Handler:    _MomentLikeService_FindByMomentIdForModeration_Handler,
		},
		{
			MethodName: "FindByUserIds",
			Handler:    _MomentLikeService_FindByUserIds_Handler,
		},
		{
			MethodName: "DeleteByUserId",
			Handler:    _MomentLikeService_DeleteByUserId_Handler,
		},
		{
			MethodName: "DeleteForBrandAccount",
			Handler:    _MomentLikeService_DeleteForBrandAccount_Handler,
		},
		{
			MethodName: "DeleteModerationLikeForBrandAccount",
			Handler:    _MomentLikeService_DeleteModerationLikeForBrandAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment/moment-like.service.proto",
}

func init() { proto.RegisterFile("moment/moment-like.service.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x95, 0x4d, 0x74, 0xec, 0x4d, 0x1b, 0xcc, 0xd3, 0x20, 0xca, 0x2e, 0x21, 0x70, 0xe8,
	0xa5, 0x89, 0x08, 0x7c, 0x00, 0x56, 0x4a, 0xa5, 0x4a, 0x0c, 0x50, 0xc6, 0x38, 0x20, 0x0e, 0xb8,
	0x89, 0xd5, 0x59, 0x8b, 0xed, 0xc8, 0x71, 0x99, 0xfa, 0x2d, 0xb8, 0xf0, 0x7d, 0x51, 0xf2, 0x9a,
	0x64, 0x59, 0x53, 0x2a, 0xaa, 0x9d, 0x5a, 0xbf, 0xf7, 0xf7, 0xff, 0xff, 0xec, 0xfc, 0x64, 0x70,
	0x85, 0x12, 0x4c, 0x9a, 0x00, 0x7f, 0x06, 0x29, 0xbf, 0x61, 0x7e, 0xce, 0xf4, 0x2f, 0x1e, 0x33,
	0x3f, 0xd3, 0xca, 0x28, 0xd2, 0xc3, 0x96, 0x63, 0x77, 0x28, 0x4b, 0x85, 0x73, 0x1a, 0x2b, 0x21,
	0x94, 0x0c, 0x6e, 0x35, 0xcd, 0x32, 0xa6, 0x73, 0x2c, 0x7b, 0x1f, 0xe0, 0xc9, 0x45, 0xa9, 0xfd,
	0xc8, 0x6f, 0xd8, 0x17, 0xaa, 0xa9, 0x20, 0x21, 0x80, 0xa8, 0x4b, 0xb6, 0xe5, 0xee, 0xf6, 0x0f,
	0x42, 0xe2, 0x63, 0xc9, 0x6f, 0xc4, 0xd1, 0x1d, 0x55, 0xdb, 0x26, 0x62, 0x59, 0xba, 0xd8, 0xca,
	0x66, 0x0a, 0x27, 0x63, 0x2e, 0x93, 0xe1, 0x02, 0xfb, 0x93, 0x04, 0x27, 0x72, 0xe0, 0xb1, 0x58,
	0x16, 0xec, 0x1d, 0xd7, 0xea, 0xef, 0x47, 0xf5, 0x9a, 0x04, 0xb0, 0x1f, 0x2b, 0x99, 0x70, 0xc3,
	0x95, 0xb4, 0x77, 0x5d, 0xab, 0x7f, 0x10, 0x1e, 0xfb, 0x78, 0x56, 0xff, 0x7d, 0xd5, 0x88, 0x1a,
	0x8d, 0xf7, 0xc7, 0x02, 0xb7, 0x1d, 0x32, 0x56, 0xfa, 0x42, 0x25, 0x4c, 0xd3, 0xa2, 0xbf, 0x9a,
	0x68, 0xdd, 0x4b, 0x7c, 0x05, 0x87, 0xf8, 0xff, 0xf3, 0xad, 0x64, 0xba, 0x1e, 0xa9, 0x5d, 0xfc,
	0xff, 0xb9, 0x12, 0x20, 0x38, 0xd6, 0x55, 0x5e, 0x18, 0xe4, 0x9b, 0x07, 0x09, 0x61, 0x6f, 0x8e,
	0x5a, 0x7b, 0xa7, 0xbc, 0x5e, 0xbb, 0x0a, 0xb8, 0x34, 0x9a, 0xcb, 0xd9, 0x37, 0x9a, 0xce, 0xd9,
	0xb9, 0xd6, 0x74, 0x11, 0x55, 0x42, 0x6f, 0x02, 0x27, 0x23, 0x96, 0x32, 0xc3, 0xaa, 0x9c, 0xcd,
	0x31, 0xcf, 0xa0, 0x87, 0xbb, 0x97, 0x07, 0x5d, 0xae, 0xbc, 0x08, 0x1c, 0xb4, 0x1a, 0x2b, 0x3d,
	0xd4, 0x54, 0x26, 0xe7, 0x71, 0xac, 0xe6, 0xd2, 0x6c, 0x76, 0xb4, 0x61, 0xaf, 0x20, 0xb3, 0xb1,
	0xac, 0x96, 0xe1, 0xef, 0x47, 0x70, 0xdc, 0xb0, 0x71, 0x89, 0x8c, 0x93, 0x11, 0x3c, 0x9d, 0xc8,
	0x9c, 0x69, 0xd3, 0xb4, 0xc8, 0xf3, 0x55, 0x94, 0xca, 0x60, 0xa7, 0xa3, 0x81, 0x40, 0x5e, 0xc1,
	0x0b, 0x74, 0xf9, 0xaa, 0x9a, 0xcf, 0x7d, 0x6f, 0xf6, 0x2d, 0x6c, 0xc7, 0x70, 0xd4, 0xc6, 0x89,
	0x9c, 0x55, 0xd2, 0x0e, 0x96, 0xd7, 0xfb, 0xfc, 0x84, 0xb3, 0x7f, 0x60, 0x49, 0xfa, 0xdd, 0xa6,
	0xab, 0xec, 0xae, 0x4f, 0x18, 0xc1, 0x61, 0x8b, 0x30, 0xe2, 0xb4, 0x3d, 0xef, 0x82, 0xb7, 0xde,
	0xe5, 0x1d, 0x1c, 0xb5, 0x09, 0x6a, 0xce, 0xdb, 0x41, 0x96, 0x53, 0x43, 0x3f, 0x54, 0x2a, 0x2d,
	0x89, 0x24, 0x9f, 0xe0, 0xb4, 0x13, 0x1c, 0xe2, 0xb5, 0x8d, 0xba, 0xb8, 0xea, 0xf2, 0xfb, 0x01,
	0x2f, 0x71, 0x43, 0x73, 0x13, 0xc5, 0xb8, 0x0f, 0xe3, 0x3e, 0x7c, 0xfb, 0x3d, 0x9c, 0x71, 0x73,
	0x3d, 0x9f, 0x16, 0xad, 0x20, 0x7b, 0x1d, 0xcb, 0xc0, 0x50, 0x69, 0xa8, 0x1c, 0x24, 0x4a, 0x50,
	0x2e, 0x07, 0x79, 0x7c, 0xcd, 0x04, 0x0d, 0x66, 0x2a, 0xa5, 0x72, 0xb6, 0x7c, 0x79, 0xa7, 0xbd,
	0xf2, 0x79, 0x7d, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x08, 0x4b, 0xc5, 0x0d, 0xbb, 0x05, 0x00,
	0x00,
}
