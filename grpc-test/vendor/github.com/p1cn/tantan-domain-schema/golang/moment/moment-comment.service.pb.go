// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moment/moment-comment.service.proto

package moment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MomentCommentParam struct {
	Comment []*MomentComment `protobuf:"bytes,1,rep,name=comment" json:"comment,omitempty"`
}

func (m *MomentCommentParam) Reset()                    { *m = MomentCommentParam{} }
func (m *MomentCommentParam) String() string            { return proto.CompactTextString(m) }
func (*MomentCommentParam) ProtoMessage()               {}
func (*MomentCommentParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MomentCommentParam) GetComment() []*MomentComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type MomentCommentStringParam struct {
	MessageId string `protobuf:"bytes,1,opt,name=MessageId" json:"MessageId,omitempty"`
}

func (m *MomentCommentStringParam) Reset()                    { *m = MomentCommentStringParam{} }
func (m *MomentCommentStringParam) String() string            { return proto.CompactTextString(m) }
func (*MomentCommentStringParam) ProtoMessage()               {}
func (*MomentCommentStringParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MomentCommentStringParam) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type MomentCommentReply struct {
	Comment []*MomentComment `protobuf:"bytes,1,rep,name=comment" json:"comment,omitempty"`
}

func (m *MomentCommentReply) Reset()                    { *m = MomentCommentReply{} }
func (m *MomentCommentReply) String() string            { return proto.CompactTextString(m) }
func (*MomentCommentReply) ProtoMessage()               {}
func (*MomentCommentReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MomentCommentReply) GetComment() []*MomentComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type FindCommentParam struct {
	MomentId  string            `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	Condition *common.Condition `protobuf:"bytes,2,opt,name=condition" json:"condition,omitempty"`
}

func (m *FindCommentParam) Reset()                    { *m = FindCommentParam{} }
func (m *FindCommentParam) String() string            { return proto.CompactTextString(m) }
func (*FindCommentParam) ProtoMessage()               {}
func (*FindCommentParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *FindCommentParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *FindCommentParam) GetCondition() *common.Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

type FindCommentByMomentIdForModerationParam struct {
	MomentId     string            `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	MomentUserId string            `protobuf:"bytes,2,opt,name=momentUserId" json:"momentUserId,omitempty"`
	Condition    *common.Condition `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
}

func (m *FindCommentByMomentIdForModerationParam) Reset() {
	*m = FindCommentByMomentIdForModerationParam{}
}
func (m *FindCommentByMomentIdForModerationParam) String() string { return proto.CompactTextString(m) }
func (*FindCommentByMomentIdForModerationParam) ProtoMessage()    {}
func (*FindCommentByMomentIdForModerationParam) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{4}
}

func (m *FindCommentByMomentIdForModerationParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *FindCommentByMomentIdForModerationParam) GetMomentUserId() string {
	if m != nil {
		return m.MomentUserId
	}
	return ""
}

func (m *FindCommentByMomentIdForModerationParam) GetCondition() *common.Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

type MapArrayParam struct {
	CommentIdsByMomentId map[string]*common.StringValueArray `protobuf:"bytes,1,rep,name=commentIdsByMomentId" json:"commentIdsByMomentId,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapArrayParam) Reset()                    { *m = MapArrayParam{} }
func (m *MapArrayParam) String() string            { return proto.CompactTextString(m) }
func (*MapArrayParam) ProtoMessage()               {}
func (*MapArrayParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *MapArrayParam) GetCommentIdsByMomentId() map[string]*common.StringValueArray {
	if m != nil {
		return m.CommentIdsByMomentId
	}
	return nil
}

type UserIdMapArrayParam struct {
	UserId        string                              `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	CommentIdsMap map[string]*common.StringValueArray `protobuf:"bytes,2,rep,name=commentIdsMap" json:"commentIdsMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserIdMapArrayParam) Reset()                    { *m = UserIdMapArrayParam{} }
func (m *UserIdMapArrayParam) String() string            { return proto.CompactTextString(m) }
func (*UserIdMapArrayParam) ProtoMessage()               {}
func (*UserIdMapArrayParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *UserIdMapArrayParam) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserIdMapArrayParam) GetCommentIdsMap() map[string]*common.StringValueArray {
	if m != nil {
		return m.CommentIdsMap
	}
	return nil
}

type DeleteForMomentByCommentIdParam struct {
	MomentId  string `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	CommentId string `protobuf:"bytes,2,opt,name=commentId" json:"commentId,omitempty"`
}

func (m *DeleteForMomentByCommentIdParam) Reset()                    { *m = DeleteForMomentByCommentIdParam{} }
func (m *DeleteForMomentByCommentIdParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteForMomentByCommentIdParam) ProtoMessage()               {}
func (*DeleteForMomentByCommentIdParam) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *DeleteForMomentByCommentIdParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *DeleteForMomentByCommentIdParam) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

type DeleteByMessageIdForBrandAccountParam struct {
	MomentId        string `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	CommentId       string `protobuf:"bytes,2,opt,name=commentId" json:"commentId,omitempty"`
	CommentSenderId string `protobuf:"bytes,3,opt,name=commentSenderId" json:"commentSenderId,omitempty"`
}

func (m *DeleteByMessageIdForBrandAccountParam) Reset()         { *m = DeleteByMessageIdForBrandAccountParam{} }
func (m *DeleteByMessageIdForBrandAccountParam) String() string { return proto.CompactTextString(m) }
func (*DeleteByMessageIdForBrandAccountParam) ProtoMessage()    {}
func (*DeleteByMessageIdForBrandAccountParam) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{8}
}

func (m *DeleteByMessageIdForBrandAccountParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *DeleteByMessageIdForBrandAccountParam) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *DeleteByMessageIdForBrandAccountParam) GetCommentSenderId() string {
	if m != nil {
		return m.CommentSenderId
	}
	return ""
}

func init() {
	proto.RegisterType((*MomentCommentParam)(nil), "moment.MomentCommentParam")
	proto.RegisterType((*MomentCommentStringParam)(nil), "moment.MomentCommentStringParam")
	proto.RegisterType((*MomentCommentReply)(nil), "moment.MomentCommentReply")
	proto.RegisterType((*FindCommentParam)(nil), "moment.FindCommentParam")
	proto.RegisterType((*FindCommentByMomentIdForModerationParam)(nil), "moment.FindCommentByMomentIdForModerationParam")
	proto.RegisterType((*MapArrayParam)(nil), "moment.MapArrayParam")
	proto.RegisterType((*UserIdMapArrayParam)(nil), "moment.UserIdMapArrayParam")
	proto.RegisterType((*DeleteForMomentByCommentIdParam)(nil), "moment.DeleteForMomentByCommentIdParam")
	proto.RegisterType((*DeleteByMessageIdForBrandAccountParam)(nil), "moment.DeleteByMessageIdForBrandAccountParam")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MomentCommentService service

type MomentCommentServiceClient interface {
	InsertBrandInspiredComment(ctx context.Context, in *MomentCommentParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	DeleteBrandInspiredComment(ctx context.Context, in *MomentCommentStringParam, opts ...grpc.CallOption) (*common.BoolValue, error)
}

type momentCommentServiceClient struct {
	cc *grpc.ClientConn
}

func NewMomentCommentServiceClient(cc *grpc.ClientConn) MomentCommentServiceClient {
	return &momentCommentServiceClient{cc}
}

func (c *momentCommentServiceClient) InsertBrandInspiredComment(ctx context.Context, in *MomentCommentParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentCommentService/InsertBrandInspiredComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentCommentServiceClient) DeleteBrandInspiredComment(ctx context.Context, in *MomentCommentStringParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentCommentService/DeleteBrandInspiredComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MomentCommentService service

type MomentCommentServiceServer interface {
	InsertBrandInspiredComment(context.Context, *MomentCommentParam) (*common.BoolValue, error)
	DeleteBrandInspiredComment(context.Context, *MomentCommentStringParam) (*common.BoolValue, error)
}

func RegisterMomentCommentServiceServer(s *grpc.Server, srv MomentCommentServiceServer) {
	s.RegisterService(&_MomentCommentService_serviceDesc, srv)
}

func _MomentCommentService_InsertBrandInspiredComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentCommentParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentCommentServiceServer).InsertBrandInspiredComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentCommentService/InsertBrandInspiredComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentCommentServiceServer).InsertBrandInspiredComment(ctx, req.(*MomentCommentParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentCommentService_DeleteBrandInspiredComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentCommentStringParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentCommentServiceServer).DeleteBrandInspiredComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentCommentService/DeleteBrandInspiredComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentCommentServiceServer).DeleteBrandInspiredComment(ctx, req.(*MomentCommentStringParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _MomentCommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.MomentCommentService",
	HandlerType: (*MomentCommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertBrandInspiredComment",
			Handler:    _MomentCommentService_InsertBrandInspiredComment_Handler,
		},
		{
			MethodName: "DeleteBrandInspiredComment",
			Handler:    _MomentCommentService_DeleteBrandInspiredComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment/moment-comment.service.proto",
}

func init() { proto.RegisterFile("moment/moment-comment.service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x65, 0x13, 0x11, 0xc8, 0x94, 0x8a, 0xb2, 0xb4, 0xc8, 0x98, 0x4a, 0x44, 0x46, 0x88, 0x5c,
	0x62, 0x8b, 0xc0, 0xa1, 0xe2, 0xd6, 0x84, 0x46, 0xca, 0xc1, 0x12, 0x72, 0x80, 0x43, 0x39, 0xa0,
	0xad, 0xbd, 0x4a, 0x2d, 0xec, 0x5d, 0x6b, 0xbd, 0x29, 0xf2, 0x37, 0xf0, 0x07, 0x7c, 0x0a, 0x3f,
	0xc2, 0x91, 0x5f, 0x41, 0xde, 0x5d, 0xdb, 0x31, 0x35, 0xb4, 0x48, 0x3d, 0xc5, 0xbb, 0xfb, 0xe6,
	0xcd, 0x7b, 0x93, 0x99, 0x81, 0x67, 0x29, 0x4f, 0x29, 0x93, 0x9e, 0xfe, 0x99, 0x84, 0x3c, 0x2d,
	0x7f, 0xdd, 0x9c, 0x8a, 0x8b, 0x38, 0xa4, 0x6e, 0x26, 0xb8, 0xe4, 0x78, 0xa0, 0x5f, 0xed, 0x27,
	0xdd, 0x60, 0x05, 0xb2, 0x0f, 0xca, 0x23, 0x67, 0xde, 0x57, 0x41, 0xb2, 0x8c, 0x8a, 0x5c, 0x5f,
	0x3b, 0x27, 0x80, 0x7d, 0x05, 0x9f, 0x6b, 0xf4, 0x3b, 0x22, 0x48, 0x8a, 0x3d, 0xb8, 0x63, 0xa2,
	0x2d, 0x34, 0xea, 0x8f, 0x77, 0xa6, 0x07, 0xae, 0x26, 0x75, 0x5b, 0xe0, 0xa0, 0x42, 0x39, 0x47,
	0x60, 0xb5, 0x5e, 0x56, 0x52, 0xc4, 0x6c, 0xad, 0xc9, 0x0e, 0x61, 0xe8, 0xd3, 0x3c, 0x27, 0x6b,
	0xba, 0x8c, 0x2c, 0x34, 0x42, 0xe3, 0x61, 0xd0, 0x5c, 0x5c, 0x12, 0x10, 0xd0, 0x2c, 0x29, 0xfe,
	0x5f, 0xc0, 0x67, 0xd8, 0x5b, 0xc4, 0x2c, 0x6a, 0xb9, 0xb0, 0xe1, 0xae, 0x0e, 0xaa, 0xf3, 0xd6,
	0x67, 0xec, 0xc1, 0x30, 0xe4, 0x2c, 0x8a, 0x65, 0xcc, 0x99, 0xd5, 0x1b, 0xa1, 0xf1, 0xce, 0xf4,
	0x81, 0xab, 0x4b, 0xe4, 0xce, 0xab, 0x87, 0xa0, 0xc1, 0x38, 0xdf, 0x11, 0xbc, 0xd8, 0xca, 0x30,
	0x2b, 0x7c, 0x43, 0xb5, 0xe0, 0xc2, 0xe7, 0x11, 0x15, 0xa4, 0x84, 0x5d, 0x9d, 0xd8, 0x81, 0x7b,
	0xfa, 0xfb, 0x43, 0x4e, 0xc5, 0x32, 0x52, 0xb9, 0x87, 0x41, 0xeb, 0xae, 0x2d, 0xae, 0x7f, 0x0d,
	0x71, 0x3f, 0x11, 0xec, 0xfa, 0x24, 0x3b, 0x16, 0x82, 0x14, 0x5a, 0x42, 0x08, 0xfb, 0xa6, 0x34,
	0xcb, 0x28, 0x6f, 0xc4, 0x9a, 0x6a, 0x7a, 0x75, 0x35, 0xb7, 0x83, 0xdc, 0x79, 0x47, 0xc4, 0x09,
	0x93, 0xa2, 0x08, 0x3a, 0xc9, 0x6c, 0x02, 0x8f, 0xff, 0x1a, 0x82, 0xf7, 0xa0, 0xff, 0x85, 0x16,
	0xc6, 0x7f, 0xf9, 0x89, 0x5d, 0xb8, 0x7d, 0x41, 0x92, 0x0d, 0x35, 0xf5, 0xb6, 0x2a, 0x4b, 0xba,
	0x59, 0x3e, 0x96, 0x4f, 0x4a, 0x4c, 0xa0, 0x61, 0x6f, 0x7a, 0x47, 0xc8, 0xf9, 0x85, 0xe0, 0xa1,
	0xae, 0x4a, 0xdb, 0xdf, 0x23, 0x18, 0x6c, 0x74, 0x01, 0x75, 0x02, 0x73, 0xc2, 0xef, 0x61, 0xb7,
	0x91, 0xea, 0x93, 0xcc, 0xea, 0x29, 0xc3, 0x6e, 0x65, 0xb8, 0x83, 0x6b, 0xcb, 0xb6, 0x4f, 0x32,
	0xed, 0xb7, 0x4d, 0x62, 0x9f, 0x02, 0xbe, 0x0c, 0xba, 0x21, 0x87, 0x9f, 0xe0, 0xe9, 0x5b, 0x9a,
	0x50, 0x49, 0x55, 0x23, 0xe9, 0xde, 0xaa, 0x93, 0x5d, 0xdd, 0x4f, 0x87, 0x65, 0xaf, 0x18, 0xb4,
	0x69, 0xa6, 0xe6, 0xc2, 0xf9, 0x86, 0xe0, 0xb9, 0x66, 0x9f, 0x15, 0xf5, 0xcc, 0x2d, 0xb8, 0x98,
	0x09, 0xc2, 0xa2, 0xe3, 0x30, 0xe4, 0x9b, 0xeb, 0x0c, 0xcb, 0x3f, 0x73, 0xe0, 0x31, 0xdc, 0x37,
	0x87, 0x15, 0x65, 0x91, 0xfa, 0x4f, 0xfa, 0x0a, 0xf3, 0xe7, 0xf5, 0xf4, 0x07, 0x82, 0xfd, 0xf6,
	0x9a, 0xd0, 0x7b, 0x0c, 0xfb, 0x60, 0x2f, 0x59, 0x4e, 0x85, 0x54, 0xba, 0x96, 0x2c, 0xcf, 0x62,
	0x41, 0xab, 0x51, 0xc3, 0x76, 0xe7, 0xec, 0x2b, 0xd9, 0x76, 0x3d, 0x17, 0x33, 0xce, 0x13, 0x55,
	0x60, 0xe7, 0x16, 0x5e, 0x81, 0x6d, 0x4c, 0x77, 0xd1, 0x8d, 0x3a, 0xe9, 0xb6, 0x36, 0x56, 0x27,
	0xe9, 0xec, 0xf5, 0xe9, 0x74, 0x1d, 0xcb, 0xf3, 0xcd, 0x59, 0xf9, 0xe8, 0x65, 0x2f, 0x43, 0xe6,
	0x49, 0xc2, 0x24, 0x61, 0x93, 0x88, 0xa7, 0x24, 0x66, 0x93, 0x3c, 0x3c, 0xa7, 0x29, 0xf1, 0xd6,
	0x3c, 0x21, 0x6c, 0x6d, 0x96, 0xf0, 0xd9, 0x40, 0xad, 0xd9, 0x57, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x50, 0xa1, 0x22, 0x02, 0xc9, 0x05, 0x00, 0x00,
}
