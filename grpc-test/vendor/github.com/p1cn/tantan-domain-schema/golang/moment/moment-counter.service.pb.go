// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moment/moment-counter.service.proto

package moment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MomentCounterParam struct {
	MomentUserId       string `protobuf:"bytes,1,opt,name=momentUserId" json:"momentUserId,omitempty"`
	TotalMomentCounter int32  `protobuf:"varint,2,opt,name=totalMomentCounter" json:"totalMomentCounter,omitempty"`
}

func (m *MomentCounterParam) Reset()                    { *m = MomentCounterParam{} }
func (m *MomentCounterParam) String() string            { return proto.CompactTextString(m) }
func (*MomentCounterParam) ProtoMessage()               {}
func (*MomentCounterParam) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *MomentCounterParam) GetMomentUserId() string {
	if m != nil {
		return m.MomentUserId
	}
	return ""
}

func (m *MomentCounterParam) GetTotalMomentCounter() int32 {
	if m != nil {
		return m.TotalMomentCounter
	}
	return 0
}

func init() {
	proto.RegisterType((*MomentCounterParam)(nil), "moment.MomentCounterParam")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MomentCounterService service

type MomentCounterServiceClient interface {
	UpsertMomentCounter(ctx context.Context, in *MomentCounterParam, opts ...grpc.CallOption) (*common.BoolValue, error)
}

type momentCounterServiceClient struct {
	cc *grpc.ClientConn
}

func NewMomentCounterServiceClient(cc *grpc.ClientConn) MomentCounterServiceClient {
	return &momentCounterServiceClient{cc}
}

func (c *momentCounterServiceClient) UpsertMomentCounter(ctx context.Context, in *MomentCounterParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentCounterService/UpsertMomentCounter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MomentCounterService service

type MomentCounterServiceServer interface {
	UpsertMomentCounter(context.Context, *MomentCounterParam) (*common.BoolValue, error)
}

func RegisterMomentCounterServiceServer(s *grpc.Server, srv MomentCounterServiceServer) {
	s.RegisterService(&_MomentCounterService_serviceDesc, srv)
}

func _MomentCounterService_UpsertMomentCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentCounterParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentCounterServiceServer).UpsertMomentCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentCounterService/UpsertMomentCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentCounterServiceServer).UpsertMomentCounter(ctx, req.(*MomentCounterParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _MomentCounterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.MomentCounterService",
	HandlerType: (*MomentCounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertMomentCounter",
			Handler:    _MomentCounterService_UpsertMomentCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment/moment-counter.service.proto",
}

func init() { proto.RegisterFile("moment/moment-counter.service.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0x03, 0x41,
	0x10, 0x85, 0x39, 0xc1, 0x80, 0x8b, 0x8d, 0xab, 0x42, 0xb8, 0x2a, 0xc4, 0x26, 0xcd, 0xed, 0x62,
	0xf4, 0x17, 0x44, 0x1b, 0x0b, 0x41, 0x22, 0xb1, 0x10, 0x9b, 0xc9, 0x66, 0xb8, 0x3b, 0xb8, 0xdd,
	0x59, 0x66, 0xe7, 0xf4, 0xef, 0x8b, 0x19, 0x9b, 0x43, 0xab, 0x81, 0xf7, 0xcd, 0x63, 0xde, 0x3c,
	0x73, 0x13, 0x29, 0x62, 0x12, 0xaf, 0xa3, 0x09, 0x34, 0x26, 0x41, 0x76, 0x05, 0xf9, 0xb3, 0x0f,
	0xe8, 0x32, 0x93, 0x90, 0x9d, 0x29, 0xad, 0xaf, 0x03, 0xc5, 0x48, 0xc9, 0x7f, 0x31, 0xe4, 0x8c,
	0x5c, 0x14, 0x2f, 0x3b, 0x63, 0x9f, 0x8f, 0x0b, 0x0f, 0xea, 0x7e, 0x01, 0x86, 0x68, 0x97, 0xe6,
	0x5c, 0x6d, 0xbb, 0x82, 0xfc, 0x74, 0x98, 0x57, 0x8b, 0x6a, 0x75, 0xb6, 0x9d, 0x68, 0xd6, 0x19,
	0x2b, 0x24, 0x30, 0x4c, 0xec, 0xf3, 0x93, 0x45, 0xb5, 0x3a, 0xdd, 0xfe, 0x43, 0xd6, 0x1f, 0xe6,
	0x6a, 0x22, 0xbc, 0x6a, 0x4c, 0xfb, 0x68, 0x2e, 0x77, 0xb9, 0x20, 0xcb, 0x84, 0xda, 0xda, 0xe9,
	0x35, 0xf7, 0x37, 0x5e, 0x7d, 0xe1, 0xf4, 0x19, 0xb7, 0x21, 0x1a, 0xde, 0x60, 0x18, 0x71, 0x73,
	0xff, 0xbe, 0x6e, 0x7b, 0xe9, 0xc6, 0xfd, 0x0f, 0xf2, 0xf9, 0x36, 0x24, 0x2f, 0x90, 0x04, 0x52,
	0x73, 0xa0, 0x08, 0x7d, 0x6a, 0x4a, 0xe8, 0x30, 0x82, 0x6f, 0x69, 0x80, 0xd4, 0xfe, 0x56, 0xb6,
	0x9f, 0x1d, 0x4b, 0xb8, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x69, 0x0e, 0x40, 0x67, 0x4a, 0x01,
	0x00, 0x00,
}
