// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moment/moment-feed.service.proto

package moment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MomentFeedParam struct {
	Feed []*MomentFeed `protobuf:"bytes,1,rep,name=feed" json:"feed,omitempty"`
}

func (m *MomentFeedParam) Reset()                    { *m = MomentFeedParam{} }
func (m *MomentFeedParam) String() string            { return proto.CompactTextString(m) }
func (*MomentFeedParam) ProtoMessage()               {}
func (*MomentFeedParam) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *MomentFeedParam) GetFeed() []*MomentFeed {
	if m != nil {
		return m.Feed
	}
	return nil
}

type MomentFeedReply struct {
	Feed []*MomentFeed `protobuf:"bytes,1,rep,name=feed" json:"feed,omitempty"`
}

func (m *MomentFeedReply) Reset()                    { *m = MomentFeedReply{} }
func (m *MomentFeedReply) String() string            { return proto.CompactTextString(m) }
func (*MomentFeedReply) ProtoMessage()               {}
func (*MomentFeedReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *MomentFeedReply) GetFeed() []*MomentFeed {
	if m != nil {
		return m.Feed
	}
	return nil
}

type DeleteByMomentParam struct {
	MomentId string   `protobuf:"bytes,1,opt,name=momentId" json:"momentId,omitempty"`
	UserIds  []string `protobuf:"bytes,2,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *DeleteByMomentParam) Reset()                    { *m = DeleteByMomentParam{} }
func (m *DeleteByMomentParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteByMomentParam) ProtoMessage()               {}
func (*DeleteByMomentParam) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *DeleteByMomentParam) GetMomentId() string {
	if m != nil {
		return m.MomentId
	}
	return ""
}

func (m *DeleteByMomentParam) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type DeleteByMomentUserIdParam struct {
	MomentUserId string   `protobuf:"bytes,1,opt,name=momentUserId" json:"momentUserId,omitempty"`
	UserIds      []string `protobuf:"bytes,2,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *DeleteByMomentUserIdParam) Reset()                    { *m = DeleteByMomentUserIdParam{} }
func (m *DeleteByMomentUserIdParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteByMomentUserIdParam) ProtoMessage()               {}
func (*DeleteByMomentUserIdParam) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *DeleteByMomentUserIdParam) GetMomentUserId() string {
	if m != nil {
		return m.MomentUserId
	}
	return ""
}

func (m *DeleteByMomentUserIdParam) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func init() {
	proto.RegisterType((*MomentFeedParam)(nil), "moment.MomentFeedParam")
	proto.RegisterType((*MomentFeedReply)(nil), "moment.MomentFeedReply")
	proto.RegisterType((*DeleteByMomentParam)(nil), "moment.DeleteByMomentParam")
	proto.RegisterType((*DeleteByMomentUserIdParam)(nil), "moment.DeleteByMomentUserIdParam")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MomentFeedService service

type MomentFeedServiceClient interface {
	InsertFeed(ctx context.Context, in *MomentFeedParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	FindByUserId(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentFeedReply, error)
	FindByUserIdForModeration(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentFeedReply, error)
	DeleteByMomentId(ctx context.Context, in *DeleteByMomentParam, opts ...grpc.CallOption) (*common.BoolValue, error)
	DeleteByMomentUserId(ctx context.Context, in *DeleteByMomentUserIdParam, opts ...grpc.CallOption) (*common.BoolValue, error)
}

type momentFeedServiceClient struct {
	cc *grpc.ClientConn
}

func NewMomentFeedServiceClient(cc *grpc.ClientConn) MomentFeedServiceClient {
	return &momentFeedServiceClient{cc}
}

func (c *momentFeedServiceClient) InsertFeed(ctx context.Context, in *MomentFeedParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentFeedService/InsertFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentFeedServiceClient) FindByUserId(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentFeedReply, error) {
	out := new(MomentFeedReply)
	err := grpc.Invoke(ctx, "/moment.MomentFeedService/FindByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentFeedServiceClient) FindByUserIdForModeration(ctx context.Context, in *common.Condition, opts ...grpc.CallOption) (*MomentFeedReply, error) {
	out := new(MomentFeedReply)
	err := grpc.Invoke(ctx, "/moment.MomentFeedService/FindByUserIdForModeration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentFeedServiceClient) DeleteByMomentId(ctx context.Context, in *DeleteByMomentParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentFeedService/DeleteByMomentId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentFeedServiceClient) DeleteByMomentUserId(ctx context.Context, in *DeleteByMomentUserIdParam, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/moment.MomentFeedService/DeleteByMomentUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MomentFeedService service

type MomentFeedServiceServer interface {
	InsertFeed(context.Context, *MomentFeedParam) (*common.BoolValue, error)
	FindByUserId(context.Context, *common.Condition) (*MomentFeedReply, error)
	FindByUserIdForModeration(context.Context, *common.Condition) (*MomentFeedReply, error)
	DeleteByMomentId(context.Context, *DeleteByMomentParam) (*common.BoolValue, error)
	DeleteByMomentUserId(context.Context, *DeleteByMomentUserIdParam) (*common.BoolValue, error)
}

func RegisterMomentFeedServiceServer(s *grpc.Server, srv MomentFeedServiceServer) {
	s.RegisterService(&_MomentFeedService_serviceDesc, srv)
}

func _MomentFeedService_InsertFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentFeedParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentFeedServiceServer).InsertFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentFeedService/InsertFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentFeedServiceServer).InsertFeed(ctx, req.(*MomentFeedParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentFeedService_FindByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentFeedServiceServer).FindByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentFeedService/FindByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentFeedServiceServer).FindByUserId(ctx, req.(*common.Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentFeedService_FindByUserIdForModeration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentFeedServiceServer).FindByUserIdForModeration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentFeedService/FindByUserIdForModeration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentFeedServiceServer).FindByUserIdForModeration(ctx, req.(*common.Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentFeedService_DeleteByMomentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByMomentParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentFeedServiceServer).DeleteByMomentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentFeedService/DeleteByMomentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentFeedServiceServer).DeleteByMomentId(ctx, req.(*DeleteByMomentParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentFeedService_DeleteByMomentUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByMomentUserIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentFeedServiceServer).DeleteByMomentUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.MomentFeedService/DeleteByMomentUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentFeedServiceServer).DeleteByMomentUserId(ctx, req.(*DeleteByMomentUserIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _MomentFeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.MomentFeedService",
	HandlerType: (*MomentFeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertFeed",
			Handler:    _MomentFeedService_InsertFeed_Handler,
		},
		{
			MethodName: "FindByUserId",
			Handler:    _MomentFeedService_FindByUserId_Handler,
		},
		{
			MethodName: "FindByUserIdForModeration",
			Handler:    _MomentFeedService_FindByUserIdForModeration_Handler,
		},
		{
			MethodName: "DeleteByMomentId",
			Handler:    _MomentFeedService_DeleteByMomentId_Handler,
		},
		{
			MethodName: "DeleteByMomentUserId",
			Handler:    _MomentFeedService_DeleteByMomentUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment/moment-feed.service.proto",
}

func init() { proto.RegisterFile("moment/moment-feed.service.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x5f, 0x4b, 0xf3, 0x30,
	0x18, 0xc5, 0xd9, 0xf6, 0xb2, 0xd7, 0x3d, 0x0e, 0x74, 0x51, 0xb1, 0xab, 0x37, 0x73, 0x17, 0xb2,
	0x9b, 0xb5, 0x38, 0xbd, 0x50, 0x2f, 0xab, 0x4c, 0x8a, 0x0e, 0xa4, 0xa2, 0xa0, 0x77, 0x59, 0xf3,
	0xb8, 0x15, 0x9a, 0xa4, 0xa4, 0x9d, 0xb2, 0xef, 0xeb, 0x07, 0x91, 0x36, 0xfb, 0x57, 0x8c, 0xa0,
	0x57, 0x25, 0xcf, 0x39, 0xe7, 0x97, 0xe6, 0x24, 0xd0, 0xe1, 0x92, 0xa3, 0xc8, 0x5c, 0xfd, 0xe9,
	0xbf, 0x21, 0x32, 0x27, 0x45, 0xf5, 0x1e, 0x85, 0xe8, 0x24, 0x4a, 0x66, 0x92, 0xd4, 0xb5, 0x64,
	0x5b, 0x06, 0x67, 0xe1, 0xb0, 0x0f, 0x42, 0xc9, 0xb9, 0x14, 0xee, 0x87, 0xa2, 0x49, 0x82, 0x2a,
	0xd5, 0xe3, 0xee, 0x25, 0xec, 0x8c, 0x0a, 0xef, 0x10, 0x91, 0x3d, 0x50, 0x45, 0x39, 0x39, 0x81,
	0x7f, 0x79, 0xce, 0xaa, 0x74, 0x6a, 0xbd, 0xed, 0x01, 0x71, 0x34, 0xcb, 0x59, 0xdb, 0x82, 0x42,
	0x2f, 0x47, 0x03, 0x4c, 0xe2, 0xf9, 0xaf, 0xa3, 0x77, 0xb0, 0x77, 0x83, 0x31, 0x66, 0xe8, 0xcd,
	0xb5, 0xa6, 0x77, 0xb6, 0x61, 0x4b, 0x27, 0xfc, 0x1c, 0x51, 0xe9, 0x35, 0x82, 0xd5, 0x9a, 0x58,
	0xf0, 0x7f, 0x96, 0xa2, 0xf2, 0x59, 0x6a, 0x55, 0x3b, 0xb5, 0x5e, 0x23, 0x58, 0x2e, 0xbb, 0x2f,
	0xd0, 0x2e, 0xc3, 0x9e, 0x0a, 0x41, 0x23, 0xbb, 0xd0, 0xe4, 0x1b, 0xc3, 0x05, 0xb6, 0x34, 0xfb,
	0x19, 0x3d, 0xf8, 0xac, 0x42, 0x6b, 0xfd, 0xf3, 0x8f, 0xba, 0x72, 0x72, 0x01, 0xe0, 0x8b, 0x14,
	0x55, 0x31, 0x24, 0x87, 0xdf, 0x4f, 0x59, 0x6c, 0x6d, 0xb7, 0x1c, 0x5d, 0xb9, 0xe3, 0x49, 0x19,
	0x3f, 0xd3, 0x78, 0x86, 0xe4, 0x0a, 0x9a, 0xc3, 0x48, 0x30, 0x6f, 0xbe, 0xd8, 0x79, 0x65, 0xb9,
	0x96, 0x82, 0x45, 0x59, 0x24, 0x85, 0x6d, 0xc0, 0xe9, 0x6e, 0x6f, 0xa1, 0xbd, 0x99, 0x1d, 0x4a,
	0x35, 0x92, 0x0c, 0x15, 0xcd, 0x53, 0x7f, 0x02, 0x79, 0xb0, 0x5b, 0xee, 0xcb, 0x67, 0xe4, 0x68,
	0x69, 0x36, 0x5c, 0x8b, 0xe9, 0x20, 0xf7, 0xb0, 0x6f, 0xea, 0x9c, 0x1c, 0x9b, 0x39, 0x1b, 0x37,
	0x62, 0xa0, 0x79, 0xe7, 0xaf, 0x83, 0x49, 0x94, 0x4d, 0x67, 0xe3, 0x5c, 0x72, 0x93, 0xd3, 0x50,
	0xb8, 0x19, 0x15, 0x19, 0x15, 0x7d, 0x26, 0x39, 0x8d, 0x44, 0x3f, 0x0d, 0xa7, 0xc8, 0xa9, 0x3b,
	0x91, 0x31, 0x15, 0x93, 0xc5, 0xe3, 0x1e, 0xd7, 0x8b, 0x17, 0x7c, 0xf6, 0x15, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0x9a, 0x47, 0x50, 0x1e, 0x03, 0x00, 0x00,
}
