// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/device.service.proto

package device

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/p1cn/tantan-domain-schema/golang/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DevicesReply struct {
	Devices []*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *DevicesReply) Reset()                    { *m = DevicesReply{} }
func (m *DevicesReply) String() string            { return proto.CompactTextString(m) }
func (*DevicesReply) ProtoMessage()               {}
func (*DevicesReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DevicesReply) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type DeviceIdentifiersReply struct {
	DeviceIdentifiers []*DeviceIdentifier `protobuf:"bytes,1,rep,name=deviceIdentifiers" json:"deviceIdentifiers,omitempty"`
}

func (m *DeviceIdentifiersReply) Reset()                    { *m = DeviceIdentifiersReply{} }
func (m *DeviceIdentifiersReply) String() string            { return proto.CompactTextString(m) }
func (*DeviceIdentifiersReply) ProtoMessage()               {}
func (*DeviceIdentifiersReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DeviceIdentifiersReply) GetDeviceIdentifiers() []*DeviceIdentifier {
	if m != nil {
		return m.DeviceIdentifiers
	}
	return nil
}

type DeviceNameFilter struct {
	DeviceName string `protobuf:"bytes,1,opt,name=deviceName" json:"deviceName,omitempty"`
}

func (m *DeviceNameFilter) Reset()                    { *m = DeviceNameFilter{} }
func (m *DeviceNameFilter) String() string            { return proto.CompactTextString(m) }
func (*DeviceNameFilter) ProtoMessage()               {}
func (*DeviceNameFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DeviceNameFilter) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type DeviceIdentifierTokensFilter struct {
	Tokens []string `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *DeviceIdentifierTokensFilter) Reset()                    { *m = DeviceIdentifierTokensFilter{} }
func (m *DeviceIdentifierTokensFilter) String() string            { return proto.CompactTextString(m) }
func (*DeviceIdentifierTokensFilter) ProtoMessage()               {}
func (*DeviceIdentifierTokensFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DeviceIdentifierTokensFilter) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type FindDevicesByIdsRequest struct {
	Params *FindDevicesByIdsParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindDevicesByIdsRequest) Reset()                    { *m = FindDevicesByIdsRequest{} }
func (m *FindDevicesByIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindDevicesByIdsRequest) ProtoMessage()               {}
func (*FindDevicesByIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *FindDevicesByIdsRequest) GetParams() *FindDevicesByIdsParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindDevicesByIdsParams struct {
	Ids            []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	IncludeDeleted bool     `protobuf:"varint,2,opt,name=includeDeleted" json:"includeDeleted,omitempty"`
}

func (m *FindDevicesByIdsParams) Reset()                    { *m = FindDevicesByIdsParams{} }
func (m *FindDevicesByIdsParams) String() string            { return proto.CompactTextString(m) }
func (*FindDevicesByIdsParams) ProtoMessage()               {}
func (*FindDevicesByIdsParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *FindDevicesByIdsParams) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FindDevicesByIdsParams) GetIncludeDeleted() bool {
	if m != nil {
		return m.IncludeDeleted
	}
	return false
}

type FindDevicesByUserIdRequest struct {
	Params *FindDevicesByUserIdParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindDevicesByUserIdRequest) Reset()                    { *m = FindDevicesByUserIdRequest{} }
func (m *FindDevicesByUserIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FindDevicesByUserIdRequest) ProtoMessage()               {}
func (*FindDevicesByUserIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *FindDevicesByUserIdRequest) GetParams() *FindDevicesByUserIdParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindDevicesByUserIdParams struct {
	UserId         string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit          int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	IncludeDeleted bool   `protobuf:"varint,4,opt,name=includeDeleted" json:"includeDeleted,omitempty"`
	FirstDevice    bool   `protobuf:"varint,5,opt,name=firstDevice" json:"firstDevice,omitempty"`
}

func (m *FindDevicesByUserIdParams) Reset()                    { *m = FindDevicesByUserIdParams{} }
func (m *FindDevicesByUserIdParams) String() string            { return proto.CompactTextString(m) }
func (*FindDevicesByUserIdParams) ProtoMessage()               {}
func (*FindDevicesByUserIdParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *FindDevicesByUserIdParams) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindDevicesByUserIdParams) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FindDevicesByUserIdParams) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FindDevicesByUserIdParams) GetIncludeDeleted() bool {
	if m != nil {
		return m.IncludeDeleted
	}
	return false
}

func (m *FindDevicesByUserIdParams) GetFirstDevice() bool {
	if m != nil {
		return m.FirstDevice
	}
	return false
}

type FindDevicesByUserIdsRequest struct {
	Params *FindDevicesByUserIdsParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindDevicesByUserIdsRequest) Reset()                    { *m = FindDevicesByUserIdsRequest{} }
func (m *FindDevicesByUserIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindDevicesByUserIdsRequest) ProtoMessage()               {}
func (*FindDevicesByUserIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *FindDevicesByUserIdsRequest) GetParams() *FindDevicesByUserIdsParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindDevicesByUserIdsParams struct {
	UserIds          []string          `protobuf:"bytes,1,rep,name=userIds" json:"userIds,omitempty"`
	DeviceNameFilter *DeviceNameFilter `protobuf:"bytes,2,opt,name=deviceNameFilter" json:"deviceNameFilter,omitempty"`
}

func (m *FindDevicesByUserIdsParams) Reset()                    { *m = FindDevicesByUserIdsParams{} }
func (m *FindDevicesByUserIdsParams) String() string            { return proto.CompactTextString(m) }
func (*FindDevicesByUserIdsParams) ProtoMessage()               {}
func (*FindDevicesByUserIdsParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *FindDevicesByUserIdsParams) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *FindDevicesByUserIdsParams) GetDeviceNameFilter() *DeviceNameFilter {
	if m != nil {
		return m.DeviceNameFilter
	}
	return nil
}

type FindDevicesByDeviceIdentifierTokensRequest struct {
	Params *FindDevicesByDeviceIdentifierTokensParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindDevicesByDeviceIdentifierTokensRequest) Reset() {
	*m = FindDevicesByDeviceIdentifierTokensRequest{}
}
func (m *FindDevicesByDeviceIdentifierTokensRequest) String() string {
	return proto.CompactTextString(m)
}
func (*FindDevicesByDeviceIdentifierTokensRequest) ProtoMessage() {}
func (*FindDevicesByDeviceIdentifierTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{10}
}

func (m *FindDevicesByDeviceIdentifierTokensRequest) GetParams() *FindDevicesByDeviceIdentifierTokensParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindDevicesByDeviceIdentifierTokensParams struct {
	Tokens     []string `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	LastDevice bool     `protobuf:"varint,2,opt,name=lastDevice" json:"lastDevice,omitempty"`
}

func (m *FindDevicesByDeviceIdentifierTokensParams) Reset() {
	*m = FindDevicesByDeviceIdentifierTokensParams{}
}
func (m *FindDevicesByDeviceIdentifierTokensParams) String() string { return proto.CompactTextString(m) }
func (*FindDevicesByDeviceIdentifierTokensParams) ProtoMessage()    {}
func (*FindDevicesByDeviceIdentifierTokensParams) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{11}
}

func (m *FindDevicesByDeviceIdentifierTokensParams) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *FindDevicesByDeviceIdentifierTokensParams) GetLastDevice() bool {
	if m != nil {
		return m.LastDevice
	}
	return false
}

type FindExistsByUserIdRequest struct {
	Params *FindExistsByUserIdParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindExistsByUserIdRequest) Reset()                    { *m = FindExistsByUserIdRequest{} }
func (m *FindExistsByUserIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FindExistsByUserIdRequest) ProtoMessage()               {}
func (*FindExistsByUserIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *FindExistsByUserIdRequest) GetParams() *FindExistsByUserIdParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindExistsByUserIdParams struct {
	UserId                       string                        `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	DeviceIdentifierTokensFilter *DeviceIdentifierTokensFilter `protobuf:"bytes,2,opt,name=deviceIdentifierTokensFilter" json:"deviceIdentifierTokensFilter,omitempty"`
}

func (m *FindExistsByUserIdParams) Reset()                    { *m = FindExistsByUserIdParams{} }
func (m *FindExistsByUserIdParams) String() string            { return proto.CompactTextString(m) }
func (*FindExistsByUserIdParams) ProtoMessage()               {}
func (*FindExistsByUserIdParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *FindExistsByUserIdParams) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FindExistsByUserIdParams) GetDeviceIdentifierTokensFilter() *DeviceIdentifierTokensFilter {
	if m != nil {
		return m.DeviceIdentifierTokensFilter
	}
	return nil
}

type FindDeviceIdentifiersByDeviceIdentifierTokensRequest struct {
	Params *FindDeviceIdentifiersByDeviceIdentifierTokensParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *FindDeviceIdentifiersByDeviceIdentifierTokensRequest) Reset() {
	*m = FindDeviceIdentifiersByDeviceIdentifierTokensRequest{}
}
func (m *FindDeviceIdentifiersByDeviceIdentifierTokensRequest) String() string {
	return proto.CompactTextString(m)
}
func (*FindDeviceIdentifiersByDeviceIdentifierTokensRequest) ProtoMessage() {}
func (*FindDeviceIdentifiersByDeviceIdentifierTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{14}
}

func (m *FindDeviceIdentifiersByDeviceIdentifierTokensRequest) GetParams() *FindDeviceIdentifiersByDeviceIdentifierTokensParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type FindDeviceIdentifiersByDeviceIdentifierTokensParams struct {
	Tokens                []string `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	FirstDeviceIdentifier bool     `protobuf:"varint,2,opt,name=firstDeviceIdentifier" json:"firstDeviceIdentifier,omitempty"`
}

func (m *FindDeviceIdentifiersByDeviceIdentifierTokensParams) Reset() {
	*m = FindDeviceIdentifiersByDeviceIdentifierTokensParams{}
}
func (m *FindDeviceIdentifiersByDeviceIdentifierTokensParams) String() string {
	return proto.CompactTextString(m)
}
func (*FindDeviceIdentifiersByDeviceIdentifierTokensParams) ProtoMessage() {}
func (*FindDeviceIdentifiersByDeviceIdentifierTokensParams) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{15}
}

func (m *FindDeviceIdentifiersByDeviceIdentifierTokensParams) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *FindDeviceIdentifiersByDeviceIdentifierTokensParams) GetFirstDeviceIdentifier() bool {
	if m != nil {
		return m.FirstDeviceIdentifier
	}
	return false
}

type InsertDeviceRequest struct {
	Params *InsertDeviceParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *InsertDeviceRequest) Reset()                    { *m = InsertDeviceRequest{} }
func (m *InsertDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertDeviceRequest) ProtoMessage()               {}
func (*InsertDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *InsertDeviceRequest) GetParams() *InsertDeviceParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type InsertDeviceParams struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *InsertDeviceParams) Reset()                    { *m = InsertDeviceParams{} }
func (m *InsertDeviceParams) String() string            { return proto.CompactTextString(m) }
func (*InsertDeviceParams) ProtoMessage()               {}
func (*InsertDeviceParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *InsertDeviceParams) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UpdateDeviceRequest struct {
	Params *UpdateDeviceParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()                    { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()               {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *UpdateDeviceRequest) GetParams() *UpdateDeviceParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type UpdateDeviceParams struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *UpdateDeviceParams) Reset()                    { *m = UpdateDeviceParams{} }
func (m *UpdateDeviceParams) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceParams) ProtoMessage()               {}
func (*UpdateDeviceParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *UpdateDeviceParams) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type RemoveDevicesByIdsRequest struct {
	Params *RemoveDevicesByIdsParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *RemoveDevicesByIdsRequest) Reset()                    { *m = RemoveDevicesByIdsRequest{} }
func (m *RemoveDevicesByIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveDevicesByIdsRequest) ProtoMessage()               {}
func (*RemoveDevicesByIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *RemoveDevicesByIdsRequest) GetParams() *RemoveDevicesByIdsParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type RemoveDevicesByIdsParams struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *RemoveDevicesByIdsParams) Reset()                    { *m = RemoveDevicesByIdsParams{} }
func (m *RemoveDevicesByIdsParams) String() string            { return proto.CompactTextString(m) }
func (*RemoveDevicesByIdsParams) ProtoMessage()               {}
func (*RemoveDevicesByIdsParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *RemoveDevicesByIdsParams) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RemoveDevicesByUserIdsRequest struct {
	Params *RemoveDevicesByUserIdsParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *RemoveDevicesByUserIdsRequest) Reset()                    { *m = RemoveDevicesByUserIdsRequest{} }
func (m *RemoveDevicesByUserIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveDevicesByUserIdsRequest) ProtoMessage()               {}
func (*RemoveDevicesByUserIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *RemoveDevicesByUserIdsRequest) GetParams() *RemoveDevicesByUserIdsParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type RemoveDevicesByUserIdsParams struct {
	UserIds []string `protobuf:"bytes,1,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *RemoveDevicesByUserIdsParams) Reset()                    { *m = RemoveDevicesByUserIdsParams{} }
func (m *RemoveDevicesByUserIdsParams) String() string            { return proto.CompactTextString(m) }
func (*RemoveDevicesByUserIdsParams) ProtoMessage()               {}
func (*RemoveDevicesByUserIdsParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *RemoveDevicesByUserIdsParams) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type InvalidateTokenRequest struct {
	Params *InvalidateTokenParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *InvalidateTokenRequest) Reset()                    { *m = InvalidateTokenRequest{} }
func (m *InvalidateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*InvalidateTokenRequest) ProtoMessage()               {}
func (*InvalidateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *InvalidateTokenRequest) GetParams() *InvalidateTokenParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type InvalidateTokenParams struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *InvalidateTokenParams) Reset()                    { *m = InvalidateTokenParams{} }
func (m *InvalidateTokenParams) String() string            { return proto.CompactTextString(m) }
func (*InvalidateTokenParams) ProtoMessage()               {}
func (*InvalidateTokenParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *InvalidateTokenParams) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type InvalidateTokenReply struct {
}

func (m *InvalidateTokenReply) Reset()                    { *m = InvalidateTokenReply{} }
func (m *InvalidateTokenReply) String() string            { return proto.CompactTextString(m) }
func (*InvalidateTokenReply) ProtoMessage()               {}
func (*InvalidateTokenReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func init() {
	proto.RegisterType((*DevicesReply)(nil), "device.DevicesReply")
	proto.RegisterType((*DeviceIdentifiersReply)(nil), "device.DeviceIdentifiersReply")
	proto.RegisterType((*DeviceNameFilter)(nil), "device.DeviceNameFilter")
	proto.RegisterType((*DeviceIdentifierTokensFilter)(nil), "device.DeviceIdentifierTokensFilter")
	proto.RegisterType((*FindDevicesByIdsRequest)(nil), "device.FindDevicesByIdsRequest")
	proto.RegisterType((*FindDevicesByIdsParams)(nil), "device.FindDevicesByIdsParams")
	proto.RegisterType((*FindDevicesByUserIdRequest)(nil), "device.FindDevicesByUserIdRequest")
	proto.RegisterType((*FindDevicesByUserIdParams)(nil), "device.FindDevicesByUserIdParams")
	proto.RegisterType((*FindDevicesByUserIdsRequest)(nil), "device.FindDevicesByUserIdsRequest")
	proto.RegisterType((*FindDevicesByUserIdsParams)(nil), "device.FindDevicesByUserIdsParams")
	proto.RegisterType((*FindDevicesByDeviceIdentifierTokensRequest)(nil), "device.FindDevicesByDeviceIdentifierTokensRequest")
	proto.RegisterType((*FindDevicesByDeviceIdentifierTokensParams)(nil), "device.FindDevicesByDeviceIdentifierTokensParams")
	proto.RegisterType((*FindExistsByUserIdRequest)(nil), "device.FindExistsByUserIdRequest")
	proto.RegisterType((*FindExistsByUserIdParams)(nil), "device.FindExistsByUserIdParams")
	proto.RegisterType((*FindDeviceIdentifiersByDeviceIdentifierTokensRequest)(nil), "device.FindDeviceIdentifiersByDeviceIdentifierTokensRequest")
	proto.RegisterType((*FindDeviceIdentifiersByDeviceIdentifierTokensParams)(nil), "device.FindDeviceIdentifiersByDeviceIdentifierTokensParams")
	proto.RegisterType((*InsertDeviceRequest)(nil), "device.InsertDeviceRequest")
	proto.RegisterType((*InsertDeviceParams)(nil), "device.InsertDeviceParams")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "device.UpdateDeviceRequest")
	proto.RegisterType((*UpdateDeviceParams)(nil), "device.UpdateDeviceParams")
	proto.RegisterType((*RemoveDevicesByIdsRequest)(nil), "device.RemoveDevicesByIdsRequest")
	proto.RegisterType((*RemoveDevicesByIdsParams)(nil), "device.RemoveDevicesByIdsParams")
	proto.RegisterType((*RemoveDevicesByUserIdsRequest)(nil), "device.RemoveDevicesByUserIdsRequest")
	proto.RegisterType((*RemoveDevicesByUserIdsParams)(nil), "device.RemoveDevicesByUserIdsParams")
	proto.RegisterType((*InvalidateTokenRequest)(nil), "device.InvalidateTokenRequest")
	proto.RegisterType((*InvalidateTokenParams)(nil), "device.InvalidateTokenParams")
	proto.RegisterType((*InvalidateTokenReply)(nil), "device.InvalidateTokenReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceService service

type DeviceServiceClient interface {
	FindDevicesByIds(ctx context.Context, in *FindDevicesByIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	FindDevicesByUserId(ctx context.Context, in *FindDevicesByUserIdRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	FindDevicesByUserIds(ctx context.Context, in *FindDevicesByUserIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	FindDevicesByDeviceIdentifierTokens(ctx context.Context, in *FindDevicesByDeviceIdentifierTokensRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	FindExistsByUserId(ctx context.Context, in *FindExistsByUserIdRequest, opts ...grpc.CallOption) (*common.BoolValue, error)
	FindDeviceIdentifiersByDeviceIdentifierTokens(ctx context.Context, in *FindDeviceIdentifiersByDeviceIdentifierTokensRequest, opts ...grpc.CallOption) (*DeviceIdentifiersReply, error)
	InsertDevice(ctx context.Context, in *InsertDeviceRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	RemoveDevicesByIds(ctx context.Context, in *RemoveDevicesByIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	RemoveDevicesByUserIds(ctx context.Context, in *RemoveDevicesByUserIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error)
	InvalidateToken(ctx context.Context, in *InvalidateTokenRequest, opts ...grpc.CallOption) (*InvalidateTokenReply, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) FindDevicesByIds(ctx context.Context, in *FindDevicesByIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/FindDevicesByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) FindDevicesByUserId(ctx context.Context, in *FindDevicesByUserIdRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/FindDevicesByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) FindDevicesByUserIds(ctx context.Context, in *FindDevicesByUserIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/FindDevicesByUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) FindDevicesByDeviceIdentifierTokens(ctx context.Context, in *FindDevicesByDeviceIdentifierTokensRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/FindDevicesByDeviceIdentifierTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) FindExistsByUserId(ctx context.Context, in *FindExistsByUserIdRequest, opts ...grpc.CallOption) (*common.BoolValue, error) {
	out := new(common.BoolValue)
	err := grpc.Invoke(ctx, "/device.DeviceService/FindExistsByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) FindDeviceIdentifiersByDeviceIdentifierTokens(ctx context.Context, in *FindDeviceIdentifiersByDeviceIdentifierTokensRequest, opts ...grpc.CallOption) (*DeviceIdentifiersReply, error) {
	out := new(DeviceIdentifiersReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/FindDeviceIdentifiersByDeviceIdentifierTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) InsertDevice(ctx context.Context, in *InsertDeviceRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/InsertDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/UpdateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RemoveDevicesByIds(ctx context.Context, in *RemoveDevicesByIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/RemoveDevicesByIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RemoveDevicesByUserIds(ctx context.Context, in *RemoveDevicesByUserIdsRequest, opts ...grpc.CallOption) (*DevicesReply, error) {
	out := new(DevicesReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/RemoveDevicesByUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) InvalidateToken(ctx context.Context, in *InvalidateTokenRequest, opts ...grpc.CallOption) (*InvalidateTokenReply, error) {
	out := new(InvalidateTokenReply)
	err := grpc.Invoke(ctx, "/device.DeviceService/InvalidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceServer interface {
	FindDevicesByIds(context.Context, *FindDevicesByIdsRequest) (*DevicesReply, error)
	FindDevicesByUserId(context.Context, *FindDevicesByUserIdRequest) (*DevicesReply, error)
	FindDevicesByUserIds(context.Context, *FindDevicesByUserIdsRequest) (*DevicesReply, error)
	FindDevicesByDeviceIdentifierTokens(context.Context, *FindDevicesByDeviceIdentifierTokensRequest) (*DevicesReply, error)
	FindExistsByUserId(context.Context, *FindExistsByUserIdRequest) (*common.BoolValue, error)
	FindDeviceIdentifiersByDeviceIdentifierTokens(context.Context, *FindDeviceIdentifiersByDeviceIdentifierTokensRequest) (*DeviceIdentifiersReply, error)
	InsertDevice(context.Context, *InsertDeviceRequest) (*DevicesReply, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*DevicesReply, error)
	RemoveDevicesByIds(context.Context, *RemoveDevicesByIdsRequest) (*DevicesReply, error)
	RemoveDevicesByUserIds(context.Context, *RemoveDevicesByUserIdsRequest) (*DevicesReply, error)
	InvalidateToken(context.Context, *InvalidateTokenRequest) (*InvalidateTokenReply, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_FindDevicesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDevicesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).FindDevicesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/FindDevicesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).FindDevicesByIds(ctx, req.(*FindDevicesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_FindDevicesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDevicesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).FindDevicesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/FindDevicesByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).FindDevicesByUserId(ctx, req.(*FindDevicesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_FindDevicesByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDevicesByUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).FindDevicesByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/FindDevicesByUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).FindDevicesByUserIds(ctx, req.(*FindDevicesByUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_FindDevicesByDeviceIdentifierTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDevicesByDeviceIdentifierTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).FindDevicesByDeviceIdentifierTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/FindDevicesByDeviceIdentifierTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).FindDevicesByDeviceIdentifierTokens(ctx, req.(*FindDevicesByDeviceIdentifierTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_FindExistsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExistsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).FindExistsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/FindExistsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).FindExistsByUserId(ctx, req.(*FindExistsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_FindDeviceIdentifiersByDeviceIdentifierTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDeviceIdentifiersByDeviceIdentifierTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).FindDeviceIdentifiersByDeviceIdentifierTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/FindDeviceIdentifiersByDeviceIdentifierTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).FindDeviceIdentifiersByDeviceIdentifierTokens(ctx, req.(*FindDeviceIdentifiersByDeviceIdentifierTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_InsertDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).InsertDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/InsertDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).InsertDevice(ctx, req.(*InsertDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RemoveDevicesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDevicesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RemoveDevicesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/RemoveDevicesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RemoveDevicesByIds(ctx, req.(*RemoveDevicesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RemoveDevicesByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDevicesByUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RemoveDevicesByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/RemoveDevicesByUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RemoveDevicesByUserIds(ctx, req.(*RemoveDevicesByUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_InvalidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).InvalidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/InvalidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).InvalidateToken(ctx, req.(*InvalidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDevicesByIds",
			Handler:    _DeviceService_FindDevicesByIds_Handler,
		},
		{
			MethodName: "FindDevicesByUserId",
			Handler:    _DeviceService_FindDevicesByUserId_Handler,
		},
		{
			MethodName: "FindDevicesByUserIds",
			Handler:    _DeviceService_FindDevicesByUserIds_Handler,
		},
		{
			MethodName: "FindDevicesByDeviceIdentifierTokens",
			Handler:    _DeviceService_FindDevicesByDeviceIdentifierTokens_Handler,
		},
		{
			MethodName: "FindExistsByUserId",
			Handler:    _DeviceService_FindExistsByUserId_Handler,
		},
		{
			MethodName: "FindDeviceIdentifiersByDeviceIdentifierTokens",
			Handler:    _DeviceService_FindDeviceIdentifiersByDeviceIdentifierTokens_Handler,
		},
		{
			MethodName: "InsertDevice",
			Handler:    _DeviceService_InsertDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceService_UpdateDevice_Handler,
		},
		{
			MethodName: "RemoveDevicesByIds",
			Handler:    _DeviceService_RemoveDevicesByIds_Handler,
		},
		{
			MethodName: "RemoveDevicesByUserIds",
			Handler:    _DeviceService_RemoveDevicesByUserIds_Handler,
		},
		{
			MethodName: "InvalidateToken",
			Handler:    _DeviceService_InvalidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/device.service.proto",
}

func init() { proto.RegisterFile("device/device.service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x52, 0xf3, 0x44,
	0x18, 0xfe, 0x22, 0x52, 0xfc, 0x5e, 0xf0, 0xb3, 0xdf, 0x52, 0x6a, 0x28, 0xa5, 0x96, 0x05, 0x99,
	0xea, 0xd8, 0x76, 0x28, 0xc8, 0xa0, 0x72, 0x04, 0xc8, 0x4c, 0x47, 0x47, 0x24, 0x58, 0x19, 0x9d,
	0x71, 0xc6, 0xd0, 0x6c, 0x21, 0x63, 0xfe, 0x48, 0x52, 0x90, 0x19, 0xcf, 0x3c, 0xf4, 0xc0, 0x1b,
	0xf0, 0x0e, 0xbc, 0x27, 0xaf, 0xc5, 0xc9, 0xee, 0xa6, 0x4d, 0x37, 0xbb, 0x6d, 0xe1, 0xa8, 0xdd,
	0xf7, 0x2f, 0xcf, 0xfb, 0xb3, 0xcf, 0x9b, 0xc0, 0x86, 0x45, 0x1e, 0xec, 0x3e, 0x69, 0xb3, 0x9f,
	0x56, 0x44, 0x42, 0xfa, 0x1b, 0x84, 0x7e, 0xec, 0xa3, 0x02, 0x93, 0x56, 0x56, 0x27, 0x8d, 0xa8,
	0xb2, 0xb2, 0xd6, 0xf7, 0x5d, 0xd7, 0xf7, 0xda, 0x8f, 0xa1, 0x19, 0x04, 0x24, 0x8c, 0x98, 0x18,
	0x1f, 0xc1, 0xca, 0x19, 0x35, 0x8b, 0x0c, 0x12, 0x38, 0x4f, 0xa8, 0x01, 0x4b, 0xcc, 0x2d, 0xd2,
	0xb5, 0xfa, 0x42, 0x63, 0xb9, 0xf3, 0xa6, 0xc5, 0xc3, 0x30, 0x33, 0x23, 0x55, 0xe3, 0x5f, 0xa1,
	0xcc, 0x44, 0x5d, 0x8b, 0x78, 0xb1, 0x3d, 0xb0, 0x49, 0xc8, 0x63, 0x9c, 0xc3, 0x5b, 0x4b, 0xd4,
	0xf0, 0x68, 0xfa, 0x64, 0xb4, 0xb1, 0x81, 0x91, 0x77, 0xc1, 0x1d, 0x28, 0x32, 0xb3, 0xef, 0x4c,
	0x97, 0x9c, 0xdb, 0x4e, 0x4c, 0x42, 0x54, 0x03, 0xb0, 0x46, 0x32, 0x5d, 0xab, 0x6b, 0x8d, 0xd7,
	0x46, 0x46, 0x82, 0x0f, 0xa1, 0x2a, 0x86, 0xfe, 0xc1, 0xff, 0x8d, 0x78, 0x11, 0xf7, 0x2f, 0x43,
	0x21, 0xa6, 0x67, 0x0a, 0xe8, 0xb5, 0xc1, 0x4f, 0xf8, 0x12, 0x3e, 0x3c, 0xb7, 0x3d, 0x8b, 0xd7,
	0xe2, 0xe4, 0xa9, 0x6b, 0x45, 0x06, 0xb9, 0x1f, 0x92, 0x28, 0x46, 0x87, 0x50, 0x08, 0xcc, 0xd0,
	0x74, 0x23, 0xfa, 0xb8, 0xe5, 0x4e, 0x2d, 0xcd, 0x41, 0x74, 0xf8, 0x9e, 0x5a, 0x19, 0xdc, 0x1a,
	0x1b, 0x50, 0x96, 0x5b, 0xa0, 0x22, 0x2c, 0xd8, 0x56, 0x8a, 0x20, 0xf9, 0x8b, 0x76, 0xe1, 0x8d,
	0xed, 0xf5, 0x9d, 0xa1, 0x45, 0xce, 0x88, 0x43, 0x62, 0x62, 0xe9, 0xef, 0xd4, 0xb5, 0xc6, 0x7b,
	0x86, 0x20, 0xc5, 0xd7, 0x50, 0x99, 0x88, 0xd9, 0x8b, 0x48, 0xd8, 0xb5, 0x52, 0xa4, 0x5f, 0x08,
	0x48, 0xb7, 0xa4, 0x48, 0x99, 0x8f, 0x00, 0xf6, 0x5f, 0x0d, 0xd6, 0x95, 0x56, 0x49, 0xd5, 0x86,
	0xf4, 0xcc, 0x2b, 0xce, 0x4f, 0x89, 0xdc, 0x1f, 0x0c, 0x22, 0x12, 0x53, 0xb8, 0x8b, 0x06, 0x3f,
	0xa1, 0x12, 0x2c, 0x3a, 0xb6, 0x6b, 0xc7, 0xfa, 0x02, 0x15, 0xb3, 0x83, 0x24, 0xc9, 0x77, 0x65,
	0x49, 0xa2, 0x3a, 0x2c, 0x0f, 0xec, 0x30, 0x8a, 0x19, 0x16, 0x7d, 0x91, 0x1a, 0x65, 0x45, 0xf8,
	0x27, 0xd8, 0x90, 0x80, 0x1d, 0x75, 0xec, 0x4b, 0xa1, 0x0e, 0x78, 0x4a, 0x1d, 0xc4, 0xae, 0xfd,
	0x21, 0xad, 0x70, 0xda, 0x39, 0x1d, 0x96, 0x58, 0xea, 0x69, 0xf7, 0xd2, 0x23, 0x3a, 0x83, 0xa2,
	0x25, 0x0c, 0x2b, 0x2d, 0x4a, 0x6e, 0xe6, 0xc7, 0x7a, 0x23, 0xe7, 0x81, 0x1f, 0xe1, 0xd3, 0x89,
	0xa7, 0xcb, 0x67, 0x39, 0xcd, 0xb3, 0x2b, 0xe4, 0xb9, 0x27, 0xcd, 0x53, 0x1e, 0x43, 0x48, 0xbb,
	0x0f, 0x9f, 0xcc, 0xed, 0xa4, 0xba, 0x44, 0xc9, 0xe5, 0x74, 0xcc, 0x51, 0xdf, 0xd8, 0x04, 0x67,
	0x24, 0xb8, 0xc7, 0x66, 0xec, 0xeb, 0xdf, 0xed, 0x28, 0xce, 0x0d, 0xef, 0x91, 0x90, 0x4c, 0x3d,
	0x9b, 0xcc, 0xa4, 0x8b, 0x80, 0xfd, 0x1f, 0x0d, 0x74, 0x95, 0x91, 0x72, 0x74, 0xef, 0xa0, 0x6a,
	0x4d, 0x21, 0x0a, 0xde, 0xbb, 0x1d, 0x15, 0x5f, 0x65, 0x6d, 0x8d, 0xa9, 0x91, 0xf0, 0x5f, 0x1a,
	0x1c, 0x8c, 0x6b, 0x9b, 0x21, 0xb8, 0x59, 0xed, 0xbd, 0x12, 0x2a, 0xf2, 0x55, 0xbe, 0xbd, 0x73,
	0x44, 0x13, 0x8a, 0xf5, 0xa7, 0x06, 0xfb, 0x2f, 0xf0, 0x57, 0xf6, 0xfc, 0x00, 0xd6, 0x32, 0x37,
	0x73, 0xec, 0xcc, 0xdb, 0x2f, 0x57, 0xe2, 0x2e, 0xac, 0x76, 0xbd, 0x88, 0x84, 0x5c, 0x93, 0x66,
	0xdc, 0x11, 0x32, 0xae, 0xa4, 0x19, 0x67, 0x8d, 0x85, 0x84, 0x8e, 0x01, 0xe5, 0xb5, 0x68, 0x17,
	0xf8, 0x36, 0xe4, 0x91, 0xc4, 0x35, 0xc6, 0xb5, 0x09, 0x90, 0x5e, 0x60, 0x99, 0x31, 0x99, 0x13,
	0x48, 0xd6, 0x38, 0x0f, 0x24, 0xaf, 0x9d, 0x1b, 0x48, 0x0f, 0xd6, 0x0d, 0xe2, 0xfa, 0x0f, 0x44,
	0xb6, 0x82, 0x94, 0x77, 0x23, 0xef, 0x22, 0x80, 0xfa, 0x0c, 0x74, 0x95, 0x4d, 0x7e, 0x0d, 0xe1,
	0x5f, 0x60, 0x53, 0xb0, 0x16, 0x98, 0xf5, 0x58, 0x00, 0xb2, 0xa3, 0x00, 0x22, 0xe7, 0xd6, 0x23,
	0xa8, 0x4e, 0xb3, 0x53, 0xb3, 0x2b, 0xbe, 0x80, 0x72, 0xd7, 0x7b, 0x30, 0x1d, 0x3b, 0xa9, 0x2f,
	0x9d, 0xcb, 0x14, 0xd1, 0xe7, 0x02, 0xa2, 0xcd, 0xf1, 0xc8, 0x4c, 0xd8, 0x0b, 0x50, 0x9a, 0xb0,
	0x26, 0x35, 0x48, 0x56, 0x17, 0x9d, 0x6c, 0x4e, 0x17, 0xec, 0x80, 0xcb, 0x50, 0xca, 0x3d, 0x3f,
	0x70, 0x9e, 0x3a, 0xff, 0x2d, 0xc1, 0xfb, 0x2c, 0x99, 0x2b, 0xf6, 0x2a, 0x86, 0xbe, 0x81, 0xa2,
	0xb8, 0xf5, 0xd1, 0x47, 0xaa, 0x37, 0x06, 0x9e, 0x44, 0xa5, 0x34, 0x39, 0x14, 0xec, 0x3d, 0x0a,
	0xbf, 0x42, 0x97, 0xb0, 0x2a, 0x59, 0x46, 0x68, 0xda, 0x3e, 0x9b, 0x15, 0xf2, 0x0a, 0x4a, 0xb2,
	0xfd, 0x86, 0xb6, 0xa7, 0xed, 0xc8, 0x59, 0x41, 0xef, 0x61, 0x7b, 0x8e, 0xed, 0x81, 0x3a, 0xcf,
	0xd8, 0x4f, 0xb3, 0x1e, 0xf9, 0x2d, 0xa0, 0x3c, 0xe7, 0xa3, 0x2d, 0xf5, 0xd2, 0x48, 0x03, 0xbe,
	0x6d, 0xb1, 0x37, 0xe1, 0xd6, 0x89, 0xef, 0x3b, 0x3f, 0x9a, 0xce, 0x90, 0xe0, 0x57, 0xe8, 0x6f,
	0x0d, 0x9a, 0xcf, 0x62, 0x45, 0x74, 0xfc, 0x22, 0x32, 0x4e, 0x41, 0xd4, 0x54, 0x7b, 0x65, 0x94,
	0xdf, 0x29, 0xac, 0x64, 0x69, 0x0d, 0x6d, 0xc8, 0xa8, 0x70, 0x56, 0x91, 0x4e, 0x61, 0x25, 0x4b,
	0x49, 0xe3, 0x20, 0x12, 0xce, 0x53, 0x06, 0xb9, 0x00, 0x94, 0xa7, 0x90, 0x71, 0xa5, 0x95, 0xac,
	0xa5, 0x0c, 0x78, 0x0d, 0x65, 0x39, 0x0d, 0xa0, 0x8f, 0xa7, 0xd3, 0xc9, 0xec, 0xeb, 0xf2, 0x81,
	0x70, 0x4b, 0x51, 0x4d, 0x41, 0x07, 0x69, 0xa8, 0xaa, 0x52, 0x4f, 0x43, 0x9e, 0x1c, 0xfc, 0xdc,
	0xb9, 0xb5, 0xe3, 0xbb, 0xe1, 0x4d, 0x32, 0x35, 0xed, 0x60, 0xaf, 0xef, 0xb5, 0x63, 0xd3, 0x8b,
	0x4d, 0xaf, 0x69, 0xf9, 0xae, 0x69, 0x7b, 0xcd, 0xa8, 0x7f, 0x47, 0x5c, 0xb3, 0x7d, 0xeb, 0x3b,
	0xa6, 0x77, 0xcb, 0x3f, 0xb9, 0x6e, 0x0a, 0xf4, 0xe3, 0x6a, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe9, 0x7f, 0xab, 0x70, 0xaf, 0x0d, 0x00, 0x00,
}
